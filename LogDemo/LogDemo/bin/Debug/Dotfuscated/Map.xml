<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE dotfuscatorMap SYSTEM "http://www.preemptive.com/dotfuscator/dtd/dotfuscatorMap_v1.2.dtd">
<dotfuscatorMap version="1.1">
    <header>
        <timestamp>2014-06-29T17:42:48</timestamp>
        <product version="5.5.4954.46574" user="Unregistered " serial="000-00-000-391">Dotfuscator and Analytics Community Edition</product>
    </header>
    <mapping>
        <module>
            <name>log4net.dll</name>
            <type>
                <name>&lt;PrivateImplementationDetails&gt;{09B08C78-8842-4FB5-9C1C-D468A267C0C8}</name>
                <newname>b</newname>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>&lt;PrivateImplementationDetails&gt;{09B08C78-8842-4FB5-9C1C-D468A267C0C8}/__StaticArrayInitTypeSize=54</signature>
                        <name>$$method0x600076e-1</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>&lt;PrivateImplementationDetails&gt;{09B08C78-8842-4FB5-9C1C-D468A267C0C8}/__StaticArrayInitTypeSize=54</name>
                <newname>b/a</newname>
                <methodlist />
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>log4net.Appender.AdoNetAppender</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ActivateOptions</name>
                    </method>
                    <method>
                        <signature>void(log4net.Appender.AdoNetAppenderParameter)</signature>
                        <name>AddParameter</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_CommandText</name>
                    </method>
                    <method>
                        <signature>System.Data.CommandType()</signature>
                        <name>get_CommandType</name>
                    </method>
                    <method>
                        <signature>System.Data.IDbConnection()</signature>
                        <name>get_Connection</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_ConnectionString</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_ConnectionType</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_ReconnectOnError</name>
                    </method>
                    <method>
                        <signature>log4net.Core.SecurityContext()</signature>
                        <name>get_SecurityContext</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_UseTransactions</name>
                    </method>
                    <method>
                        <signature>string(log4net.Core.LoggingEvent)</signature>
                        <name>GetLogStatement</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>InitializeDatabaseCommand</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>InitializeDatabaseConnection</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>OnClose</name>
                    </method>
                    <method>
                        <signature>System.Type()</signature>
                        <name>ResolveConnectionType</name>
                    </method>
                    <method>
                        <signature>void(log4net.Core.LoggingEvent[])</signature>
                        <name>SendBuffer</name>
                    </method>
                    <method>
                        <signature>void(System.Data.IDbTransaction, log4net.Core.LoggingEvent[])</signature>
                        <name>SendBuffer</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_CommandText</name>
                    </method>
                    <method>
                        <signature>void(System.Data.CommandType)</signature>
                        <name>set_CommandType</name>
                    </method>
                    <method>
                        <signature>void(System.Data.IDbConnection)</signature>
                        <name>set_Connection</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_ConnectionString</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_ConnectionType</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_ReconnectOnError</name>
                    </method>
                    <method>
                        <signature>void(log4net.Core.SecurityContext)</signature>
                        <name>set_SecurityContext</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_UseTransactions</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>m_commandText</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>System.Data.CommandType</signature>
                        <name>m_commandType</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>m_connectionString</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>m_connectionType</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>System.Data.IDbCommand</signature>
                        <name>m_dbCommand</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>System.Data.IDbConnection</signature>
                        <name>m_dbConnection</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Collections.ArrayList</signature>
                        <name>m_parameters</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>m_reconnectOnError</name>
                        <newname>i</newname>
                    </field>
                    <field>
                        <signature>log4net.Core.SecurityContext</signature>
                        <name>m_securityContext</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>m_usePreparedCommand</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>m_useTransactions</name>
                        <newname>h</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>string()</signature>
                        <name>CommandText</name>
                    </property>
                    <property>
                        <signature>System.Data.CommandType()</signature>
                        <name>CommandType</name>
                    </property>
                    <property>
                        <signature>System.Data.IDbConnection()</signature>
                        <name>Connection</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>ConnectionString</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>ConnectionType</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>ReconnectOnError</name>
                    </property>
                    <property>
                        <signature>log4net.Core.SecurityContext()</signature>
                        <name>SecurityContext</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>UseTransactions</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>log4net.Appender.AdoNetAppenderParameter</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.Data.IDbCommand, log4net.Core.LoggingEvent)</signature>
                        <name>FormatValue</name>
                    </method>
                    <method>
                        <signature>System.Data.DbType()</signature>
                        <name>get_DbType</name>
                    </method>
                    <method>
                        <signature>log4net.Layout.IRawLayout()</signature>
                        <name>get_Layout</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_ParameterName</name>
                    </method>
                    <method>
                        <signature>unsigned int8()</signature>
                        <name>get_Precision</name>
                    </method>
                    <method>
                        <signature>unsigned int8()</signature>
                        <name>get_Scale</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Size</name>
                    </method>
                    <method>
                        <signature>void(System.Data.IDbCommand)</signature>
                        <name>Prepare</name>
                    </method>
                    <method>
                        <signature>void(System.Data.DbType)</signature>
                        <name>set_DbType</name>
                    </method>
                    <method>
                        <signature>void(log4net.Layout.IRawLayout)</signature>
                        <name>set_Layout</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_ParameterName</name>
                    </method>
                    <method>
                        <signature>void(unsigned int8)</signature>
                        <name>set_Precision</name>
                    </method>
                    <method>
                        <signature>void(unsigned int8)</signature>
                        <name>set_Scale</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_Size</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Data.DbType</signature>
                        <name>m_dbType</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>m_inferType</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>log4net.Layout.IRawLayout</signature>
                        <name>m_layout</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>m_parameterName</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>m_precision</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>unsigned int8</signature>
                        <name>m_scale</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>m_size</name>
                        <newname>f</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>System.Data.DbType()</signature>
                        <name>DbType</name>
                    </property>
                    <property>
                        <signature>log4net.Layout.IRawLayout()</signature>
                        <name>Layout</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>ParameterName</name>
                    </property>
                    <property>
                        <signature>unsigned int8()</signature>
                        <name>Precision</name>
                    </property>
                    <property>
                        <signature>unsigned int8()</signature>
                        <name>Scale</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>Size</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>log4net.Appender.AnsiColorTerminalAppender</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ActivateOptions</name>
                    </method>
                    <method>
                        <signature>void(log4net.Appender.AnsiColorTerminalAppender/LevelColors)</signature>
                        <name>AddMapping</name>
                    </method>
                    <method>
                        <signature>void(log4net.Core.LoggingEvent)</signature>
                        <name>Append</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_RequiresLayout</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Target</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Target</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>ConsoleError</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>ConsoleOut</name>
                    </field>
                    <field>
                        <signature>log4net.Util.LevelMapping</signature>
                        <name>m_levelMapping</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>m_writeToErrorStream</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>PostEventCodes</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>bool()</signature>
                        <name>RequiresLayout</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>Target</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>log4net.Appender.AnsiColorTerminalAppender/AnsiAttributes</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>log4net.Appender.AnsiColorTerminalAppender/AnsiAttributes</signature>
                        <name>Blink</name>
                    </field>
                    <field>
                        <signature>log4net.Appender.AnsiColorTerminalAppender/AnsiAttributes</signature>
                        <name>Bright</name>
                    </field>
                    <field>
                        <signature>log4net.Appender.AnsiColorTerminalAppender/AnsiAttributes</signature>
                        <name>Dim</name>
                    </field>
                    <field>
                        <signature>log4net.Appender.AnsiColorTerminalAppender/AnsiAttributes</signature>
                        <name>Hidden</name>
                    </field>
                    <field>
                        <signature>log4net.Appender.AnsiColorTerminalAppender/AnsiAttributes</signature>
                        <name>Reverse</name>
                    </field>
                    <field>
                        <signature>log4net.Appender.AnsiColorTerminalAppender/AnsiAttributes</signature>
                        <name>Strikethrough</name>
                    </field>
                    <field>
                        <signature>log4net.Appender.AnsiColorTerminalAppender/AnsiAttributes</signature>
                        <name>Underscore</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>log4net.Appender.AnsiColorTerminalAppender/AnsiColor</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>log4net.Appender.AnsiColorTerminalAppender/AnsiColor</signature>
                        <name>Black</name>
                    </field>
                    <field>
                        <signature>log4net.Appender.AnsiColorTerminalAppender/AnsiColor</signature>
                        <name>Blue</name>
                    </field>
                    <field>
                        <signature>log4net.Appender.AnsiColorTerminalAppender/AnsiColor</signature>
                        <name>Cyan</name>
                    </field>
                    <field>
                        <signature>log4net.Appender.AnsiColorTerminalAppender/AnsiColor</signature>
                        <name>Green</name>
                    </field>
                    <field>
                        <signature>log4net.Appender.AnsiColorTerminalAppender/AnsiColor</signature>
                        <name>Magenta</name>
                    </field>
                    <field>
                        <signature>log4net.Appender.AnsiColorTerminalAppender/AnsiColor</signature>
                        <name>Red</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                    <field>
                        <signature>log4net.Appender.AnsiColorTerminalAppender/AnsiColor</signature>
                        <name>White</name>
                    </field>
                    <field>
                        <signature>log4net.Appender.AnsiColorTerminalAppender/AnsiColor</signature>
                        <name>Yellow</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>log4net.Appender.AnsiColorTerminalAppender/LevelColors</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ActivateOptions</name>
                    </method>
                    <method>
                        <signature>log4net.Appender.AnsiColorTerminalAppender/AnsiAttributes()</signature>
                        <name>get_Attributes</name>
                    </method>
                    <method>
                        <signature>log4net.Appender.AnsiColorTerminalAppender/AnsiColor()</signature>
                        <name>get_BackColor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_CombinedColor</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>log4net.Appender.AnsiColorTerminalAppender/AnsiColor()</signature>
                        <name>get_ForeColor</name>
                    </method>
                    <method>
                        <signature>void(log4net.Appender.AnsiColorTerminalAppender/AnsiAttributes)</signature>
                        <name>set_Attributes</name>
                    </method>
                    <method>
                        <signature>void(log4net.Appender.AnsiColorTerminalAppender/AnsiColor)</signature>
                        <name>set_BackColor</name>
                    </method>
                    <method>
                        <signature>void(log4net.Appender.AnsiColorTerminalAppender/AnsiColor)</signature>
                        <name>set_ForeColor</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>log4net.Appender.AnsiColorTerminalAppender/AnsiAttributes</signature>
                        <name>m_attributes</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>log4net.Appender.AnsiColorTerminalAppender/AnsiColor</signature>
                        <name>m_backColor</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>m_combinedColor</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>log4net.Appender.AnsiColorTerminalAppender/AnsiColor</signature>
                        <name>m_foreColor</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>log4net.Appender.AnsiColorTerminalAppender/AnsiAttributes()</signature>
                        <name>Attributes</name>
                    </property>
                    <property>
                        <signature>log4net.Appender.AnsiColorTerminalAppender/AnsiColor()</signature>
                        <name>BackColor</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>CombinedColor</name>
                    </property>
                    <property>
                        <signature>log4net.Appender.AnsiColorTerminalAppender/AnsiColor()</signature>
                        <name>ForeColor</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>log4net.Appender.AppenderCollection</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(log4net.Appender.AppenderCollection)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(log4net.Appender.AppenderCollection/Tag)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(log4net.Appender.IAppender[])</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.ICollection)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>int32(log4net.Appender.IAppender)</signature>
                        <name>Add</name>
                    </method>
                    <method>
                        <signature>int32(log4net.Appender.AppenderCollection)</signature>
                        <name>AddRange</name>
                    </method>
                    <method>
                        <signature>int32(log4net.Appender.IAppender[])</signature>
                        <name>AddRange</name>
                    </method>
                    <method>
                        <signature>int32(System.Collections.ICollection)</signature>
                        <name>AddRange</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Clear</name>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>Clone</name>
                    </method>
                    <method>
                        <signature>bool(log4net.Appender.IAppender)</signature>
                        <name>Contains</name>
                    </method>
                    <method>
                        <signature>void(log4net.Appender.IAppender[])</signature>
                        <name>CopyTo</name>
                    </method>
                    <method>
                        <signature>void(log4net.Appender.IAppender[], int32)</signature>
                        <name>CopyTo</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>EnsureCapacity</name>
                        <newname>h</newname>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Capacity</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Count</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsFixedSize</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsReadOnly</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsSynchronized</name>
                    </method>
                    <method>
                        <signature>log4net.Appender.IAppender(int32)</signature>
                        <name>get_Item</name>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>get_SyncRoot</name>
                    </method>
                    <method>
                        <signature>log4net.Appender.AppenderCollection/IAppenderCollectionEnumerator()</signature>
                        <name>GetEnumerator</name>
                    </method>
                    <method>
                        <signature>int32(log4net.Appender.IAppender)</signature>
                        <name>IndexOf</name>
                    </method>
                    <method>
                        <signature>void(int32, log4net.Appender.IAppender)</signature>
                        <name>Insert</name>
                    </method>
                    <method>
                        <signature>log4net.Appender.AppenderCollection(log4net.Appender.AppenderCollection)</signature>
                        <name>ReadOnly</name>
                    </method>
                    <method>
                        <signature>void(log4net.Appender.IAppender)</signature>
                        <name>Remove</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>RemoveAt</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_Capacity</name>
                    </method>
                    <method>
                        <signature>void(int32, log4net.Appender.IAppender)</signature>
                        <name>set_Item</name>
                    </method>
                    <method>
                        <signature>void(System.Array, int32)</signature>
                        <name>System.Collections.ICollection.CopyTo</name>
                    </method>
                    <method>
                        <signature>System.Collections.IEnumerator()</signature>
                        <name>System.Collections.IEnumerable.GetEnumerator</name>
                    </method>
                    <method>
                        <signature>int32(object)</signature>
                        <name>System.Collections.IList.Add</name>
                    </method>
                    <method>
                        <signature>bool(object)</signature>
                        <name>System.Collections.IList.Contains</name>
                    </method>
                    <method>
                        <signature>object(int32)</signature>
                        <name>System.Collections.IList.get_Item</name>
                    </method>
                    <method>
                        <signature>int32(object)</signature>
                        <name>System.Collections.IList.IndexOf</name>
                    </method>
                    <method>
                        <signature>void(int32, object)</signature>
                        <name>System.Collections.IList.Insert</name>
                    </method>
                    <method>
                        <signature>void(object)</signature>
                        <name>System.Collections.IList.Remove</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>System.Collections.IList.RemoveAt</name>
                    </method>
                    <method>
                        <signature>void(int32, object)</signature>
                        <name>System.Collections.IList.set_Item</name>
                    </method>
                    <method>
                        <signature>log4net.Appender.IAppender[]()</signature>
                        <name>ToArray</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>TrimToSize</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>ValidateIndex</name>
                        <newname>i</newname>
                    </method>
                    <method>
                        <signature>void(int32, bool)</signature>
                        <name>ValidateIndex</name>
                        <newname>h</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>DEFAULT_CAPACITY</name>
                        <newname>h</newname>
                    </field>
                    <field>
                        <signature>log4net.Appender.AppenderCollection</signature>
                        <name>EmptyCollection</name>
                    </field>
                    <field>
                        <signature>log4net.Appender.IAppender[]</signature>
                        <name>m_array</name>
                        <newname>i</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>m_count</name>
                        <newname>j</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>m_version</name>
                        <newname>k</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>int32()</signature>
                        <name>Capacity</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>Count</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>IsFixedSize</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>IsReadOnly</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>IsSynchronized</name>
                    </property>
                    <property>
                        <signature>log4net.Appender.IAppender(int32)</signature>
                        <name>Item</name>
                    </property>
                    <property>
                        <signature>object()</signature>
                        <name>SyncRoot</name>
                    </property>
                    <property>
                        <signature>object(int32)</signature>
                        <name>System.Collections.IList.Item</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>log4net.Appender.AppenderCollection/Enumerator</name>
                <newname>log4net.Appender.AppenderCollection/a</newname>
                <methodlist>
                    <method>
                        <signature>void(log4net.Appender.AppenderCollection)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>log4net.Appender.IAppender()</signature>
                        <name>get_Current</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>MoveNext</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Reset</name>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>System.Collections.IEnumerator.get_Current</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>log4net.Appender.AppenderCollection</signature>
                        <name>m_collection</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>m_index</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>m_version</name>
                        <newname>c</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>log4net.Appender.AppenderCollection/IAppenderCollectionEnumerator</name>
                <methodlist>
                    <method>
                        <signature>log4net.Appender.IAppender()</signature>
                        <name>get_Current</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>MoveNext</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Reset</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist>
                    <property>
                        <signature>log4net.Appender.IAppender()</signature>
                        <name>Current</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>log4net.Appender.AppenderCollection/ReadOnlyAppenderCollection</name>
                <newname>log4net.Appender.AppenderCollection/b</newname>
                <methodlist>
                    <method>
                        <signature>void(log4net.Appender.AppenderCollection)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>int32(log4net.Appender.IAppender)</signature>
                        <name>Add</name>
                    </method>
                    <method>
                        <signature>int32(log4net.Appender.AppenderCollection)</signature>
                        <name>AddRange</name>
                    </method>
                    <method>
                        <signature>int32(log4net.Appender.IAppender[])</signature>
                        <name>AddRange</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Clear</name>
                    </method>
                    <method>
                        <signature>bool(log4net.Appender.IAppender)</signature>
                        <name>Contains</name>
                    </method>
                    <method>
                        <signature>void(log4net.Appender.IAppender[])</signature>
                        <name>CopyTo</name>
                    </method>
                    <method>
                        <signature>void(log4net.Appender.IAppender[], int32)</signature>
                        <name>CopyTo</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Capacity</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Count</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsFixedSize</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsReadOnly</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsSynchronized</name>
                    </method>
                    <method>
                        <signature>log4net.Appender.IAppender(int32)</signature>
                        <name>get_Item</name>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>get_SyncRoot</name>
                    </method>
                    <method>
                        <signature>log4net.Appender.AppenderCollection/IAppenderCollectionEnumerator()</signature>
                        <name>GetEnumerator</name>
                    </method>
                    <method>
                        <signature>int32(log4net.Appender.IAppender)</signature>
                        <name>IndexOf</name>
                    </method>
                    <method>
                        <signature>void(int32, log4net.Appender.IAppender)</signature>
                        <name>Insert</name>
                    </method>
                    <method>
                        <signature>void(log4net.Appender.IAppender)</signature>
                        <name>Remove</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>RemoveAt</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_Capacity</name>
                    </method>
                    <method>
                        <signature>void(int32, log4net.Appender.IAppender)</signature>
                        <name>set_Item</name>
                    </method>
                    <method>
                        <signature>void(System.Array, int32)</signature>
                        <name>System.Collections.ICollection.CopyTo</name>
                        <newname>h</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>log4net.Appender.AppenderCollection</signature>
                        <name>m_collection</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>log4net.Appender.IAppender(int32)</signature>
                        <name>Item</name>
                        <newname>d</newname>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>log4net.Appender.AppenderCollection/Tag</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>log4net.Appender.AppenderCollection/Tag</signature>
                        <name>Default</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>log4net.Appender.AppenderSkeleton</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ActivateOptions</name>
                    </method>
                    <method>
                        <signature>void(log4net.Filter.IFilter)</signature>
                        <name>AddFilter</name>
                    </method>
                    <method>
                        <signature>void(log4net.Core.LoggingEvent)</signature>
                        <name>Append</name>
                    </method>
                    <method>
                        <signature>void(log4net.Core.LoggingEvent[])</signature>
                        <name>Append</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ClearFilters</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Close</name>
                    </method>
                    <method>
                        <signature>void(log4net.Core.LoggingEvent)</signature>
                        <name>DoAppend</name>
                    </method>
                    <method>
                        <signature>void(log4net.Core.LoggingEvent[])</signature>
                        <name>DoAppend</name>
                    </method>
                    <method>
                        <signature>bool(log4net.Core.LoggingEvent)</signature>
                        <name>FilterEvent</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Finalize</name>
                    </method>
                    <method>
                        <signature>log4net.Core.IErrorHandler()</signature>
                        <name>get_ErrorHandler</name>
                    </method>
                    <method>
                        <signature>log4net.Filter.IFilter()</signature>
                        <name>get_FilterHead</name>
                    </method>
                    <method>
                        <signature>log4net.Layout.ILayout()</signature>
                        <name>get_Layout</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Name</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_RequiresLayout</name>
                    </method>
                    <method>
                        <signature>log4net.Core.Level()</signature>
                        <name>get_Threshold</name>
                    </method>
                    <method>
                        <signature>bool(log4net.Core.Level)</signature>
                        <name>IsAsSevereAsThreshold</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>OnClose</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>PreAppendCheck</name>
                    </method>
                    <method>
                        <signature>string(log4net.Core.LoggingEvent)</signature>
                        <name>RenderLoggingEvent</name>
                    </method>
                    <method>
                        <signature>void(System.IO.TextWriter, log4net.Core.LoggingEvent)</signature>
                        <name>RenderLoggingEvent</name>
                    </method>
                    <method>
                        <signature>void(log4net.Core.IErrorHandler)</signature>
                        <name>set_ErrorHandler</name>
                    </method>
                    <method>
                        <signature>void(log4net.Layout.ILayout)</signature>
                        <name>set_Layout</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Name</name>
                    </method>
                    <method>
                        <signature>void(log4net.Core.Level)</signature>
                        <name>set_Threshold</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>c_renderBufferMaxCapacity</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>c_renderBufferSize</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>m_closed</name>
                        <newname>i</newname>
                    </field>
                    <field>
                        <signature>log4net.Core.IErrorHandler</signature>
                        <name>m_errorHandler</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>log4net.Filter.IFilter</signature>
                        <name>m_headFilter</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>log4net.Layout.ILayout</signature>
                        <name>m_layout</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>m_name</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>m_recursiveGuard</name>
                        <newname>j</newname>
                    </field>
                    <field>
                        <signature>log4net.Util.ReusableStringWriter</signature>
                        <name>m_renderWriter</name>
                        <newname>k</newname>
                    </field>
                    <field>
                        <signature>log4net.Filter.IFilter</signature>
                        <name>m_tailFilter</name>
                        <newname>h</newname>
                    </field>
                    <field>
                        <signature>log4net.Core.Level</signature>
                        <name>m_threshold</name>
                        <newname>e</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>log4net.Core.IErrorHandler()</signature>
                        <name>ErrorHandler</name>
                    </property>
                    <property>
                        <signature>log4net.Filter.IFilter()</signature>
                        <name>FilterHead</name>
                    </property>
                    <property>
                        <signature>log4net.Layout.ILayout()</signature>
                        <name>Layout</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>Name</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>RequiresLayout</name>
                    </property>
                    <property>
                        <signature>log4net.Core.Level()</signature>
                        <name>Threshold</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>log4net.Appender.AspNetTraceAppender</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(log4net.Core.LoggingEvent)</signature>
                        <name>Append</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_RequiresLayout</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist>
                    <property>
                        <signature>bool()</signature>
                        <name>RequiresLayout</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>log4net.Appender.BufferingAppenderSkeleton</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ActivateOptions</name>
                    </method>
                    <method>
                        <signature>void(log4net.Core.LoggingEvent)</signature>
                        <name>Append</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Flush</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>Flush</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_BufferSize</name>
                    </method>
                    <method>
                        <signature>log4net.Core.ITriggeringEventEvaluator()</signature>
                        <name>get_Evaluator</name>
                    </method>
                    <method>
                        <signature>log4net.Core.FixFlags()</signature>
                        <name>get_Fix</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_Lossy</name>
                    </method>
                    <method>
                        <signature>log4net.Core.ITriggeringEventEvaluator()</signature>
                        <name>get_LossyEvaluator</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_OnlyFixPartialEventData</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>OnClose</name>
                    </method>
                    <method>
                        <signature>void(log4net.Core.LoggingEvent[])</signature>
                        <name>SendBuffer</name>
                    </method>
                    <method>
                        <signature>void(log4net.Core.LoggingEvent, log4net.Util.CyclicBuffer)</signature>
                        <name>SendFromBuffer</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_BufferSize</name>
                    </method>
                    <method>
                        <signature>void(log4net.Core.ITriggeringEventEvaluator)</signature>
                        <name>set_Evaluator</name>
                    </method>
                    <method>
                        <signature>void(log4net.Core.FixFlags)</signature>
                        <name>set_Fix</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_Lossy</name>
                    </method>
                    <method>
                        <signature>void(log4net.Core.ITriggeringEventEvaluator)</signature>
                        <name>set_LossyEvaluator</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_OnlyFixPartialEventData</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>DEFAULT_BUFFER_SIZE</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>m_bufferSize</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>log4net.Util.CyclicBuffer</signature>
                        <name>m_cb</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>log4net.Core.ITriggeringEventEvaluator</signature>
                        <name>m_evaluator</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>m_eventMustBeFixed</name>
                        <newname>h</newname>
                    </field>
                    <field>
                        <signature>log4net.Core.FixFlags</signature>
                        <name>m_fixFlags</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>m_lossy</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>log4net.Core.ITriggeringEventEvaluator</signature>
                        <name>m_lossyEvaluator</name>
                        <newname>f</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>int32()</signature>
                        <name>BufferSize</name>
                    </property>
                    <property>
                        <signature>log4net.Core.ITriggeringEventEvaluator()</signature>
                        <name>Evaluator</name>
                    </property>
                    <property>
                        <signature>log4net.Core.FixFlags()</signature>
                        <name>Fix</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>Lossy</name>
                    </property>
                    <property>
                        <signature>log4net.Core.ITriggeringEventEvaluator()</signature>
                        <name>LossyEvaluator</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>OnlyFixPartialEventData</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>log4net.Appender.BufferingForwardingAppender</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(log4net.Appender.IAppender)</signature>
                        <name>AddAppender</name>
                    </method>
                    <method>
                        <signature>log4net.Appender.AppenderCollection()</signature>
                        <name>get_Appenders</name>
                    </method>
                    <method>
                        <signature>log4net.Appender.IAppender(string)</signature>
                        <name>GetAppender</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>OnClose</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>RemoveAllAppenders</name>
                    </method>
                    <method>
                        <signature>log4net.Appender.IAppender(log4net.Appender.IAppender)</signature>
                        <name>RemoveAppender</name>
                    </method>
                    <method>
                        <signature>log4net.Appender.IAppender(string)</signature>
                        <name>RemoveAppender</name>
                    </method>
                    <method>
                        <signature>void(log4net.Core.LoggingEvent[])</signature>
                        <name>SendBuffer</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>log4net.Util.AppenderAttachedImpl</signature>
                        <name>m_appenderAttachedImpl</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>log4net.Appender.AppenderCollection()</signature>
                        <name>Appenders</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>log4net.Appender.ColoredConsoleAppender</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(log4net.Layout.ILayout)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(log4net.Layout.ILayout, bool)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ActivateOptions</name>
                    </method>
                    <method>
                        <signature>void(log4net.Appender.ColoredConsoleAppender/LevelColors)</signature>
                        <name>AddMapping</name>
                    </method>
                    <method>
                        <signature>void(log4net.Core.LoggingEvent)</signature>
                        <name>Append</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_RequiresLayout</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Target</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>GetConsoleOutputCP</name>
                    </method>
                    <method>
                        <signature>bool(native int, log4net.Appender.ColoredConsoleAppender/CONSOLE_SCREEN_BUFFER_INFO&amp;)</signature>
                        <name>GetConsoleScreenBufferInfo</name>
                    </method>
                    <method>
                        <signature>native int(unsigned int32)</signature>
                        <name>GetStdHandle</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Target</name>
                    </method>
                    <method>
                        <signature>bool(native int, unsigned int16)</signature>
                        <name>SetConsoleTextAttribute</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>ConsoleError</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>ConsoleOut</name>
                    </field>
                    <field>
                        <signature>System.IO.StreamWriter</signature>
                        <name>m_consoleOutputWriter</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>log4net.Util.LevelMapping</signature>
                        <name>m_levelMapping</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>m_writeToErrorStream</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>char[]</signature>
                        <name>s_windowsNewline</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>unsigned int32</signature>
                        <name>STD_ERROR_HANDLE</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>unsigned int32</signature>
                        <name>STD_OUTPUT_HANDLE</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>bool()</signature>
                        <name>RequiresLayout</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>Target</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>log4net.Appender.ColoredConsoleAppender/Colors</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>log4net.Appender.ColoredConsoleAppender/Colors</signature>
                        <name>Blue</name>
                    </field>
                    <field>
                        <signature>log4net.Appender.ColoredConsoleAppender/Colors</signature>
                        <name>Cyan</name>
                    </field>
                    <field>
                        <signature>log4net.Appender.ColoredConsoleAppender/Colors</signature>
                        <name>Green</name>
                    </field>
                    <field>
                        <signature>log4net.Appender.ColoredConsoleAppender/Colors</signature>
                        <name>HighIntensity</name>
                    </field>
                    <field>
                        <signature>log4net.Appender.ColoredConsoleAppender/Colors</signature>
                        <name>Purple</name>
                    </field>
                    <field>
                        <signature>log4net.Appender.ColoredConsoleAppender/Colors</signature>
                        <name>Red</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                    <field>
                        <signature>log4net.Appender.ColoredConsoleAppender/Colors</signature>
                        <name>White</name>
                    </field>
                    <field>
                        <signature>log4net.Appender.ColoredConsoleAppender/Colors</signature>
                        <name>Yellow</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>log4net.Appender.ColoredConsoleAppender/CONSOLE_SCREEN_BUFFER_INFO</name>
                <newname>log4net.Appender.ColoredConsoleAppender/a</newname>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>log4net.Appender.ColoredConsoleAppender/COORD</signature>
                        <name>dwCursorPosition</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>log4net.Appender.ColoredConsoleAppender/COORD</signature>
                        <name>dwMaximumWindowSize</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>log4net.Appender.ColoredConsoleAppender/COORD</signature>
                        <name>dwSize</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>log4net.Appender.ColoredConsoleAppender/SMALL_RECT</signature>
                        <name>srWindow</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>unsigned int16</signature>
                        <name>wAttributes</name>
                        <newname>c</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>log4net.Appender.ColoredConsoleAppender/COORD</name>
                <newname>log4net.Appender.ColoredConsoleAppender/b</newname>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>unsigned int16</signature>
                        <name>x</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>unsigned int16</signature>
                        <name>y</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>log4net.Appender.ColoredConsoleAppender/LevelColors</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ActivateOptions</name>
                    </method>
                    <method>
                        <signature>log4net.Appender.ColoredConsoleAppender/Colors()</signature>
                        <name>get_BackColor</name>
                    </method>
                    <method>
                        <signature>unsigned int16()</signature>
                        <name>get_CombinedColor</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>log4net.Appender.ColoredConsoleAppender/Colors()</signature>
                        <name>get_ForeColor</name>
                    </method>
                    <method>
                        <signature>void(log4net.Appender.ColoredConsoleAppender/Colors)</signature>
                        <name>set_BackColor</name>
                    </method>
                    <method>
                        <signature>void(log4net.Appender.ColoredConsoleAppender/Colors)</signature>
                        <name>set_ForeColor</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>log4net.Appender.ColoredConsoleAppender/Colors</signature>
                        <name>m_backColor</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>unsigned int16</signature>
                        <name>m_combinedColor</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>log4net.Appender.ColoredConsoleAppender/Colors</signature>
                        <name>m_foreColor</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>log4net.Appender.ColoredConsoleAppender/Colors()</signature>
                        <name>BackColor</name>
                    </property>
                    <property>
                        <signature>unsigned int16()</signature>
                        <name>CombinedColor</name>
                    </property>
                    <property>
                        <signature>log4net.Appender.ColoredConsoleAppender/Colors()</signature>
                        <name>ForeColor</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>log4net.Appender.ColoredConsoleAppender/SMALL_RECT</name>
                <newname>log4net.Appender.ColoredConsoleAppender/c</newname>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>unsigned int16</signature>
                        <name>Bottom</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>unsigned int16</signature>
                        <name>Left</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>unsigned int16</signature>
                        <name>Right</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>unsigned int16</signature>
                        <name>Top</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>log4net.Appender.ConsoleAppender</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(log4net.Layout.ILayout)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(log4net.Layout.ILayout, bool)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(log4net.Core.LoggingEvent)</signature>
                        <name>Append</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_RequiresLayout</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Target</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Target</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>ConsoleError</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>ConsoleOut</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>m_writeToErrorStream</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>bool()</signature>
                        <name>RequiresLayout</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>Target</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>log4net.Appender.DebugAppender</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(log4net.Layout.ILayout)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(log4net.Core.LoggingEvent)</signature>
                        <name>Append</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_ImmediateFlush</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_RequiresLayout</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_ImmediateFlush</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>bool</signature>
                        <name>m_immediateFlush</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>bool()</signature>
                        <name>ImmediateFlush</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>RequiresLayout</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>log4net.Appender.EventLogAppender</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(log4net.Layout.ILayout)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ActivateOptions</name>
                    </method>
                    <method>
                        <signature>void(log4net.Appender.EventLogAppender/Level2EventLogEntryType)</signature>
                        <name>AddMapping</name>
                    </method>
                    <method>
                        <signature>void(log4net.Core.LoggingEvent)</signature>
                        <name>Append</name>
                    </method>
                    <method>
                        <signature>void(string, string, string)</signature>
                        <name>CreateEventSource</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_ApplicationName</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_LogName</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_MachineName</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_RequiresLayout</name>
                    </method>
                    <method>
                        <signature>log4net.Core.SecurityContext()</signature>
                        <name>get_SecurityContext</name>
                    </method>
                    <method>
                        <signature>System.Diagnostics.EventLogEntryType(log4net.Core.Level)</signature>
                        <name>GetEntryType</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_ApplicationName</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_LogName</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_MachineName</name>
                    </method>
                    <method>
                        <signature>void(log4net.Core.SecurityContext)</signature>
                        <name>set_SecurityContext</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>m_applicationName</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>log4net.Util.LevelMapping</signature>
                        <name>m_levelMapping</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>m_logName</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>m_machineName</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>log4net.Core.SecurityContext</signature>
                        <name>m_securityContext</name>
                        <newname>e</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>string()</signature>
                        <name>ApplicationName</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>LogName</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>MachineName</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>RequiresLayout</name>
                    </property>
                    <property>
                        <signature>log4net.Core.SecurityContext()</signature>
                        <name>SecurityContext</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>log4net.Appender.EventLogAppender/Level2EventLogEntryType</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Diagnostics.EventLogEntryType()</signature>
                        <name>get_EventLogEntryType</name>
                    </method>
                    <method>
                        <signature>void(System.Diagnostics.EventLogEntryType)</signature>
                        <name>set_EventLogEntryType</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Diagnostics.EventLogEntryType</signature>
                        <name>m_entryType</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>System.Diagnostics.EventLogEntryType()</signature>
                        <name>EventLogEntryType</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>log4net.Appender.FileAppender</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(log4net.Layout.ILayout, string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(log4net.Layout.ILayout, string, bool)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ActivateOptions</name>
                    </method>
                    <method>
                        <signature>void(log4net.Core.LoggingEvent)</signature>
                        <name>Append</name>
                    </method>
                    <method>
                        <signature>void(log4net.Core.LoggingEvent[])</signature>
                        <name>Append</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>CloseFile</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>CloseWriter</name>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>ConvertToFullPath</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_AppendToFile</name>
                    </method>
                    <method>
                        <signature>System.Text.Encoding()</signature>
                        <name>get_Encoding</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_File</name>
                    </method>
                    <method>
                        <signature>log4net.Appender.FileAppender/LockingModelBase()</signature>
                        <name>get_LockingModel</name>
                    </method>
                    <method>
                        <signature>log4net.Core.SecurityContext()</signature>
                        <name>get_SecurityContext</name>
                    </method>
                    <method>
                        <signature>void(string, bool)</signature>
                        <name>OpenFile</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>PrepareWriter</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Reset</name>
                    </method>
                    <method>
                        <signature>void(string, bool)</signature>
                        <name>SafeOpenFile</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_AppendToFile</name>
                    </method>
                    <method>
                        <signature>void(System.Text.Encoding)</signature>
                        <name>set_Encoding</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_File</name>
                    </method>
                    <method>
                        <signature>void(log4net.Appender.FileAppender/LockingModelBase)</signature>
                        <name>set_LockingModel</name>
                    </method>
                    <method>
                        <signature>void(log4net.Core.SecurityContext)</signature>
                        <name>set_SecurityContext</name>
                    </method>
                    <method>
                        <signature>void(System.IO.Stream)</signature>
                        <name>SetQWForFiles</name>
                    </method>
                    <method>
                        <signature>void(System.IO.TextWriter)</signature>
                        <name>SetQWForFiles</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>WriteFooter</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>WriteHeader</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>bool</signature>
                        <name>m_appendToFile</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Text.Encoding</signature>
                        <name>m_encoding</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>m_fileName</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>log4net.Appender.FileAppender/LockingModelBase</signature>
                        <name>m_lockingModel</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>log4net.Core.SecurityContext</signature>
                        <name>m_securityContext</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>log4net.Appender.FileAppender/LockingStream</signature>
                        <name>m_stream</name>
                        <newname>e</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>bool()</signature>
                        <name>AppendToFile</name>
                    </property>
                    <property>
                        <signature>System.Text.Encoding()</signature>
                        <name>Encoding</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>File</name>
                    </property>
                    <property>
                        <signature>log4net.Appender.FileAppender/LockingModelBase()</signature>
                        <name>LockingModel</name>
                    </property>
                    <property>
                        <signature>log4net.Core.SecurityContext()</signature>
                        <name>SecurityContext</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>log4net.Appender.FileAppender/ExclusiveLock</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.IO.Stream()</signature>
                        <name>AcquireLock</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>CloseFile</name>
                    </method>
                    <method>
                        <signature>void(string, bool, System.Text.Encoding)</signature>
                        <name>OpenFile</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ReleaseLock</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.IO.Stream</signature>
                        <name>m_stream</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>log4net.Appender.FileAppender/LockingModelBase</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.IO.Stream()</signature>
                        <name>AcquireLock</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>CloseFile</name>
                    </method>
                    <method>
                        <signature>log4net.Appender.FileAppender()</signature>
                        <name>get_CurrentAppender</name>
                    </method>
                    <method>
                        <signature>void(string, bool, System.Text.Encoding)</signature>
                        <name>OpenFile</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ReleaseLock</name>
                    </method>
                    <method>
                        <signature>void(log4net.Appender.FileAppender)</signature>
                        <name>set_CurrentAppender</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>log4net.Appender.FileAppender</signature>
                        <name>m_appender</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>log4net.Appender.FileAppender()</signature>
                        <name>CurrentAppender</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>log4net.Appender.FileAppender/LockingStream</name>
                <newname>log4net.Appender.FileAppender/a</newname>
                <methodlist>
                    <method>
                        <signature>void(log4net.Appender.FileAppender/LockingModelBase)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>AcquireLock</name>
                        <newname>i</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>AssertLocked</name>
                        <newname>f</newname>
                    </method>
                    <method>
                        <signature>System.IAsyncResult(unsigned int8[], int32, int32, System.AsyncCallback, object)</signature>
                        <name>BeginRead</name>
                    </method>
                    <method>
                        <signature>System.IAsyncResult(unsigned int8[], int32, int32, System.AsyncCallback, object)</signature>
                        <name>BeginWrite</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Close</name>
                    </method>
                    <method>
                        <signature>int32(System.IAsyncResult)</signature>
                        <name>EndRead</name>
                    </method>
                    <method>
                        <signature>void(System.IAsyncResult)</signature>
                        <name>EndWrite</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Flush</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_CanRead</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_CanSeek</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_CanWrite</name>
                    </method>
                    <method>
                        <signature>int64()</signature>
                        <name>get_Length</name>
                    </method>
                    <method>
                        <signature>int64()</signature>
                        <name>get_Position</name>
                    </method>
                    <method>
                        <signature>int32(unsigned int8[], int32, int32)</signature>
                        <name>Read</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>ReadByte</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ReleaseLock</name>
                        <newname>h</newname>
                    </method>
                    <method>
                        <signature>int64(int64, System.IO.SeekOrigin)</signature>
                        <name>Seek</name>
                    </method>
                    <method>
                        <signature>void(int64)</signature>
                        <name>set_Position</name>
                    </method>
                    <method>
                        <signature>void(int64)</signature>
                        <name>SetLength</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.IDisposable.Dispose</name>
                        <newname>g</newname>
                    </method>
                    <method>
                        <signature>void(unsigned int8[], int32, int32)</signature>
                        <name>Write</name>
                    </method>
                    <method>
                        <signature>void(unsigned int8)</signature>
                        <name>WriteByte</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>log4net.Appender.FileAppender/LockingModelBase</signature>
                        <name>m_lockingModel</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>m_lockLevel</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>m_readTotal</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>System.IO.Stream</signature>
                        <name>m_realStream</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>log4net.Appender.FileAppender/LockingStream/LockStateException</name>
                <newname>log4net.Appender.FileAppender/a/a</newname>
                <methodlist>
                    <method>
                        <signature>void(string)</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>log4net.Appender.FileAppender/MinimalLock</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.IO.Stream()</signature>
                        <name>AcquireLock</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>CloseFile</name>
                    </method>
                    <method>
                        <signature>void(string, bool, System.Text.Encoding)</signature>
                        <name>OpenFile</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ReleaseLock</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>bool</signature>
                        <name>m_append</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>m_filename</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.IO.Stream</signature>
                        <name>m_stream</name>
                        <newname>c</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>log4net.Appender.ForwardingAppender</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(log4net.Appender.IAppender)</signature>
                        <name>AddAppender</name>
                    </method>
                    <method>
                        <signature>void(log4net.Core.LoggingEvent)</signature>
                        <name>Append</name>
                    </method>
                    <method>
                        <signature>void(log4net.Core.LoggingEvent[])</signature>
                        <name>Append</name>
                    </method>
                    <method>
                        <signature>log4net.Appender.AppenderCollection()</signature>
                        <name>get_Appenders</name>
                    </method>
                    <method>
                        <signature>log4net.Appender.IAppender(string)</signature>
                        <name>GetAppender</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>OnClose</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>RemoveAllAppenders</name>
                    </method>
                    <method>
                        <signature>log4net.Appender.IAppender(log4net.Appender.IAppender)</signature>
                        <name>RemoveAppender</name>
                    </method>
                    <method>
                        <signature>log4net.Appender.IAppender(string)</signature>
                        <name>RemoveAppender</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>log4net.Util.AppenderAttachedImpl</signature>
                        <name>m_appenderAttachedImpl</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>log4net.Appender.AppenderCollection()</signature>
                        <name>Appenders</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>log4net.Appender.IAppender</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>Close</name>
                    </method>
                    <method>
                        <signature>void(log4net.Core.LoggingEvent)</signature>
                        <name>DoAppend</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Name</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Name</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist>
                    <property>
                        <signature>string()</signature>
                        <name>Name</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>log4net.Appender.IBulkAppender</name>
                <methodlist>
                    <method>
                        <signature>void(log4net.Core.LoggingEvent[])</signature>
                        <name>DoAppend</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>log4net.Appender.LocalSyslogAppender</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ActivateOptions</name>
                    </method>
                    <method>
                        <signature>void(log4net.Appender.LocalSyslogAppender/LevelSeverity)</signature>
                        <name>AddMapping</name>
                    </method>
                    <method>
                        <signature>void(log4net.Core.LoggingEvent)</signature>
                        <name>Append</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>closelog</name>
                    </method>
                    <method>
                        <signature>int32(log4net.Appender.LocalSyslogAppender/SyslogFacility, log4net.Appender.LocalSyslogAppender/SyslogSeverity)</signature>
                        <name>GeneratePriority</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>log4net.Appender.LocalSyslogAppender/SyslogFacility()</signature>
                        <name>get_Facility</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Identity</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_RequiresLayout</name>
                    </method>
                    <method>
                        <signature>log4net.Appender.LocalSyslogAppender/SyslogSeverity(log4net.Core.Level)</signature>
                        <name>GetSeverity</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>OnClose</name>
                    </method>
                    <method>
                        <signature>void(native int, int32, log4net.Appender.LocalSyslogAppender/SyslogFacility)</signature>
                        <name>openlog</name>
                    </method>
                    <method>
                        <signature>void(log4net.Appender.LocalSyslogAppender/SyslogFacility)</signature>
                        <name>set_Facility</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Identity</name>
                    </method>
                    <method>
                        <signature>void(int32, string, string)</signature>
                        <name>syslog</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>log4net.Appender.LocalSyslogAppender/SyslogFacility</signature>
                        <name>m_facility</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>native int</signature>
                        <name>m_handleToIdentity</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>m_identity</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>log4net.Util.LevelMapping</signature>
                        <name>m_levelMapping</name>
                        <newname>d</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>log4net.Appender.LocalSyslogAppender/SyslogFacility()</signature>
                        <name>Facility</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>Identity</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>RequiresLayout</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>log4net.Appender.LocalSyslogAppender/LevelSeverity</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>log4net.Appender.LocalSyslogAppender/SyslogSeverity()</signature>
                        <name>get_Severity</name>
                    </method>
                    <method>
                        <signature>void(log4net.Appender.LocalSyslogAppender/SyslogSeverity)</signature>
                        <name>set_Severity</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>log4net.Appender.LocalSyslogAppender/SyslogSeverity</signature>
                        <name>m_severity</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>log4net.Appender.LocalSyslogAppender/SyslogSeverity()</signature>
                        <name>Severity</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>log4net.Appender.LocalSyslogAppender/SyslogFacility</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>log4net.Appender.LocalSyslogAppender/SyslogFacility</signature>
                        <name>Alert</name>
                    </field>
                    <field>
                        <signature>log4net.Appender.LocalSyslogAppender/SyslogFacility</signature>
                        <name>Audit</name>
                    </field>
                    <field>
                        <signature>log4net.Appender.LocalSyslogAppender/SyslogFacility</signature>
                        <name>Authorization</name>
                    </field>
                    <field>
                        <signature>log4net.Appender.LocalSyslogAppender/SyslogFacility</signature>
                        <name>Authorization2</name>
                    </field>
                    <field>
                        <signature>log4net.Appender.LocalSyslogAppender/SyslogFacility</signature>
                        <name>Clock</name>
                    </field>
                    <field>
                        <signature>log4net.Appender.LocalSyslogAppender/SyslogFacility</signature>
                        <name>Clock2</name>
                    </field>
                    <field>
                        <signature>log4net.Appender.LocalSyslogAppender/SyslogFacility</signature>
                        <name>Daemons</name>
                    </field>
                    <field>
                        <signature>log4net.Appender.LocalSyslogAppender/SyslogFacility</signature>
                        <name>Ftp</name>
                    </field>
                    <field>
                        <signature>log4net.Appender.LocalSyslogAppender/SyslogFacility</signature>
                        <name>Kernel</name>
                    </field>
                    <field>
                        <signature>log4net.Appender.LocalSyslogAppender/SyslogFacility</signature>
                        <name>Local0</name>
                    </field>
                    <field>
                        <signature>log4net.Appender.LocalSyslogAppender/SyslogFacility</signature>
                        <name>Local1</name>
                    </field>
                    <field>
                        <signature>log4net.Appender.LocalSyslogAppender/SyslogFacility</signature>
                        <name>Local2</name>
                    </field>
                    <field>
                        <signature>log4net.Appender.LocalSyslogAppender/SyslogFacility</signature>
                        <name>Local3</name>
                    </field>
                    <field>
                        <signature>log4net.Appender.LocalSyslogAppender/SyslogFacility</signature>
                        <name>Local4</name>
                    </field>
                    <field>
                        <signature>log4net.Appender.LocalSyslogAppender/SyslogFacility</signature>
                        <name>Local5</name>
                    </field>
                    <field>
                        <signature>log4net.Appender.LocalSyslogAppender/SyslogFacility</signature>
                        <name>Local6</name>
                    </field>
                    <field>
                        <signature>log4net.Appender.LocalSyslogAppender/SyslogFacility</signature>
                        <name>Local7</name>
                    </field>
                    <field>
                        <signature>log4net.Appender.LocalSyslogAppender/SyslogFacility</signature>
                        <name>Mail</name>
                    </field>
                    <field>
                        <signature>log4net.Appender.LocalSyslogAppender/SyslogFacility</signature>
                        <name>News</name>
                    </field>
                    <field>
                        <signature>log4net.Appender.LocalSyslogAppender/SyslogFacility</signature>
                        <name>Ntp</name>
                    </field>
                    <field>
                        <signature>log4net.Appender.LocalSyslogAppender/SyslogFacility</signature>
                        <name>Printer</name>
                    </field>
                    <field>
                        <signature>log4net.Appender.LocalSyslogAppender/SyslogFacility</signature>
                        <name>Syslog</name>
                    </field>
                    <field>
                        <signature>log4net.Appender.LocalSyslogAppender/SyslogFacility</signature>
                        <name>User</name>
                    </field>
                    <field>
                        <signature>log4net.Appender.LocalSyslogAppender/SyslogFacility</signature>
                        <name>Uucp</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>log4net.Appender.LocalSyslogAppender/SyslogSeverity</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>log4net.Appender.LocalSyslogAppender/SyslogSeverity</signature>
                        <name>Alert</name>
                    </field>
                    <field>
                        <signature>log4net.Appender.LocalSyslogAppender/SyslogSeverity</signature>
                        <name>Critical</name>
                    </field>
                    <field>
                        <signature>log4net.Appender.LocalSyslogAppender/SyslogSeverity</signature>
                        <name>Debug</name>
                    </field>
                    <field>
                        <signature>log4net.Appender.LocalSyslogAppender/SyslogSeverity</signature>
                        <name>Emergency</name>
                    </field>
                    <field>
                        <signature>log4net.Appender.LocalSyslogAppender/SyslogSeverity</signature>
                        <name>Error</name>
                    </field>
                    <field>
                        <signature>log4net.Appender.LocalSyslogAppender/SyslogSeverity</signature>
                        <name>Informational</name>
                    </field>
                    <field>
                        <signature>log4net.Appender.LocalSyslogAppender/SyslogSeverity</signature>
                        <name>Notice</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                    <field>
                        <signature>log4net.Appender.LocalSyslogAppender/SyslogSeverity</signature>
                        <name>Warning</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>log4net.Appender.MemoryAppender</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(log4net.Core.LoggingEvent)</signature>
                        <name>Append</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Clear</name>
                    </method>
                    <method>
                        <signature>log4net.Core.FixFlags()</signature>
                        <name>get_Fix</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_OnlyFixPartialEventData</name>
                    </method>
                    <method>
                        <signature>log4net.Core.LoggingEvent[]()</signature>
                        <name>GetEvents</name>
                    </method>
                    <method>
                        <signature>void(log4net.Core.FixFlags)</signature>
                        <name>set_Fix</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_OnlyFixPartialEventData</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.ArrayList</signature>
                        <name>m_eventsList</name>
                    </field>
                    <field>
                        <signature>log4net.Core.FixFlags</signature>
                        <name>m_fixFlags</name>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>log4net.Core.FixFlags()</signature>
                        <name>Fix</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>OnlyFixPartialEventData</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>log4net.Appender.NetSendAppender</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ActivateOptions</name>
                    </method>
                    <method>
                        <signature>void(log4net.Core.LoggingEvent)</signature>
                        <name>Append</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Recipient</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_RequiresLayout</name>
                    </method>
                    <method>
                        <signature>log4net.Core.SecurityContext()</signature>
                        <name>get_SecurityContext</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Sender</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Server</name>
                    </method>
                    <method>
                        <signature>int32(string, string, string, string, int32)</signature>
                        <name>NetMessageBufferSend</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Recipient</name>
                    </method>
                    <method>
                        <signature>void(log4net.Core.SecurityContext)</signature>
                        <name>set_SecurityContext</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Sender</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Server</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>m_recipient</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>log4net.Core.SecurityContext</signature>
                        <name>m_securityContext</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>m_sender</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>m_server</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>string()</signature>
                        <name>Recipient</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>RequiresLayout</name>
                    </property>
                    <property>
                        <signature>log4net.Core.SecurityContext()</signature>
                        <name>SecurityContext</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>Sender</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>Server</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>log4net.Appender.OutputDebugStringAppender</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(log4net.Core.LoggingEvent)</signature>
                        <name>Append</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_RequiresLayout</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>OutputDebugString</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist>
                    <property>
                        <signature>bool()</signature>
                        <name>RequiresLayout</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>log4net.Appender.RemoteSyslogAppender</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ActivateOptions</name>
                    </method>
                    <method>
                        <signature>void(log4net.Appender.RemoteSyslogAppender/LevelSeverity)</signature>
                        <name>AddMapping</name>
                    </method>
                    <method>
                        <signature>void(log4net.Core.LoggingEvent)</signature>
                        <name>Append</name>
                    </method>
                    <method>
                        <signature>int32(log4net.Appender.RemoteSyslogAppender/SyslogFacility, log4net.Appender.RemoteSyslogAppender/SyslogSeverity)</signature>
                        <name>GeneratePriority</name>
                    </method>
                    <method>
                        <signature>log4net.Appender.RemoteSyslogAppender/SyslogFacility()</signature>
                        <name>get_Facility</name>
                    </method>
                    <method>
                        <signature>log4net.Layout.PatternLayout()</signature>
                        <name>get_Identity</name>
                    </method>
                    <method>
                        <signature>log4net.Appender.RemoteSyslogAppender/SyslogSeverity(log4net.Core.Level)</signature>
                        <name>GetSeverity</name>
                    </method>
                    <method>
                        <signature>void(log4net.Appender.RemoteSyslogAppender/SyslogFacility)</signature>
                        <name>set_Facility</name>
                    </method>
                    <method>
                        <signature>void(log4net.Layout.PatternLayout)</signature>
                        <name>set_Identity</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>DefaultSyslogPort</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>log4net.Appender.RemoteSyslogAppender/SyslogFacility</signature>
                        <name>m_facility</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>log4net.Layout.PatternLayout</signature>
                        <name>m_identity</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>log4net.Util.LevelMapping</signature>
                        <name>m_levelMapping</name>
                        <newname>d</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>log4net.Appender.RemoteSyslogAppender/SyslogFacility()</signature>
                        <name>Facility</name>
                    </property>
                    <property>
                        <signature>log4net.Layout.PatternLayout()</signature>
                        <name>Identity</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>log4net.Appender.RemoteSyslogAppender/LevelSeverity</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>log4net.Appender.RemoteSyslogAppender/SyslogSeverity()</signature>
                        <name>get_Severity</name>
                    </method>
                    <method>
                        <signature>void(log4net.Appender.RemoteSyslogAppender/SyslogSeverity)</signature>
                        <name>set_Severity</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>log4net.Appender.RemoteSyslogAppender/SyslogSeverity</signature>
                        <name>m_severity</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>log4net.Appender.RemoteSyslogAppender/SyslogSeverity()</signature>
                        <name>Severity</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>log4net.Appender.RemoteSyslogAppender/SyslogFacility</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>log4net.Appender.RemoteSyslogAppender/SyslogFacility</signature>
                        <name>Alert</name>
                    </field>
                    <field>
                        <signature>log4net.Appender.RemoteSyslogAppender/SyslogFacility</signature>
                        <name>Audit</name>
                    </field>
                    <field>
                        <signature>log4net.Appender.RemoteSyslogAppender/SyslogFacility</signature>
                        <name>Authorization</name>
                    </field>
                    <field>
                        <signature>log4net.Appender.RemoteSyslogAppender/SyslogFacility</signature>
                        <name>Authorization2</name>
                    </field>
                    <field>
                        <signature>log4net.Appender.RemoteSyslogAppender/SyslogFacility</signature>
                        <name>Clock</name>
                    </field>
                    <field>
                        <signature>log4net.Appender.RemoteSyslogAppender/SyslogFacility</signature>
                        <name>Clock2</name>
                    </field>
                    <field>
                        <signature>log4net.Appender.RemoteSyslogAppender/SyslogFacility</signature>
                        <name>Daemons</name>
                    </field>
                    <field>
                        <signature>log4net.Appender.RemoteSyslogAppender/SyslogFacility</signature>
                        <name>Ftp</name>
                    </field>
                    <field>
                        <signature>log4net.Appender.RemoteSyslogAppender/SyslogFacility</signature>
                        <name>Kernel</name>
                    </field>
                    <field>
                        <signature>log4net.Appender.RemoteSyslogAppender/SyslogFacility</signature>
                        <name>Local0</name>
                    </field>
                    <field>
                        <signature>log4net.Appender.RemoteSyslogAppender/SyslogFacility</signature>
                        <name>Local1</name>
                    </field>
                    <field>
                        <signature>log4net.Appender.RemoteSyslogAppender/SyslogFacility</signature>
                        <name>Local2</name>
                    </field>
                    <field>
                        <signature>log4net.Appender.RemoteSyslogAppender/SyslogFacility</signature>
                        <name>Local3</name>
                    </field>
                    <field>
                        <signature>log4net.Appender.RemoteSyslogAppender/SyslogFacility</signature>
                        <name>Local4</name>
                    </field>
                    <field>
                        <signature>log4net.Appender.RemoteSyslogAppender/SyslogFacility</signature>
                        <name>Local5</name>
                    </field>
                    <field>
                        <signature>log4net.Appender.RemoteSyslogAppender/SyslogFacility</signature>
                        <name>Local6</name>
                    </field>
                    <field>
                        <signature>log4net.Appender.RemoteSyslogAppender/SyslogFacility</signature>
                        <name>Local7</name>
                    </field>
                    <field>
                        <signature>log4net.Appender.RemoteSyslogAppender/SyslogFacility</signature>
                        <name>Mail</name>
                    </field>
                    <field>
                        <signature>log4net.Appender.RemoteSyslogAppender/SyslogFacility</signature>
                        <name>News</name>
                    </field>
                    <field>
                        <signature>log4net.Appender.RemoteSyslogAppender/SyslogFacility</signature>
                        <name>Ntp</name>
                    </field>
                    <field>
                        <signature>log4net.Appender.RemoteSyslogAppender/SyslogFacility</signature>
                        <name>Printer</name>
                    </field>
                    <field>
                        <signature>log4net.Appender.RemoteSyslogAppender/SyslogFacility</signature>
                        <name>Syslog</name>
                    </field>
                    <field>
                        <signature>log4net.Appender.RemoteSyslogAppender/SyslogFacility</signature>
                        <name>User</name>
                    </field>
                    <field>
                        <signature>log4net.Appender.RemoteSyslogAppender/SyslogFacility</signature>
                        <name>Uucp</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>log4net.Appender.RemoteSyslogAppender/SyslogSeverity</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>log4net.Appender.RemoteSyslogAppender/SyslogSeverity</signature>
                        <name>Alert</name>
                    </field>
                    <field>
                        <signature>log4net.Appender.RemoteSyslogAppender/SyslogSeverity</signature>
                        <name>Critical</name>
                    </field>
                    <field>
                        <signature>log4net.Appender.RemoteSyslogAppender/SyslogSeverity</signature>
                        <name>Debug</name>
                    </field>
                    <field>
                        <signature>log4net.Appender.RemoteSyslogAppender/SyslogSeverity</signature>
                        <name>Emergency</name>
                    </field>
                    <field>
                        <signature>log4net.Appender.RemoteSyslogAppender/SyslogSeverity</signature>
                        <name>Error</name>
                    </field>
                    <field>
                        <signature>log4net.Appender.RemoteSyslogAppender/SyslogSeverity</signature>
                        <name>Informational</name>
                    </field>
                    <field>
                        <signature>log4net.Appender.RemoteSyslogAppender/SyslogSeverity</signature>
                        <name>Notice</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                    <field>
                        <signature>log4net.Appender.RemoteSyslogAppender/SyslogSeverity</signature>
                        <name>Warning</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>log4net.Appender.RemotingAppender</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ActivateOptions</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>BeginAsyncSend</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>EndAsyncSend</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Sink</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>OnClose</name>
                    </method>
                    <method>
                        <signature>void(log4net.Core.LoggingEvent[])</signature>
                        <name>SendBuffer</name>
                    </method>
                    <method>
                        <signature>void(object)</signature>
                        <name>SendBufferCallback</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Sink</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>m_queuedCallbackCount</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>log4net.Appender.RemotingAppender/IRemoteLoggingSink</signature>
                        <name>m_sinkObj</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>m_sinkUrl</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Threading.ManualResetEvent</signature>
                        <name>m_workQueueEmptyEvent</name>
                        <newname>d</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>string()</signature>
                        <name>Sink</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>log4net.Appender.RemotingAppender/IRemoteLoggingSink</name>
                <methodlist>
                    <method>
                        <signature>void(log4net.Core.LoggingEvent[])</signature>
                        <name>LogEvents</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>log4net.Appender.RollingFileAppender</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ActivateOptions</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>AdjustFileBeforeAppend</name>
                    </method>
                    <method>
                        <signature>void(log4net.Core.LoggingEvent)</signature>
                        <name>Append</name>
                    </method>
                    <method>
                        <signature>void(log4net.Core.LoggingEvent[])</signature>
                        <name>Append</name>
                    </method>
                    <method>
                        <signature>log4net.Appender.RollingFileAppender/RollPoint(string)</signature>
                        <name>ComputeCheckPeriod</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>DeleteFile</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>DetermineCurSizeRollBackups</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ExistingInit</name>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>FileExists</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_CountDirection</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_DatePattern</name>
                    </method>
                    <method>
                        <signature>int64()</signature>
                        <name>get_MaxFileSize</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_MaximumFileSize</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_MaxSizeRollBackups</name>
                    </method>
                    <method>
                        <signature>log4net.Appender.RollingFileAppender/RollingMode()</signature>
                        <name>get_RollingStyle</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_StaticLogFileName</name>
                    </method>
                    <method>
                        <signature>System.Collections.ArrayList(string)</signature>
                        <name>GetExistingFiles</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>GetNextOutputFileName</name>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>GetWildcardPatternForFile</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>void(string, string)</signature>
                        <name>InitializeFromOneFile</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(string, System.Collections.ArrayList)</signature>
                        <name>InitializeRollBackups</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.DateTime(System.DateTime, log4net.Appender.RollingFileAppender/RollPoint)</signature>
                        <name>NextCheckDate</name>
                    </method>
                    <method>
                        <signature>void(string, bool)</signature>
                        <name>OpenFile</name>
                    </method>
                    <method>
                        <signature>void(string, string)</signature>
                        <name>RollFile</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>RollOverIfDateBoundaryCrossing</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>RollOverRenameFiles</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>RollOverSize</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>RollOverTime</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_CountDirection</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_DatePattern</name>
                    </method>
                    <method>
                        <signature>void(int64)</signature>
                        <name>set_MaxFileSize</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_MaximumFileSize</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_MaxSizeRollBackups</name>
                    </method>
                    <method>
                        <signature>void(log4net.Appender.RollingFileAppender/RollingMode)</signature>
                        <name>set_RollingStyle</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_StaticLogFileName</name>
                    </method>
                    <method>
                        <signature>void(System.IO.TextWriter)</signature>
                        <name>SetQWForFiles</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>m_baseFileName</name>
                        <newname>o</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>m_countDirection</name>
                        <newname>j</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>m_curSizeRollBackups</name>
                        <newname>i</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>m_datePattern</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>log4net.Appender.RollingFileAppender/IDateTime</signature>
                        <name>m_dateTime</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>int64</signature>
                        <name>m_maxFileSize</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>m_maxSizeRollBackups</name>
                        <newname>h</newname>
                    </field>
                    <field>
                        <signature>System.DateTime</signature>
                        <name>m_nextCheck</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>System.DateTime</signature>
                        <name>m_now</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>m_rollDate</name>
                        <newname>l</newname>
                    </field>
                    <field>
                        <signature>log4net.Appender.RollingFileAppender/RollingMode</signature>
                        <name>m_rollingStyle</name>
                        <newname>k</newname>
                    </field>
                    <field>
                        <signature>log4net.Appender.RollingFileAppender/RollPoint</signature>
                        <name>m_rollPoint</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>m_rollSize</name>
                        <newname>m</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>m_scheduledFilename</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>m_staticLogFileName</name>
                        <newname>n</newname>
                    </field>
                    <field>
                        <signature>System.DateTime</signature>
                        <name>s_date1970</name>
                        <newname>p</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>int32()</signature>
                        <name>CountDirection</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>DatePattern</name>
                    </property>
                    <property>
                        <signature>int64()</signature>
                        <name>MaxFileSize</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>MaximumFileSize</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>MaxSizeRollBackups</name>
                    </property>
                    <property>
                        <signature>log4net.Appender.RollingFileAppender/RollingMode()</signature>
                        <name>RollingStyle</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>StaticLogFileName</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>log4net.Appender.RollingFileAppender/DefaultDateTime</name>
                <newname>log4net.Appender.RollingFileAppender/a</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.DateTime()</signature>
                        <name>get_Now</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>log4net.Appender.RollingFileAppender/IDateTime</name>
                <methodlist>
                    <method>
                        <signature>System.DateTime()</signature>
                        <name>get_Now</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist>
                    <property>
                        <signature>System.DateTime()</signature>
                        <name>Now</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>log4net.Appender.RollingFileAppender/RollingMode</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>log4net.Appender.RollingFileAppender/RollingMode</signature>
                        <name>Composite</name>
                    </field>
                    <field>
                        <signature>log4net.Appender.RollingFileAppender/RollingMode</signature>
                        <name>Date</name>
                    </field>
                    <field>
                        <signature>log4net.Appender.RollingFileAppender/RollingMode</signature>
                        <name>Once</name>
                    </field>
                    <field>
                        <signature>log4net.Appender.RollingFileAppender/RollingMode</signature>
                        <name>Size</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>log4net.Appender.RollingFileAppender/RollPoint</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>log4net.Appender.RollingFileAppender/RollPoint</signature>
                        <name>HalfDay</name>
                    </field>
                    <field>
                        <signature>log4net.Appender.RollingFileAppender/RollPoint</signature>
                        <name>InvalidRollPoint</name>
                    </field>
                    <field>
                        <signature>log4net.Appender.RollingFileAppender/RollPoint</signature>
                        <name>TopOfDay</name>
                    </field>
                    <field>
                        <signature>log4net.Appender.RollingFileAppender/RollPoint</signature>
                        <name>TopOfHour</name>
                    </field>
                    <field>
                        <signature>log4net.Appender.RollingFileAppender/RollPoint</signature>
                        <name>TopOfMinute</name>
                    </field>
                    <field>
                        <signature>log4net.Appender.RollingFileAppender/RollPoint</signature>
                        <name>TopOfMonth</name>
                    </field>
                    <field>
                        <signature>log4net.Appender.RollingFileAppender/RollPoint</signature>
                        <name>TopOfWeek</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>log4net.Appender.SmtpAppender</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>log4net.Appender.SmtpAppender/SmtpAuthentication()</signature>
                        <name>get_Authentication</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_From</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_LocationInfo</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Password</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Port</name>
                    </method>
                    <method>
                        <signature>System.Net.Mail.MailPriority()</signature>
                        <name>get_Priority</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_RequiresLayout</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_SmtpHost</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Subject</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_To</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Username</name>
                    </method>
                    <method>
                        <signature>void(log4net.Core.LoggingEvent[])</signature>
                        <name>SendBuffer</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>SendEmail</name>
                    </method>
                    <method>
                        <signature>void(log4net.Appender.SmtpAppender/SmtpAuthentication)</signature>
                        <name>set_Authentication</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_From</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_LocationInfo</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Password</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_Port</name>
                    </method>
                    <method>
                        <signature>void(System.Net.Mail.MailPriority)</signature>
                        <name>set_Priority</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_SmtpHost</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Subject</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_To</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Username</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>log4net.Appender.SmtpAppender/SmtpAuthentication</signature>
                        <name>m_authentication</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>m_from</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Net.Mail.MailPriority</signature>
                        <name>m_mailPriority</name>
                        <newname>i</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>m_password</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>m_port</name>
                        <newname>h</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>m_smtpHost</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>m_subject</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>m_to</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>m_username</name>
                        <newname>f</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>log4net.Appender.SmtpAppender/SmtpAuthentication()</signature>
                        <name>Authentication</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>From</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>LocationInfo</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>Password</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>Port</name>
                    </property>
                    <property>
                        <signature>System.Net.Mail.MailPriority()</signature>
                        <name>Priority</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>RequiresLayout</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>SmtpHost</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>Subject</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>To</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>Username</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>log4net.Appender.SmtpAppender/SmtpAuthentication</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>log4net.Appender.SmtpAppender/SmtpAuthentication</signature>
                        <name>Basic</name>
                    </field>
                    <field>
                        <signature>log4net.Appender.SmtpAppender/SmtpAuthentication</signature>
                        <name>None</name>
                    </field>
                    <field>
                        <signature>log4net.Appender.SmtpAppender/SmtpAuthentication</signature>
                        <name>Ntlm</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>log4net.Appender.SmtpPickupDirAppender</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ActivateOptions</name>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>ConvertToFullPath</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_From</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_PickupDir</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_RequiresLayout</name>
                    </method>
                    <method>
                        <signature>log4net.Core.SecurityContext()</signature>
                        <name>get_SecurityContext</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Subject</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_To</name>
                    </method>
                    <method>
                        <signature>void(log4net.Core.LoggingEvent[])</signature>
                        <name>SendBuffer</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_From</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_PickupDir</name>
                    </method>
                    <method>
                        <signature>void(log4net.Core.SecurityContext)</signature>
                        <name>set_SecurityContext</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Subject</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_To</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>m_from</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>m_pickupDir</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>log4net.Core.SecurityContext</signature>
                        <name>m_securityContext</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>m_subject</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>m_to</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>string()</signature>
                        <name>From</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>PickupDir</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>RequiresLayout</name>
                    </property>
                    <property>
                        <signature>log4net.Core.SecurityContext()</signature>
                        <name>SecurityContext</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>Subject</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>To</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>log4net.Appender.TelnetAppender</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ActivateOptions</name>
                    </method>
                    <method>
                        <signature>void(log4net.Core.LoggingEvent)</signature>
                        <name>Append</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Port</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_RequiresLayout</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>OnClose</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_Port</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>log4net.Appender.TelnetAppender/SocketHandler</signature>
                        <name>m_handler</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>m_listeningPort</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>int32()</signature>
                        <name>Port</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>RequiresLayout</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>log4net.Appender.TelnetAppender/SocketHandler</name>
                <methodlist>
                    <method>
                        <signature>void(int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(log4net.Appender.TelnetAppender/SocketHandler/SocketClient)</signature>
                        <name>AddClient</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Dispose</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_HasConnections</name>
                    </method>
                    <method>
                        <signature>void(System.IAsyncResult)</signature>
                        <name>OnConnect</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(log4net.Appender.TelnetAppender/SocketHandler/SocketClient)</signature>
                        <name>RemoveClient</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>Send</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.ArrayList</signature>
                        <name>m_clients</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>System.Net.Sockets.Socket</signature>
                        <name>m_serverSocket</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>MAX_CONNECTIONS</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>bool()</signature>
                        <name>HasConnections</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>log4net.Appender.TelnetAppender/SocketHandler/SocketClient</name>
                <methodlist>
                    <method>
                        <signature>void(System.Net.Sockets.Socket)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Dispose</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>Send</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Net.Sockets.Socket</signature>
                        <name>m_socket</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.IO.StreamWriter</signature>
                        <name>m_writer</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>log4net.Appender.TextWriterAppender</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(log4net.Layout.ILayout, System.IO.Stream)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(log4net.Layout.ILayout, System.IO.TextWriter)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(log4net.Core.LoggingEvent)</signature>
                        <name>Append</name>
                    </method>
                    <method>
                        <signature>void(log4net.Core.LoggingEvent[])</signature>
                        <name>Append</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>CloseWriter</name>
                    </method>
                    <method>
                        <signature>log4net.Core.IErrorHandler()</signature>
                        <name>get_ErrorHandler</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_ImmediateFlush</name>
                    </method>
                    <method>
                        <signature>log4net.Util.QuietTextWriter()</signature>
                        <name>get_QuietWriter</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_RequiresLayout</name>
                    </method>
                    <method>
                        <signature>System.IO.TextWriter()</signature>
                        <name>get_Writer</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>OnClose</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>PreAppendCheck</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>PrepareWriter</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Reset</name>
                    </method>
                    <method>
                        <signature>void(log4net.Core.IErrorHandler)</signature>
                        <name>set_ErrorHandler</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_ImmediateFlush</name>
                    </method>
                    <method>
                        <signature>void(log4net.Util.QuietTextWriter)</signature>
                        <name>set_QuietWriter</name>
                    </method>
                    <method>
                        <signature>void(System.IO.TextWriter)</signature>
                        <name>set_Writer</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>WriteFooter</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>WriteFooterAndCloseWriter</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>WriteHeader</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>bool</signature>
                        <name>m_immediateFlush</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>log4net.Util.QuietTextWriter</signature>
                        <name>m_qtw</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>log4net.Core.IErrorHandler()</signature>
                        <name>ErrorHandler</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>ImmediateFlush</name>
                    </property>
                    <property>
                        <signature>log4net.Util.QuietTextWriter()</signature>
                        <name>QuietWriter</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>RequiresLayout</name>
                    </property>
                    <property>
                        <signature>System.IO.TextWriter()</signature>
                        <name>Writer</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>log4net.Appender.TraceAppender</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(log4net.Layout.ILayout)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(log4net.Core.LoggingEvent)</signature>
                        <name>Append</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_ImmediateFlush</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_RequiresLayout</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_ImmediateFlush</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>bool</signature>
                        <name>m_immediateFlush</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>bool()</signature>
                        <name>ImmediateFlush</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>RequiresLayout</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>log4net.Appender.UdpAppender</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ActivateOptions</name>
                    </method>
                    <method>
                        <signature>void(log4net.Core.LoggingEvent)</signature>
                        <name>Append</name>
                    </method>
                    <method>
                        <signature>System.Net.Sockets.UdpClient()</signature>
                        <name>get_Client</name>
                    </method>
                    <method>
                        <signature>System.Text.Encoding()</signature>
                        <name>get_Encoding</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_LocalPort</name>
                    </method>
                    <method>
                        <signature>System.Net.IPAddress()</signature>
                        <name>get_RemoteAddress</name>
                    </method>
                    <method>
                        <signature>System.Net.IPEndPoint()</signature>
                        <name>get_RemoteEndPoint</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_RemotePort</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_RequiresLayout</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>InitializeClientConnection</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>OnClose</name>
                    </method>
                    <method>
                        <signature>void(System.Net.Sockets.UdpClient)</signature>
                        <name>set_Client</name>
                    </method>
                    <method>
                        <signature>void(System.Text.Encoding)</signature>
                        <name>set_Encoding</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_LocalPort</name>
                    </method>
                    <method>
                        <signature>void(System.Net.IPAddress)</signature>
                        <name>set_RemoteAddress</name>
                    </method>
                    <method>
                        <signature>void(System.Net.IPEndPoint)</signature>
                        <name>set_RemoteEndPoint</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_RemotePort</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Net.Sockets.UdpClient</signature>
                        <name>m_client</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>System.Text.Encoding</signature>
                        <name>m_encoding</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>m_localPort</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>System.Net.IPAddress</signature>
                        <name>m_remoteAddress</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Net.IPEndPoint</signature>
                        <name>m_remoteEndPoint</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>m_remotePort</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>System.Net.Sockets.UdpClient()</signature>
                        <name>Client</name>
                    </property>
                    <property>
                        <signature>System.Text.Encoding()</signature>
                        <name>Encoding</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>LocalPort</name>
                    </property>
                    <property>
                        <signature>System.Net.IPAddress()</signature>
                        <name>RemoteAddress</name>
                    </property>
                    <property>
                        <signature>System.Net.IPEndPoint()</signature>
                        <name>RemoteEndPoint</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>RemotePort</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>RequiresLayout</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>log4net.Config.AliasDomainAttribute</name>
                <methodlist>
                    <method>
                        <signature>void(string)</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>log4net.Config.AliasRepositoryAttribute</name>
                <methodlist>
                    <method>
                        <signature>void(string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Name</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Name</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>m_name</name>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>string()</signature>
                        <name>Name</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>log4net.Config.BasicConfigurator</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Configure</name>
                    </method>
                    <method>
                        <signature>void(log4net.Appender.IAppender)</signature>
                        <name>Configure</name>
                    </method>
                    <method>
                        <signature>void(log4net.Repository.ILoggerRepository)</signature>
                        <name>Configure</name>
                    </method>
                    <method>
                        <signature>void(log4net.Repository.ILoggerRepository, log4net.Appender.IAppender)</signature>
                        <name>Configure</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>log4net.Config.ConfiguratorAttribute</name>
                <methodlist>
                    <method>
                        <signature>void(int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>int32(object)</signature>
                        <name>CompareTo</name>
                    </method>
                    <method>
                        <signature>void(System.Reflection.Assembly, log4net.Repository.ILoggerRepository)</signature>
                        <name>Configure</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>m_priority</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>log4net.Config.DomainAttribute</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>log4net.Config.DOMConfigurator</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Configure</name>
                    </method>
                    <method>
                        <signature>void(log4net.Repository.ILoggerRepository)</signature>
                        <name>Configure</name>
                    </method>
                    <method>
                        <signature>void(log4net.Repository.ILoggerRepository, System.IO.FileInfo)</signature>
                        <name>Configure</name>
                    </method>
                    <method>
                        <signature>void(log4net.Repository.ILoggerRepository, System.IO.Stream)</signature>
                        <name>Configure</name>
                    </method>
                    <method>
                        <signature>void(log4net.Repository.ILoggerRepository, System.Xml.XmlElement)</signature>
                        <name>Configure</name>
                    </method>
                    <method>
                        <signature>void(System.IO.FileInfo)</signature>
                        <name>Configure</name>
                    </method>
                    <method>
                        <signature>void(System.IO.Stream)</signature>
                        <name>Configure</name>
                    </method>
                    <method>
                        <signature>void(System.Xml.XmlElement)</signature>
                        <name>Configure</name>
                    </method>
                    <method>
                        <signature>void(log4net.Repository.ILoggerRepository, System.IO.FileInfo)</signature>
                        <name>ConfigureAndWatch</name>
                    </method>
                    <method>
                        <signature>void(System.IO.FileInfo)</signature>
                        <name>ConfigureAndWatch</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>log4net.Config.DOMConfiguratorAttribute</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>log4net.Config.Log4NetConfigurationSectionHandler</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>object(object, object, System.Xml.XmlNode)</signature>
                        <name>Create</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>log4net.Config.PluginAttribute</name>
                <methodlist>
                    <method>
                        <signature>void(string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.Type)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>log4net.Plugin.IPlugin()</signature>
                        <name>CreatePlugin</name>
                    </method>
                    <method>
                        <signature>System.Type()</signature>
                        <name>get_Type</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_TypeName</name>
                    </method>
                    <method>
                        <signature>void(System.Type)</signature>
                        <name>set_Type</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_TypeName</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ToString</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Type</signature>
                        <name>m_type</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>m_typeName</name>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>System.Type()</signature>
                        <name>Type</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>TypeName</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>log4net.Config.RepositoryAttribute</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Name</name>
                    </method>
                    <method>
                        <signature>System.Type()</signature>
                        <name>get_RepositoryType</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Name</name>
                    </method>
                    <method>
                        <signature>void(System.Type)</signature>
                        <name>set_RepositoryType</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>m_name</name>
                    </field>
                    <field>
                        <signature>System.Type</signature>
                        <name>m_repositoryType</name>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>string()</signature>
                        <name>Name</name>
                    </property>
                    <property>
                        <signature>System.Type()</signature>
                        <name>RepositoryType</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>log4net.Config.SecurityContextProviderAttribute</name>
                <methodlist>
                    <method>
                        <signature>void(System.Type)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.Reflection.Assembly, log4net.Repository.ILoggerRepository)</signature>
                        <name>Configure</name>
                    </method>
                    <method>
                        <signature>System.Type()</signature>
                        <name>get_ProviderType</name>
                    </method>
                    <method>
                        <signature>void(System.Type)</signature>
                        <name>set_ProviderType</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Type</signature>
                        <name>m_providerType</name>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>System.Type()</signature>
                        <name>ProviderType</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>log4net.Config.XmlConfigurator</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Configure</name>
                    </method>
                    <method>
                        <signature>void(log4net.Repository.ILoggerRepository)</signature>
                        <name>Configure</name>
                    </method>
                    <method>
                        <signature>void(log4net.Repository.ILoggerRepository, System.IO.FileInfo)</signature>
                        <name>Configure</name>
                    </method>
                    <method>
                        <signature>void(log4net.Repository.ILoggerRepository, System.IO.Stream)</signature>
                        <name>Configure</name>
                    </method>
                    <method>
                        <signature>void(log4net.Repository.ILoggerRepository, System.Uri)</signature>
                        <name>Configure</name>
                    </method>
                    <method>
                        <signature>void(log4net.Repository.ILoggerRepository, System.Xml.XmlElement)</signature>
                        <name>Configure</name>
                    </method>
                    <method>
                        <signature>void(System.IO.FileInfo)</signature>
                        <name>Configure</name>
                    </method>
                    <method>
                        <signature>void(System.IO.Stream)</signature>
                        <name>Configure</name>
                    </method>
                    <method>
                        <signature>void(System.Uri)</signature>
                        <name>Configure</name>
                    </method>
                    <method>
                        <signature>void(System.Xml.XmlElement)</signature>
                        <name>Configure</name>
                    </method>
                    <method>
                        <signature>void(log4net.Repository.ILoggerRepository, System.IO.FileInfo)</signature>
                        <name>ConfigureAndWatch</name>
                    </method>
                    <method>
                        <signature>void(System.IO.FileInfo)</signature>
                        <name>ConfigureAndWatch</name>
                    </method>
                    <method>
                        <signature>void(log4net.Repository.ILoggerRepository, System.Xml.XmlElement)</signature>
                        <name>ConfigureFromXml</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>log4net.Config.XmlConfigurator/ConfigureAndWatchHandler</name>
                <newname>log4net.Config.XmlConfigurator/a</newname>
                <methodlist>
                    <method>
                        <signature>void(log4net.Repository.ILoggerRepository, System.IO.FileInfo)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(object, System.IO.FileSystemEventArgs)</signature>
                        <name>ConfigureAndWatchHandler_OnChanged</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(object, System.IO.RenamedEventArgs)</signature>
                        <name>ConfigureAndWatchHandler_OnRenamed</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(object)</signature>
                        <name>OnWatchedFileChange</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(log4net.Repository.ILoggerRepository, System.IO.FileInfo)</signature>
                        <name>StartWatching</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.IO.FileInfo</signature>
                        <name>m_configFile</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>log4net.Repository.ILoggerRepository</signature>
                        <name>m_repository</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>System.Threading.Timer</signature>
                        <name>m_timer</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>TimeoutMillis</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>log4net.Config.XmlConfiguratorAttribute</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.Reflection.Assembly, log4net.Repository.ILoggerRepository)</signature>
                        <name>Configure</name>
                    </method>
                    <method>
                        <signature>void(log4net.Repository.ILoggerRepository, System.IO.FileInfo)</signature>
                        <name>ConfigureFromFile</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.Reflection.Assembly, log4net.Repository.ILoggerRepository)</signature>
                        <name>ConfigureFromFile</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(System.Reflection.Assembly, log4net.Repository.ILoggerRepository)</signature>
                        <name>ConfigureFromUri</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_ConfigFile</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_ConfigFileExtension</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_Watch</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_ConfigFile</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_ConfigFileExtension</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_Watch</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>m_configFile</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>m_configFileExtension</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>m_configureAndWatch</name>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>string()</signature>
                        <name>ConfigFile</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>ConfigFileExtension</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>Watch</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>log4net.Core.CompactRepositorySelector</name>
                <methodlist>
                    <method>
                        <signature>void(System.Type)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(log4net.Core.LoggerRepositoryCreationEventHandler)</signature>
                        <name>add_LoggerRepositoryCreatedEvent</name>
                    </method>
                    <method>
                        <signature>void(log4net.Core.LoggerRepositoryCreationEventHandler)</signature>
                        <name>add_m_loggerRepositoryCreatedEvent</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>log4net.Repository.ILoggerRepository(string, System.Type)</signature>
                        <name>CreateRepository</name>
                    </method>
                    <method>
                        <signature>log4net.Repository.ILoggerRepository(System.Reflection.Assembly, System.Type)</signature>
                        <name>CreateRepository</name>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>ExistsRepository</name>
                    </method>
                    <method>
                        <signature>log4net.Repository.ILoggerRepository[]()</signature>
                        <name>GetAllRepositories</name>
                    </method>
                    <method>
                        <signature>log4net.Repository.ILoggerRepository(string)</signature>
                        <name>GetRepository</name>
                    </method>
                    <method>
                        <signature>log4net.Repository.ILoggerRepository(System.Reflection.Assembly)</signature>
                        <name>GetRepository</name>
                    </method>
                    <method>
                        <signature>void(log4net.Repository.ILoggerRepository)</signature>
                        <name>OnLoggerRepositoryCreatedEvent</name>
                    </method>
                    <method>
                        <signature>void(log4net.Core.LoggerRepositoryCreationEventHandler)</signature>
                        <name>remove_LoggerRepositoryCreatedEvent</name>
                    </method>
                    <method>
                        <signature>void(log4net.Core.LoggerRepositoryCreationEventHandler)</signature>
                        <name>remove_m_loggerRepositoryCreatedEvent</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>DefaultRepositoryName</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Type</signature>
                        <name>m_defaultRepositoryType</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>log4net.Core.LoggerRepositoryCreationEventHandler</signature>
                        <name>m_loggerRepositoryCreatedEvent</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Hashtable</signature>
                        <name>m_name2repositoryMap</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist>
                    <event>
                        <signature>log4net.Core.LoggerRepositoryCreationEventHandler</signature>
                        <name>LoggerRepositoryCreatedEvent</name>
                    </event>
                    <event>
                        <signature>log4net.Core.LoggerRepositoryCreationEventHandler</signature>
                        <name>m_loggerRepositoryCreatedEvent</name>
                    </event>
                </eventlist>
            </type>
            <type>
                <name>log4net.Core.DefaultRepositorySelector</name>
                <methodlist>
                    <method>
                        <signature>void(System.Type)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(log4net.Core.LoggerRepositoryCreationEventHandler)</signature>
                        <name>add_LoggerRepositoryCreatedEvent</name>
                    </method>
                    <method>
                        <signature>void(log4net.Core.LoggerRepositoryCreationEventHandler)</signature>
                        <name>add_m_loggerRepositoryCreatedEvent</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(string, log4net.Repository.ILoggerRepository)</signature>
                        <name>AliasRepository</name>
                    </method>
                    <method>
                        <signature>void(System.Reflection.Assembly, log4net.Repository.ILoggerRepository)</signature>
                        <name>ConfigureRepository</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>log4net.Repository.ILoggerRepository(string, System.Type)</signature>
                        <name>CreateRepository</name>
                    </method>
                    <method>
                        <signature>log4net.Repository.ILoggerRepository(System.Reflection.Assembly, System.Type)</signature>
                        <name>CreateRepository</name>
                    </method>
                    <method>
                        <signature>log4net.Repository.ILoggerRepository(System.Reflection.Assembly, System.Type, string, bool)</signature>
                        <name>CreateRepository</name>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>ExistsRepository</name>
                    </method>
                    <method>
                        <signature>log4net.Repository.ILoggerRepository[]()</signature>
                        <name>GetAllRepositories</name>
                    </method>
                    <method>
                        <signature>void(System.Reflection.Assembly, string&amp;, System.Type&amp;)</signature>
                        <name>GetInfoForAssembly</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>log4net.Repository.ILoggerRepository(string)</signature>
                        <name>GetRepository</name>
                    </method>
                    <method>
                        <signature>log4net.Repository.ILoggerRepository(System.Reflection.Assembly)</signature>
                        <name>GetRepository</name>
                    </method>
                    <method>
                        <signature>void(System.Reflection.Assembly, log4net.Repository.ILoggerRepository)</signature>
                        <name>LoadAliases</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.Reflection.Assembly, log4net.Repository.ILoggerRepository)</signature>
                        <name>LoadPlugins</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(log4net.Repository.ILoggerRepository)</signature>
                        <name>OnLoggerRepositoryCreatedEvent</name>
                    </method>
                    <method>
                        <signature>void(log4net.Core.LoggerRepositoryCreationEventHandler)</signature>
                        <name>remove_LoggerRepositoryCreatedEvent</name>
                    </method>
                    <method>
                        <signature>void(log4net.Core.LoggerRepositoryCreationEventHandler)</signature>
                        <name>remove_m_loggerRepositoryCreatedEvent</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>DefaultRepositoryName</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Hashtable</signature>
                        <name>m_alias2repositoryMap</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Hashtable</signature>
                        <name>m_assembly2repositoryMap</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>System.Type</signature>
                        <name>m_defaultRepositoryType</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>log4net.Core.LoggerRepositoryCreationEventHandler</signature>
                        <name>m_loggerRepositoryCreatedEvent</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Hashtable</signature>
                        <name>m_name2repositoryMap</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist>
                    <event>
                        <signature>log4net.Core.LoggerRepositoryCreationEventHandler</signature>
                        <name>LoggerRepositoryCreatedEvent</name>
                    </event>
                    <event>
                        <signature>log4net.Core.LoggerRepositoryCreationEventHandler</signature>
                        <name>m_loggerRepositoryCreatedEvent</name>
                    </event>
                </eventlist>
            </type>
            <type>
                <name>log4net.Core.ErrorCode</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>log4net.Core.ErrorCode</signature>
                        <name>AddressParseFailure</name>
                    </field>
                    <field>
                        <signature>log4net.Core.ErrorCode</signature>
                        <name>CloseFailure</name>
                    </field>
                    <field>
                        <signature>log4net.Core.ErrorCode</signature>
                        <name>FileOpenFailure</name>
                    </field>
                    <field>
                        <signature>log4net.Core.ErrorCode</signature>
                        <name>FlushFailure</name>
                    </field>
                    <field>
                        <signature>log4net.Core.ErrorCode</signature>
                        <name>GenericFailure</name>
                    </field>
                    <field>
                        <signature>log4net.Core.ErrorCode</signature>
                        <name>MissingLayout</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                    <field>
                        <signature>log4net.Core.ErrorCode</signature>
                        <name>WriteFailure</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>log4net.Core.FixFlags</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>log4net.Core.FixFlags</signature>
                        <name>All</name>
                    </field>
                    <field>
                        <signature>log4net.Core.FixFlags</signature>
                        <name>Domain</name>
                    </field>
                    <field>
                        <signature>log4net.Core.FixFlags</signature>
                        <name>Exception</name>
                    </field>
                    <field>
                        <signature>log4net.Core.FixFlags</signature>
                        <name>Identity</name>
                    </field>
                    <field>
                        <signature>log4net.Core.FixFlags</signature>
                        <name>LocationInfo</name>
                    </field>
                    <field>
                        <signature>log4net.Core.FixFlags</signature>
                        <name>Mdc</name>
                    </field>
                    <field>
                        <signature>log4net.Core.FixFlags</signature>
                        <name>Message</name>
                    </field>
                    <field>
                        <signature>log4net.Core.FixFlags</signature>
                        <name>Ndc</name>
                    </field>
                    <field>
                        <signature>log4net.Core.FixFlags</signature>
                        <name>None</name>
                    </field>
                    <field>
                        <signature>log4net.Core.FixFlags</signature>
                        <name>Partial</name>
                    </field>
                    <field>
                        <signature>log4net.Core.FixFlags</signature>
                        <name>Properties</name>
                    </field>
                    <field>
                        <signature>log4net.Core.FixFlags</signature>
                        <name>ThreadName</name>
                    </field>
                    <field>
                        <signature>log4net.Core.FixFlags</signature>
                        <name>UserName</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>log4net.Core.IAppenderAttachable</name>
                <methodlist>
                    <method>
                        <signature>void(log4net.Appender.IAppender)</signature>
                        <name>AddAppender</name>
                    </method>
                    <method>
                        <signature>log4net.Appender.AppenderCollection()</signature>
                        <name>get_Appenders</name>
                    </method>
                    <method>
                        <signature>log4net.Appender.IAppender(string)</signature>
                        <name>GetAppender</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>RemoveAllAppenders</name>
                    </method>
                    <method>
                        <signature>log4net.Appender.IAppender(log4net.Appender.IAppender)</signature>
                        <name>RemoveAppender</name>
                    </method>
                    <method>
                        <signature>log4net.Appender.IAppender(string)</signature>
                        <name>RemoveAppender</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist>
                    <property>
                        <signature>log4net.Appender.AppenderCollection()</signature>
                        <name>Appenders</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>log4net.Core.IErrorHandler</name>
                <methodlist>
                    <method>
                        <signature>void(string)</signature>
                        <name>Error</name>
                    </method>
                    <method>
                        <signature>void(string, System.Exception)</signature>
                        <name>Error</name>
                    </method>
                    <method>
                        <signature>void(string, System.Exception, log4net.Core.ErrorCode)</signature>
                        <name>Error</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>log4net.Core.IFixingRequired</name>
                <methodlist>
                    <method>
                        <signature>object()</signature>
                        <name>GetFixedObject</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>log4net.Core.ILogger</name>
                <methodlist>
                    <method>
                        <signature>string()</signature>
                        <name>get_Name</name>
                    </method>
                    <method>
                        <signature>log4net.Repository.ILoggerRepository()</signature>
                        <name>get_Repository</name>
                    </method>
                    <method>
                        <signature>bool(log4net.Core.Level)</signature>
                        <name>IsEnabledFor</name>
                    </method>
                    <method>
                        <signature>void(log4net.Core.LoggingEvent)</signature>
                        <name>Log</name>
                    </method>
                    <method>
                        <signature>void(System.Type, log4net.Core.Level, object, System.Exception)</signature>
                        <name>Log</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist>
                    <property>
                        <signature>string()</signature>
                        <name>Name</name>
                    </property>
                    <property>
                        <signature>log4net.Repository.ILoggerRepository()</signature>
                        <name>Repository</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>log4net.Core.ILoggerWrapper</name>
                <methodlist>
                    <method>
                        <signature>log4net.Core.ILogger()</signature>
                        <name>get_Logger</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist>
                    <property>
                        <signature>log4net.Core.ILogger()</signature>
                        <name>Logger</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>log4net.Core.IOptionHandler</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>ActivateOptions</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>log4net.Core.IRepositorySelector</name>
                <methodlist>
                    <method>
                        <signature>void(log4net.Core.LoggerRepositoryCreationEventHandler)</signature>
                        <name>add_LoggerRepositoryCreatedEvent</name>
                    </method>
                    <method>
                        <signature>log4net.Repository.ILoggerRepository(string, System.Type)</signature>
                        <name>CreateRepository</name>
                    </method>
                    <method>
                        <signature>log4net.Repository.ILoggerRepository(System.Reflection.Assembly, System.Type)</signature>
                        <name>CreateRepository</name>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>ExistsRepository</name>
                    </method>
                    <method>
                        <signature>log4net.Repository.ILoggerRepository[]()</signature>
                        <name>GetAllRepositories</name>
                    </method>
                    <method>
                        <signature>log4net.Repository.ILoggerRepository(string)</signature>
                        <name>GetRepository</name>
                    </method>
                    <method>
                        <signature>log4net.Repository.ILoggerRepository(System.Reflection.Assembly)</signature>
                        <name>GetRepository</name>
                    </method>
                    <method>
                        <signature>void(log4net.Core.LoggerRepositoryCreationEventHandler)</signature>
                        <name>remove_LoggerRepositoryCreatedEvent</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist>
                    <event>
                        <signature>log4net.Core.LoggerRepositoryCreationEventHandler</signature>
                        <name>LoggerRepositoryCreatedEvent</name>
                    </event>
                </eventlist>
            </type>
            <type>
                <name>log4net.Core.ITriggeringEventEvaluator</name>
                <methodlist>
                    <method>
                        <signature>bool(log4net.Core.LoggingEvent)</signature>
                        <name>IsTriggeringEvent</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>log4net.Core.Level</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void(int32, string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(int32, string, string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>int32(log4net.Core.Level, log4net.Core.Level)</signature>
                        <name>Compare</name>
                    </method>
                    <method>
                        <signature>int32(object)</signature>
                        <name>CompareTo</name>
                    </method>
                    <method>
                        <signature>bool(object)</signature>
                        <name>Equals</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_DisplayName</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Name</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Value</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>GetHashCode</name>
                    </method>
                    <method>
                        <signature>bool(log4net.Core.Level, log4net.Core.Level)</signature>
                        <name>op_Equality</name>
                    </method>
                    <method>
                        <signature>bool(log4net.Core.Level, log4net.Core.Level)</signature>
                        <name>op_GreaterThan</name>
                    </method>
                    <method>
                        <signature>bool(log4net.Core.Level, log4net.Core.Level)</signature>
                        <name>op_GreaterThanOrEqual</name>
                    </method>
                    <method>
                        <signature>bool(log4net.Core.Level, log4net.Core.Level)</signature>
                        <name>op_Inequality</name>
                    </method>
                    <method>
                        <signature>bool(log4net.Core.Level, log4net.Core.Level)</signature>
                        <name>op_LessThan</name>
                    </method>
                    <method>
                        <signature>bool(log4net.Core.Level, log4net.Core.Level)</signature>
                        <name>op_LessThanOrEqual</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ToString</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>log4net.Core.Level</signature>
                        <name>Alert</name>
                    </field>
                    <field>
                        <signature>log4net.Core.Level</signature>
                        <name>All</name>
                    </field>
                    <field>
                        <signature>log4net.Core.Level</signature>
                        <name>Critical</name>
                    </field>
                    <field>
                        <signature>log4net.Core.Level</signature>
                        <name>Debug</name>
                    </field>
                    <field>
                        <signature>log4net.Core.Level</signature>
                        <name>Emergency</name>
                    </field>
                    <field>
                        <signature>log4net.Core.Level</signature>
                        <name>Error</name>
                    </field>
                    <field>
                        <signature>log4net.Core.Level</signature>
                        <name>Fatal</name>
                    </field>
                    <field>
                        <signature>log4net.Core.Level</signature>
                        <name>Fine</name>
                    </field>
                    <field>
                        <signature>log4net.Core.Level</signature>
                        <name>Finer</name>
                    </field>
                    <field>
                        <signature>log4net.Core.Level</signature>
                        <name>Finest</name>
                    </field>
                    <field>
                        <signature>log4net.Core.Level</signature>
                        <name>Info</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>m_levelDisplayName</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>m_levelName</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>m_levelValue</name>
                    </field>
                    <field>
                        <signature>log4net.Core.Level</signature>
                        <name>Notice</name>
                    </field>
                    <field>
                        <signature>log4net.Core.Level</signature>
                        <name>Off</name>
                    </field>
                    <field>
                        <signature>log4net.Core.Level</signature>
                        <name>Severe</name>
                    </field>
                    <field>
                        <signature>log4net.Core.Level</signature>
                        <name>Trace</name>
                    </field>
                    <field>
                        <signature>log4net.Core.Level</signature>
                        <name>Verbose</name>
                    </field>
                    <field>
                        <signature>log4net.Core.Level</signature>
                        <name>Warn</name>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>string()</signature>
                        <name>DisplayName</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>Name</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>Value</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>log4net.Core.LevelCollection</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(log4net.Core.Level[])</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(log4net.Core.LevelCollection)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(log4net.Core.LevelCollection/Tag)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.ICollection)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>int32(log4net.Core.Level)</signature>
                        <name>Add</name>
                    </method>
                    <method>
                        <signature>int32(log4net.Core.Level[])</signature>
                        <name>AddRange</name>
                    </method>
                    <method>
                        <signature>int32(log4net.Core.LevelCollection)</signature>
                        <name>AddRange</name>
                    </method>
                    <method>
                        <signature>int32(System.Collections.ICollection)</signature>
                        <name>AddRange</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Clear</name>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>Clone</name>
                    </method>
                    <method>
                        <signature>bool(log4net.Core.Level)</signature>
                        <name>Contains</name>
                    </method>
                    <method>
                        <signature>void(log4net.Core.Level[])</signature>
                        <name>CopyTo</name>
                    </method>
                    <method>
                        <signature>void(log4net.Core.Level[], int32)</signature>
                        <name>CopyTo</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>EnsureCapacity</name>
                        <newname>h</newname>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Capacity</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Count</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsFixedSize</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsReadOnly</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsSynchronized</name>
                    </method>
                    <method>
                        <signature>log4net.Core.Level(int32)</signature>
                        <name>get_Item</name>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>get_SyncRoot</name>
                    </method>
                    <method>
                        <signature>log4net.Core.LevelCollection/ILevelCollectionEnumerator()</signature>
                        <name>GetEnumerator</name>
                    </method>
                    <method>
                        <signature>int32(log4net.Core.Level)</signature>
                        <name>IndexOf</name>
                    </method>
                    <method>
                        <signature>void(int32, log4net.Core.Level)</signature>
                        <name>Insert</name>
                    </method>
                    <method>
                        <signature>log4net.Core.LevelCollection(log4net.Core.LevelCollection)</signature>
                        <name>ReadOnly</name>
                    </method>
                    <method>
                        <signature>void(log4net.Core.Level)</signature>
                        <name>Remove</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>RemoveAt</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_Capacity</name>
                    </method>
                    <method>
                        <signature>void(int32, log4net.Core.Level)</signature>
                        <name>set_Item</name>
                    </method>
                    <method>
                        <signature>void(System.Array, int32)</signature>
                        <name>System.Collections.ICollection.CopyTo</name>
                    </method>
                    <method>
                        <signature>System.Collections.IEnumerator()</signature>
                        <name>System.Collections.IEnumerable.GetEnumerator</name>
                    </method>
                    <method>
                        <signature>int32(object)</signature>
                        <name>System.Collections.IList.Add</name>
                    </method>
                    <method>
                        <signature>bool(object)</signature>
                        <name>System.Collections.IList.Contains</name>
                    </method>
                    <method>
                        <signature>object(int32)</signature>
                        <name>System.Collections.IList.get_Item</name>
                    </method>
                    <method>
                        <signature>int32(object)</signature>
                        <name>System.Collections.IList.IndexOf</name>
                    </method>
                    <method>
                        <signature>void(int32, object)</signature>
                        <name>System.Collections.IList.Insert</name>
                    </method>
                    <method>
                        <signature>void(object)</signature>
                        <name>System.Collections.IList.Remove</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>System.Collections.IList.RemoveAt</name>
                    </method>
                    <method>
                        <signature>void(int32, object)</signature>
                        <name>System.Collections.IList.set_Item</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>TrimToSize</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>ValidateIndex</name>
                        <newname>i</newname>
                    </method>
                    <method>
                        <signature>void(int32, bool)</signature>
                        <name>ValidateIndex</name>
                        <newname>h</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>DEFAULT_CAPACITY</name>
                        <newname>h</newname>
                    </field>
                    <field>
                        <signature>log4net.Core.Level[]</signature>
                        <name>m_array</name>
                        <newname>i</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>m_count</name>
                        <newname>j</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>m_version</name>
                        <newname>k</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>int32()</signature>
                        <name>Capacity</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>Count</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>IsFixedSize</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>IsReadOnly</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>IsSynchronized</name>
                    </property>
                    <property>
                        <signature>log4net.Core.Level(int32)</signature>
                        <name>Item</name>
                    </property>
                    <property>
                        <signature>object()</signature>
                        <name>SyncRoot</name>
                    </property>
                    <property>
                        <signature>object(int32)</signature>
                        <name>System.Collections.IList.Item</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>log4net.Core.LevelCollection/Enumerator</name>
                <newname>log4net.Core.LevelCollection/b</newname>
                <methodlist>
                    <method>
                        <signature>void(log4net.Core.LevelCollection)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>log4net.Core.Level()</signature>
                        <name>get_Current</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>MoveNext</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Reset</name>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>System.Collections.IEnumerator.get_Current</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>log4net.Core.LevelCollection</signature>
                        <name>m_collection</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>m_index</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>m_version</name>
                        <newname>c</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>log4net.Core.LevelCollection/ILevelCollectionEnumerator</name>
                <methodlist>
                    <method>
                        <signature>log4net.Core.Level()</signature>
                        <name>get_Current</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>MoveNext</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Reset</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist>
                    <property>
                        <signature>log4net.Core.Level()</signature>
                        <name>Current</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>log4net.Core.LevelCollection/ReadOnlyLevelCollection</name>
                <newname>log4net.Core.LevelCollection/a</newname>
                <methodlist>
                    <method>
                        <signature>void(log4net.Core.LevelCollection)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>int32(log4net.Core.Level)</signature>
                        <name>Add</name>
                    </method>
                    <method>
                        <signature>int32(log4net.Core.Level[])</signature>
                        <name>AddRange</name>
                    </method>
                    <method>
                        <signature>int32(log4net.Core.LevelCollection)</signature>
                        <name>AddRange</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Clear</name>
                    </method>
                    <method>
                        <signature>bool(log4net.Core.Level)</signature>
                        <name>Contains</name>
                    </method>
                    <method>
                        <signature>void(log4net.Core.Level[])</signature>
                        <name>CopyTo</name>
                    </method>
                    <method>
                        <signature>void(log4net.Core.Level[], int32)</signature>
                        <name>CopyTo</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Capacity</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Count</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsFixedSize</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsReadOnly</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsSynchronized</name>
                    </method>
                    <method>
                        <signature>log4net.Core.Level(int32)</signature>
                        <name>get_Item</name>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>get_SyncRoot</name>
                    </method>
                    <method>
                        <signature>log4net.Core.LevelCollection/ILevelCollectionEnumerator()</signature>
                        <name>GetEnumerator</name>
                    </method>
                    <method>
                        <signature>int32(log4net.Core.Level)</signature>
                        <name>IndexOf</name>
                    </method>
                    <method>
                        <signature>void(int32, log4net.Core.Level)</signature>
                        <name>Insert</name>
                    </method>
                    <method>
                        <signature>void(log4net.Core.Level)</signature>
                        <name>Remove</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>RemoveAt</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_Capacity</name>
                    </method>
                    <method>
                        <signature>void(int32, log4net.Core.Level)</signature>
                        <name>set_Item</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>log4net.Core.LevelCollection</signature>
                        <name>m_collection</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>log4net.Core.LevelCollection/Tag</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>log4net.Core.LevelCollection/Tag</signature>
                        <name>Default</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>log4net.Core.LevelEvaluator</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(log4net.Core.Level)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>log4net.Core.Level()</signature>
                        <name>get_Threshold</name>
                    </method>
                    <method>
                        <signature>bool(log4net.Core.LoggingEvent)</signature>
                        <name>IsTriggeringEvent</name>
                    </method>
                    <method>
                        <signature>void(log4net.Core.Level)</signature>
                        <name>set_Threshold</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>log4net.Core.Level</signature>
                        <name>m_threshold</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>log4net.Core.Level()</signature>
                        <name>Threshold</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>log4net.Core.LevelMap</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(log4net.Core.Level)</signature>
                        <name>Add</name>
                    </method>
                    <method>
                        <signature>void(string, int32)</signature>
                        <name>Add</name>
                    </method>
                    <method>
                        <signature>void(string, int32, string)</signature>
                        <name>Add</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Clear</name>
                    </method>
                    <method>
                        <signature>log4net.Core.LevelCollection()</signature>
                        <name>get_AllLevels</name>
                    </method>
                    <method>
                        <signature>log4net.Core.Level(string)</signature>
                        <name>get_Item</name>
                    </method>
                    <method>
                        <signature>log4net.Core.Level(log4net.Core.Level)</signature>
                        <name>LookupWithDefault</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.Hashtable</signature>
                        <name>m_mapName2Level</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>log4net.Core.LevelCollection()</signature>
                        <name>AllLevels</name>
                    </property>
                    <property>
                        <signature>log4net.Core.Level(string)</signature>
                        <name>Item</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>log4net.Core.LocationInfo</name>
                <methodlist>
                    <method>
                        <signature>void(string, string, string, string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.Type)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_ClassName</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_FileName</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_FullInfo</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_LineNumber</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_MethodName</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>m_className</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>m_fileName</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>m_fullInfo</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>m_lineNumber</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>m_methodName</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>NA</name>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>string()</signature>
                        <name>ClassName</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>FileName</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>FullInfo</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>LineNumber</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>MethodName</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>log4net.Core.LogException</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string, System.Exception)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>log4net.Core.LoggerManager</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>log4net.Repository.ILoggerRepository(string)</signature>
                        <name>CreateDomain</name>
                    </method>
                    <method>
                        <signature>log4net.Repository.ILoggerRepository(string, System.Type)</signature>
                        <name>CreateDomain</name>
                    </method>
                    <method>
                        <signature>log4net.Repository.ILoggerRepository(System.Reflection.Assembly, System.Type)</signature>
                        <name>CreateDomain</name>
                    </method>
                    <method>
                        <signature>log4net.Repository.ILoggerRepository(string)</signature>
                        <name>CreateRepository</name>
                    </method>
                    <method>
                        <signature>log4net.Repository.ILoggerRepository(string, System.Type)</signature>
                        <name>CreateRepository</name>
                    </method>
                    <method>
                        <signature>log4net.Repository.ILoggerRepository(System.Reflection.Assembly, System.Type)</signature>
                        <name>CreateRepository</name>
                    </method>
                    <method>
                        <signature>log4net.Core.ILogger(string, string)</signature>
                        <name>Exists</name>
                    </method>
                    <method>
                        <signature>log4net.Core.ILogger(System.Reflection.Assembly, string)</signature>
                        <name>Exists</name>
                    </method>
                    <method>
                        <signature>log4net.Core.IRepositorySelector()</signature>
                        <name>get_RepositorySelector</name>
                    </method>
                    <method>
                        <signature>log4net.Repository.ILoggerRepository[]()</signature>
                        <name>GetAllRepositories</name>
                    </method>
                    <method>
                        <signature>log4net.Core.ILogger[](string)</signature>
                        <name>GetCurrentLoggers</name>
                    </method>
                    <method>
                        <signature>log4net.Core.ILogger[](System.Reflection.Assembly)</signature>
                        <name>GetCurrentLoggers</name>
                    </method>
                    <method>
                        <signature>log4net.Core.ILogger(string, string)</signature>
                        <name>GetLogger</name>
                    </method>
                    <method>
                        <signature>log4net.Core.ILogger(string, System.Type)</signature>
                        <name>GetLogger</name>
                    </method>
                    <method>
                        <signature>log4net.Core.ILogger(System.Reflection.Assembly, string)</signature>
                        <name>GetLogger</name>
                    </method>
                    <method>
                        <signature>log4net.Core.ILogger(System.Reflection.Assembly, System.Type)</signature>
                        <name>GetLogger</name>
                    </method>
                    <method>
                        <signature>log4net.Repository.ILoggerRepository(string)</signature>
                        <name>GetLoggerRepository</name>
                    </method>
                    <method>
                        <signature>log4net.Repository.ILoggerRepository(System.Reflection.Assembly)</signature>
                        <name>GetLoggerRepository</name>
                    </method>
                    <method>
                        <signature>log4net.Repository.ILoggerRepository(string)</signature>
                        <name>GetRepository</name>
                    </method>
                    <method>
                        <signature>log4net.Repository.ILoggerRepository(System.Reflection.Assembly)</signature>
                        <name>GetRepository</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetVersionInfo</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(object, System.EventArgs)</signature>
                        <name>OnDomainUnload</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(object, System.EventArgs)</signature>
                        <name>OnProcessExit</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>RegisterAppDomainEvents</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>ResetConfiguration</name>
                    </method>
                    <method>
                        <signature>void(System.Reflection.Assembly)</signature>
                        <name>ResetConfiguration</name>
                    </method>
                    <method>
                        <signature>void(log4net.Core.IRepositorySelector)</signature>
                        <name>set_RepositorySelector</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Shutdown</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>ShutdownRepository</name>
                    </method>
                    <method>
                        <signature>void(System.Reflection.Assembly)</signature>
                        <name>ShutdownRepository</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>log4net.Core.IRepositorySelector</signature>
                        <name>s_repositorySelector</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>log4net.Core.IRepositorySelector()</signature>
                        <name>RepositorySelector</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>log4net.Core.LoggerRepositoryCreationEventArgs</name>
                <methodlist>
                    <method>
                        <signature>void(log4net.Repository.ILoggerRepository)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>log4net.Repository.ILoggerRepository()</signature>
                        <name>get_LoggerRepository</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>log4net.Repository.ILoggerRepository</signature>
                        <name>m_repository</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>log4net.Repository.ILoggerRepository()</signature>
                        <name>LoggerRepository</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>log4net.Core.LoggerRepositoryCreationEventHandler</name>
                <methodlist>
                    <method>
                        <signature>void(object, native int)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.IAsyncResult(object, log4net.Core.LoggerRepositoryCreationEventArgs, System.AsyncCallback, object)</signature>
                        <name>BeginInvoke</name>
                    </method>
                    <method>
                        <signature>void(System.IAsyncResult)</signature>
                        <name>EndInvoke</name>
                    </method>
                    <method>
                        <signature>void(object, log4net.Core.LoggerRepositoryCreationEventArgs)</signature>
                        <name>Invoke</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>log4net.Core.LoggerWrapperImpl</name>
                <methodlist>
                    <method>
                        <signature>void(log4net.Core.ILogger)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>log4net.Core.ILogger()</signature>
                        <name>get_Logger</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>log4net.Core.ILogger</signature>
                        <name>m_logger</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>log4net.Core.ILogger()</signature>
                        <name>Logger</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>log4net.Core.LoggingEvent</name>
                <methodlist>
                    <method>
                        <signature>void(log4net.Core.LoggingEventData)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.Type, log4net.Repository.ILoggerRepository, log4net.Core.LoggingEventData)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.Type, log4net.Repository.ILoggerRepository, log4net.Core.LoggingEventData, log4net.Core.FixFlags)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.Type, log4net.Repository.ILoggerRepository, string, log4net.Core.Level, object, System.Exception)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>CacheProperties</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>CreateCompositeProperties</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(log4net.Repository.ILoggerRepository)</signature>
                        <name>EnsureRepository</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>FixVolatileData</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>FixVolatileData</name>
                    </method>
                    <method>
                        <signature>void(log4net.Core.FixFlags)</signature>
                        <name>FixVolatileData</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Domain</name>
                    </method>
                    <method>
                        <signature>System.Exception()</signature>
                        <name>get_ExceptionObject</name>
                    </method>
                    <method>
                        <signature>log4net.Core.FixFlags()</signature>
                        <name>get_Fix</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Identity</name>
                    </method>
                    <method>
                        <signature>log4net.Core.Level()</signature>
                        <name>get_Level</name>
                    </method>
                    <method>
                        <signature>log4net.Core.LocationInfo()</signature>
                        <name>get_LocationInformation</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_LoggerName</name>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>get_MessageObject</name>
                    </method>
                    <method>
                        <signature>log4net.Util.PropertiesDictionary()</signature>
                        <name>get_Properties</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_RenderedMessage</name>
                    </method>
                    <method>
                        <signature>log4net.Repository.ILoggerRepository()</signature>
                        <name>get_Repository</name>
                    </method>
                    <method>
                        <signature>System.DateTime()</signature>
                        <name>get_StartTime</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_ThreadName</name>
                    </method>
                    <method>
                        <signature>System.DateTime()</signature>
                        <name>get_TimeStamp</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_UserName</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetExceptionString</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetExceptionStrRep</name>
                    </method>
                    <method>
                        <signature>log4net.Core.LoggingEventData()</signature>
                        <name>GetLoggingEventData</name>
                    </method>
                    <method>
                        <signature>log4net.Core.LoggingEventData(log4net.Core.FixFlags)</signature>
                        <name>GetLoggingEventData</name>
                    </method>
                    <method>
                        <signature>void(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)</signature>
                        <name>GetObjectData</name>
                    </method>
                    <method>
                        <signature>log4net.Util.PropertiesDictionary()</signature>
                        <name>GetProperties</name>
                    </method>
                    <method>
                        <signature>object(string)</signature>
                        <name>LookupProperty</name>
                    </method>
                    <method>
                        <signature>void(log4net.Core.FixFlags)</signature>
                        <name>set_Fix</name>
                    </method>
                    <method>
                        <signature>void(System.IO.TextWriter)</signature>
                        <name>WriteRenderedMessage</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>HostNameProperty</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>IdentityProperty</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>m_cacheUpdatable</name>
                    </field>
                    <field>
                        <signature>System.Type</signature>
                        <name>m_callerStackBoundaryDeclaringType</name>
                    </field>
                    <field>
                        <signature>log4net.Util.CompositeProperties</signature>
                        <name>m_compositeProperties</name>
                    </field>
                    <field>
                        <signature>log4net.Core.LoggingEventData</signature>
                        <name>m_data</name>
                    </field>
                    <field>
                        <signature>log4net.Util.PropertiesDictionary</signature>
                        <name>m_eventProperties</name>
                    </field>
                    <field>
                        <signature>log4net.Core.FixFlags</signature>
                        <name>m_fixFlags</name>
                    </field>
                    <field>
                        <signature>object</signature>
                        <name>m_message</name>
                    </field>
                    <field>
                        <signature>log4net.Repository.ILoggerRepository</signature>
                        <name>m_repository</name>
                    </field>
                    <field>
                        <signature>System.Exception</signature>
                        <name>m_thrownException</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>UserNameProperty</name>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>string()</signature>
                        <name>Domain</name>
                    </property>
                    <property>
                        <signature>System.Exception()</signature>
                        <name>ExceptionObject</name>
                    </property>
                    <property>
                        <signature>log4net.Core.FixFlags()</signature>
                        <name>Fix</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>Identity</name>
                    </property>
                    <property>
                        <signature>log4net.Core.Level()</signature>
                        <name>Level</name>
                    </property>
                    <property>
                        <signature>log4net.Core.LocationInfo()</signature>
                        <name>LocationInformation</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>LoggerName</name>
                    </property>
                    <property>
                        <signature>object()</signature>
                        <name>MessageObject</name>
                    </property>
                    <property>
                        <signature>log4net.Util.PropertiesDictionary()</signature>
                        <name>Properties</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>RenderedMessage</name>
                    </property>
                    <property>
                        <signature>log4net.Repository.ILoggerRepository()</signature>
                        <name>Repository</name>
                    </property>
                    <property>
                        <signature>System.DateTime()</signature>
                        <name>StartTime</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>ThreadName</name>
                    </property>
                    <property>
                        <signature>System.DateTime()</signature>
                        <name>TimeStamp</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>UserName</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>log4net.Core.LoggingEventData</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>Domain</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>ExceptionString</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>Identity</name>
                    </field>
                    <field>
                        <signature>log4net.Core.Level</signature>
                        <name>Level</name>
                    </field>
                    <field>
                        <signature>log4net.Core.LocationInfo</signature>
                        <name>LocationInfo</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>LoggerName</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>Message</name>
                    </field>
                    <field>
                        <signature>log4net.Util.PropertiesDictionary</signature>
                        <name>Properties</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>ThreadName</name>
                    </field>
                    <field>
                        <signature>System.DateTime</signature>
                        <name>TimeStamp</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>UserName</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>log4net.Core.LogImpl</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void(log4net.Core.ILogger)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(object)</signature>
                        <name>Debug</name>
                    </method>
                    <method>
                        <signature>void(object, System.Exception)</signature>
                        <name>Debug</name>
                    </method>
                    <method>
                        <signature>void(string, object)</signature>
                        <name>DebugFormat</name>
                    </method>
                    <method>
                        <signature>void(string, object, object)</signature>
                        <name>DebugFormat</name>
                    </method>
                    <method>
                        <signature>void(string, object, object, object)</signature>
                        <name>DebugFormat</name>
                    </method>
                    <method>
                        <signature>void(string, object[])</signature>
                        <name>DebugFormat</name>
                    </method>
                    <method>
                        <signature>void(System.IFormatProvider, string, object[])</signature>
                        <name>DebugFormat</name>
                    </method>
                    <method>
                        <signature>void(object)</signature>
                        <name>Error</name>
                    </method>
                    <method>
                        <signature>void(object, System.Exception)</signature>
                        <name>Error</name>
                    </method>
                    <method>
                        <signature>void(string, object)</signature>
                        <name>ErrorFormat</name>
                    </method>
                    <method>
                        <signature>void(string, object, object)</signature>
                        <name>ErrorFormat</name>
                    </method>
                    <method>
                        <signature>void(string, object, object, object)</signature>
                        <name>ErrorFormat</name>
                    </method>
                    <method>
                        <signature>void(string, object[])</signature>
                        <name>ErrorFormat</name>
                    </method>
                    <method>
                        <signature>void(System.IFormatProvider, string, object[])</signature>
                        <name>ErrorFormat</name>
                    </method>
                    <method>
                        <signature>void(object)</signature>
                        <name>Fatal</name>
                    </method>
                    <method>
                        <signature>void(object, System.Exception)</signature>
                        <name>Fatal</name>
                    </method>
                    <method>
                        <signature>void(string, object)</signature>
                        <name>FatalFormat</name>
                    </method>
                    <method>
                        <signature>void(string, object, object)</signature>
                        <name>FatalFormat</name>
                    </method>
                    <method>
                        <signature>void(string, object, object, object)</signature>
                        <name>FatalFormat</name>
                    </method>
                    <method>
                        <signature>void(string, object[])</signature>
                        <name>FatalFormat</name>
                    </method>
                    <method>
                        <signature>void(System.IFormatProvider, string, object[])</signature>
                        <name>FatalFormat</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsDebugEnabled</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsErrorEnabled</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsFatalEnabled</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsInfoEnabled</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsWarnEnabled</name>
                    </method>
                    <method>
                        <signature>void(object)</signature>
                        <name>Info</name>
                    </method>
                    <method>
                        <signature>void(object, System.Exception)</signature>
                        <name>Info</name>
                    </method>
                    <method>
                        <signature>void(string, object)</signature>
                        <name>InfoFormat</name>
                    </method>
                    <method>
                        <signature>void(string, object, object)</signature>
                        <name>InfoFormat</name>
                    </method>
                    <method>
                        <signature>void(string, object, object, object)</signature>
                        <name>InfoFormat</name>
                    </method>
                    <method>
                        <signature>void(string, object[])</signature>
                        <name>InfoFormat</name>
                    </method>
                    <method>
                        <signature>void(System.IFormatProvider, string, object[])</signature>
                        <name>InfoFormat</name>
                    </method>
                    <method>
                        <signature>void(object, System.EventArgs)</signature>
                        <name>LoggerRepositoryConfigurationChanged</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(log4net.Repository.ILoggerRepository)</signature>
                        <name>ReloadLevels</name>
                    </method>
                    <method>
                        <signature>void(object)</signature>
                        <name>Warn</name>
                    </method>
                    <method>
                        <signature>void(object, System.Exception)</signature>
                        <name>Warn</name>
                    </method>
                    <method>
                        <signature>void(string, object)</signature>
                        <name>WarnFormat</name>
                    </method>
                    <method>
                        <signature>void(string, object, object)</signature>
                        <name>WarnFormat</name>
                    </method>
                    <method>
                        <signature>void(string, object, object, object)</signature>
                        <name>WarnFormat</name>
                    </method>
                    <method>
                        <signature>void(string, object[])</signature>
                        <name>WarnFormat</name>
                    </method>
                    <method>
                        <signature>void(System.IFormatProvider, string, object[])</signature>
                        <name>WarnFormat</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>log4net.Core.Level</signature>
                        <name>m_levelDebug</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>log4net.Core.Level</signature>
                        <name>m_levelError</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>log4net.Core.Level</signature>
                        <name>m_levelFatal</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>log4net.Core.Level</signature>
                        <name>m_levelInfo</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>log4net.Core.Level</signature>
                        <name>m_levelWarn</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>System.Type</signature>
                        <name>ThisDeclaringType</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>bool()</signature>
                        <name>IsDebugEnabled</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>IsErrorEnabled</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>IsFatalEnabled</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>IsInfoEnabled</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>IsWarnEnabled</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>log4net.Core.SecurityContext</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.IDisposable(object)</signature>
                        <name>Impersonate</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>log4net.Core.SecurityContextProvider</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>log4net.Core.SecurityContext(object)</signature>
                        <name>CreateSecurityContext</name>
                    </method>
                    <method>
                        <signature>log4net.Core.SecurityContextProvider()</signature>
                        <name>get_DefaultProvider</name>
                    </method>
                    <method>
                        <signature>void(log4net.Core.SecurityContextProvider)</signature>
                        <name>set_DefaultProvider</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>log4net.Core.SecurityContextProvider</signature>
                        <name>s_defaultProvider</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>log4net.Core.SecurityContextProvider()</signature>
                        <name>DefaultProvider</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>log4net.Core.WrapperCreationHandler</name>
                <methodlist>
                    <method>
                        <signature>void(object, native int)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.IAsyncResult(log4net.Core.ILogger, System.AsyncCallback, object)</signature>
                        <name>BeginInvoke</name>
                    </method>
                    <method>
                        <signature>log4net.Core.ILoggerWrapper(System.IAsyncResult)</signature>
                        <name>EndInvoke</name>
                    </method>
                    <method>
                        <signature>log4net.Core.ILoggerWrapper(log4net.Core.ILogger)</signature>
                        <name>Invoke</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>log4net.Core.WrapperMap</name>
                <methodlist>
                    <method>
                        <signature>void(log4net.Core.WrapperCreationHandler)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>log4net.Core.ILoggerWrapper(log4net.Core.ILogger)</signature>
                        <name>CreateNewWrapperObject</name>
                    </method>
                    <method>
                        <signature>System.Collections.Hashtable()</signature>
                        <name>get_Repositories</name>
                    </method>
                    <method>
                        <signature>log4net.Core.ILoggerWrapper(log4net.Core.ILogger)</signature>
                        <name>GetWrapper</name>
                    </method>
                    <method>
                        <signature>void(object, System.EventArgs)</signature>
                        <name>ILoggerRepository_Shutdown</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(log4net.Repository.ILoggerRepository)</signature>
                        <name>RepositoryShutdown</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>log4net.Core.WrapperCreationHandler</signature>
                        <name>m_createWrapperHandler</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Hashtable</signature>
                        <name>m_repositories</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>log4net.Repository.LoggerRepositoryShutdownEventHandler</signature>
                        <name>m_shutdownHandler</name>
                        <newname>c</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>System.Collections.Hashtable()</signature>
                        <name>Repositories</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>log4net.DateFormatter.AbsoluteTimeDateFormatter</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.DateTime, System.IO.TextWriter)</signature>
                        <name>FormatDate</name>
                    </method>
                    <method>
                        <signature>void(System.DateTime, System.Text.StringBuilder)</signature>
                        <name>FormatDateWithoutMillis</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>AbsoluteTimeDateFormat</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>DateAndTimeDateFormat</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>Iso8601TimeDateFormat</name>
                    </field>
                    <field>
                        <signature>System.Text.StringBuilder</signature>
                        <name>s_lastTimeBuf</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>s_lastTimeString</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>int64</signature>
                        <name>s_lastTimeToTheSecond</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>log4net.DateFormatter.DateTimeDateFormatter</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.DateTime, System.Text.StringBuilder)</signature>
                        <name>FormatDateWithoutMillis</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Globalization.DateTimeFormatInfo</signature>
                        <name>m_dateTimeFormatInfo</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>log4net.DateFormatter.IDateFormatter</name>
                <methodlist>
                    <method>
                        <signature>void(System.DateTime, System.IO.TextWriter)</signature>
                        <name>FormatDate</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>log4net.DateFormatter.Iso8601DateFormatter</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.DateTime, System.Text.StringBuilder)</signature>
                        <name>FormatDateWithoutMillis</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>log4net.DateFormatter.SimpleDateFormatter</name>
                <methodlist>
                    <method>
                        <signature>void(string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.DateTime, System.IO.TextWriter)</signature>
                        <name>FormatDate</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>m_formatString</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>log4net.Filter.DenyAllFilter</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>log4net.Filter.FilterDecision(log4net.Core.LoggingEvent)</signature>
                        <name>Decide</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>log4net.Filter.FilterDecision</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>log4net.Filter.FilterDecision</signature>
                        <name>Accept</name>
                    </field>
                    <field>
                        <signature>log4net.Filter.FilterDecision</signature>
                        <name>Deny</name>
                    </field>
                    <field>
                        <signature>log4net.Filter.FilterDecision</signature>
                        <name>Neutral</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>log4net.Filter.FilterSkeleton</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ActivateOptions</name>
                    </method>
                    <method>
                        <signature>log4net.Filter.FilterDecision(log4net.Core.LoggingEvent)</signature>
                        <name>Decide</name>
                    </method>
                    <method>
                        <signature>log4net.Filter.IFilter()</signature>
                        <name>get_Next</name>
                    </method>
                    <method>
                        <signature>void(log4net.Filter.IFilter)</signature>
                        <name>set_Next</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>log4net.Filter.IFilter</signature>
                        <name>m_next</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>log4net.Filter.IFilter()</signature>
                        <name>Next</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>log4net.Filter.IFilter</name>
                <methodlist>
                    <method>
                        <signature>log4net.Filter.FilterDecision(log4net.Core.LoggingEvent)</signature>
                        <name>Decide</name>
                    </method>
                    <method>
                        <signature>log4net.Filter.IFilter()</signature>
                        <name>get_Next</name>
                    </method>
                    <method>
                        <signature>void(log4net.Filter.IFilter)</signature>
                        <name>set_Next</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist>
                    <property>
                        <signature>log4net.Filter.IFilter()</signature>
                        <name>Next</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>log4net.Filter.LevelMatchFilter</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>log4net.Filter.FilterDecision(log4net.Core.LoggingEvent)</signature>
                        <name>Decide</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_AcceptOnMatch</name>
                    </method>
                    <method>
                        <signature>log4net.Core.Level()</signature>
                        <name>get_LevelToMatch</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_AcceptOnMatch</name>
                    </method>
                    <method>
                        <signature>void(log4net.Core.Level)</signature>
                        <name>set_LevelToMatch</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>bool</signature>
                        <name>m_acceptOnMatch</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>log4net.Core.Level</signature>
                        <name>m_levelToMatch</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>bool()</signature>
                        <name>AcceptOnMatch</name>
                    </property>
                    <property>
                        <signature>log4net.Core.Level()</signature>
                        <name>LevelToMatch</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>log4net.Filter.LevelRangeFilter</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>log4net.Filter.FilterDecision(log4net.Core.LoggingEvent)</signature>
                        <name>Decide</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_AcceptOnMatch</name>
                    </method>
                    <method>
                        <signature>log4net.Core.Level()</signature>
                        <name>get_LevelMax</name>
                    </method>
                    <method>
                        <signature>log4net.Core.Level()</signature>
                        <name>get_LevelMin</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_AcceptOnMatch</name>
                    </method>
                    <method>
                        <signature>void(log4net.Core.Level)</signature>
                        <name>set_LevelMax</name>
                    </method>
                    <method>
                        <signature>void(log4net.Core.Level)</signature>
                        <name>set_LevelMin</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>bool</signature>
                        <name>m_acceptOnMatch</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>log4net.Core.Level</signature>
                        <name>m_levelMax</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>log4net.Core.Level</signature>
                        <name>m_levelMin</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>bool()</signature>
                        <name>AcceptOnMatch</name>
                    </property>
                    <property>
                        <signature>log4net.Core.Level()</signature>
                        <name>LevelMax</name>
                    </property>
                    <property>
                        <signature>log4net.Core.Level()</signature>
                        <name>LevelMin</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>log4net.Filter.LoggerMatchFilter</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>log4net.Filter.FilterDecision(log4net.Core.LoggingEvent)</signature>
                        <name>Decide</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_AcceptOnMatch</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_LoggerToMatch</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_AcceptOnMatch</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_LoggerToMatch</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>bool</signature>
                        <name>m_acceptOnMatch</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>m_loggerToMatch</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>bool()</signature>
                        <name>AcceptOnMatch</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>LoggerToMatch</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>log4net.Filter.MdcFilter</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>log4net.Filter.NdcFilter</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>log4net.Filter.PropertyFilter</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>log4net.Filter.FilterDecision(log4net.Core.LoggingEvent)</signature>
                        <name>Decide</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Key</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Key</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>m_key</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>string()</signature>
                        <name>Key</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>log4net.Filter.StringMatchFilter</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ActivateOptions</name>
                    </method>
                    <method>
                        <signature>log4net.Filter.FilterDecision(log4net.Core.LoggingEvent)</signature>
                        <name>Decide</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_AcceptOnMatch</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_RegexToMatch</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_StringToMatch</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_AcceptOnMatch</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_RegexToMatch</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_StringToMatch</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>bool</signature>
                        <name>m_acceptOnMatch</name>
                    </field>
                    <field>
                        <signature>System.Text.RegularExpressions.Regex</signature>
                        <name>m_regexToMatch</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>m_stringRegexToMatch</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>m_stringToMatch</name>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>bool()</signature>
                        <name>AcceptOnMatch</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>RegexToMatch</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>StringToMatch</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>log4net.GlobalContext</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>log4net.Util.GlobalContextProperties()</signature>
                        <name>get_Properties</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>log4net.Util.GlobalContextProperties</signature>
                        <name>s_properties</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>log4net.Util.GlobalContextProperties()</signature>
                        <name>Properties</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>log4net.ILog</name>
                <methodlist>
                    <method>
                        <signature>void(object)</signature>
                        <name>Debug</name>
                    </method>
                    <method>
                        <signature>void(object, System.Exception)</signature>
                        <name>Debug</name>
                    </method>
                    <method>
                        <signature>void(string, object)</signature>
                        <name>DebugFormat</name>
                    </method>
                    <method>
                        <signature>void(string, object, object)</signature>
                        <name>DebugFormat</name>
                    </method>
                    <method>
                        <signature>void(string, object, object, object)</signature>
                        <name>DebugFormat</name>
                    </method>
                    <method>
                        <signature>void(string, object[])</signature>
                        <name>DebugFormat</name>
                    </method>
                    <method>
                        <signature>void(System.IFormatProvider, string, object[])</signature>
                        <name>DebugFormat</name>
                    </method>
                    <method>
                        <signature>void(object)</signature>
                        <name>Error</name>
                    </method>
                    <method>
                        <signature>void(object, System.Exception)</signature>
                        <name>Error</name>
                    </method>
                    <method>
                        <signature>void(string, object)</signature>
                        <name>ErrorFormat</name>
                    </method>
                    <method>
                        <signature>void(string, object, object)</signature>
                        <name>ErrorFormat</name>
                    </method>
                    <method>
                        <signature>void(string, object, object, object)</signature>
                        <name>ErrorFormat</name>
                    </method>
                    <method>
                        <signature>void(string, object[])</signature>
                        <name>ErrorFormat</name>
                    </method>
                    <method>
                        <signature>void(System.IFormatProvider, string, object[])</signature>
                        <name>ErrorFormat</name>
                    </method>
                    <method>
                        <signature>void(object)</signature>
                        <name>Fatal</name>
                    </method>
                    <method>
                        <signature>void(object, System.Exception)</signature>
                        <name>Fatal</name>
                    </method>
                    <method>
                        <signature>void(string, object)</signature>
                        <name>FatalFormat</name>
                    </method>
                    <method>
                        <signature>void(string, object, object)</signature>
                        <name>FatalFormat</name>
                    </method>
                    <method>
                        <signature>void(string, object, object, object)</signature>
                        <name>FatalFormat</name>
                    </method>
                    <method>
                        <signature>void(string, object[])</signature>
                        <name>FatalFormat</name>
                    </method>
                    <method>
                        <signature>void(System.IFormatProvider, string, object[])</signature>
                        <name>FatalFormat</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsDebugEnabled</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsErrorEnabled</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsFatalEnabled</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsInfoEnabled</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsWarnEnabled</name>
                    </method>
                    <method>
                        <signature>void(object)</signature>
                        <name>Info</name>
                    </method>
                    <method>
                        <signature>void(object, System.Exception)</signature>
                        <name>Info</name>
                    </method>
                    <method>
                        <signature>void(string, object)</signature>
                        <name>InfoFormat</name>
                    </method>
                    <method>
                        <signature>void(string, object, object)</signature>
                        <name>InfoFormat</name>
                    </method>
                    <method>
                        <signature>void(string, object, object, object)</signature>
                        <name>InfoFormat</name>
                    </method>
                    <method>
                        <signature>void(string, object[])</signature>
                        <name>InfoFormat</name>
                    </method>
                    <method>
                        <signature>void(System.IFormatProvider, string, object[])</signature>
                        <name>InfoFormat</name>
                    </method>
                    <method>
                        <signature>void(object)</signature>
                        <name>Warn</name>
                    </method>
                    <method>
                        <signature>void(object, System.Exception)</signature>
                        <name>Warn</name>
                    </method>
                    <method>
                        <signature>void(string, object)</signature>
                        <name>WarnFormat</name>
                    </method>
                    <method>
                        <signature>void(string, object, object)</signature>
                        <name>WarnFormat</name>
                    </method>
                    <method>
                        <signature>void(string, object, object, object)</signature>
                        <name>WarnFormat</name>
                    </method>
                    <method>
                        <signature>void(string, object[])</signature>
                        <name>WarnFormat</name>
                    </method>
                    <method>
                        <signature>void(System.IFormatProvider, string, object[])</signature>
                        <name>WarnFormat</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist>
                    <property>
                        <signature>bool()</signature>
                        <name>IsDebugEnabled</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>IsErrorEnabled</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>IsFatalEnabled</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>IsInfoEnabled</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>IsWarnEnabled</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>log4net.Layout.ExceptionLayout</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ActivateOptions</name>
                    </method>
                    <method>
                        <signature>void(System.IO.TextWriter, log4net.Core.LoggingEvent)</signature>
                        <name>Format</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>log4net.Layout.ILayout</name>
                <methodlist>
                    <method>
                        <signature>void(System.IO.TextWriter, log4net.Core.LoggingEvent)</signature>
                        <name>Format</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_ContentType</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Footer</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Header</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IgnoresException</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist>
                    <property>
                        <signature>string()</signature>
                        <name>ContentType</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>Footer</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>Header</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>IgnoresException</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>log4net.Layout.IRawLayout</name>
                <methodlist>
                    <method>
                        <signature>object(log4net.Core.LoggingEvent)</signature>
                        <name>Format</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>log4net.Layout.Layout2RawLayoutAdapter</name>
                <methodlist>
                    <method>
                        <signature>void(log4net.Layout.ILayout)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>object(log4net.Core.LoggingEvent)</signature>
                        <name>Format</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>log4net.Layout.ILayout</signature>
                        <name>m_layout</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>log4net.Layout.LayoutSkeleton</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ActivateOptions</name>
                    </method>
                    <method>
                        <signature>void(System.IO.TextWriter, log4net.Core.LoggingEvent)</signature>
                        <name>Format</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_ContentType</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Footer</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Header</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IgnoresException</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Footer</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Header</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_IgnoresException</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>m_footer</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>m_header</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>m_ignoresException</name>
                        <newname>c</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>string()</signature>
                        <name>ContentType</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>Footer</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>Header</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>IgnoresException</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>log4net.Layout.Pattern.AppDomainPatternConverter</name>
                <newname>d</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.IO.TextWriter, log4net.Core.LoggingEvent)</signature>
                        <name>Convert</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>log4net.Layout.Pattern.DatePatternConverter</name>
                <newname>t</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ActivateOptions</name>
                    </method>
                    <method>
                        <signature>void(System.IO.TextWriter, log4net.Core.LoggingEvent)</signature>
                        <name>Convert</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>log4net.DateFormatter.IDateFormatter</signature>
                        <name>m_dateFormatter</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>log4net.Layout.Pattern.ExceptionPatternConverter</name>
                <newname>z</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.IO.TextWriter, log4net.Core.LoggingEvent)</signature>
                        <name>Convert</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>log4net.Layout.Pattern.FileLocationPatternConverter</name>
                <newname>m</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.IO.TextWriter, log4net.Core.LoggingEvent)</signature>
                        <name>Convert</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>log4net.Layout.Pattern.FullLocationPatternConverter</name>
                <newname>s</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.IO.TextWriter, log4net.Core.LoggingEvent)</signature>
                        <name>Convert</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>log4net.Layout.Pattern.IdentityPatternConverter</name>
                <newname>ag</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.IO.TextWriter, log4net.Core.LoggingEvent)</signature>
                        <name>Convert</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>log4net.Layout.Pattern.LevelPatternConverter</name>
                <newname>x</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.IO.TextWriter, log4net.Core.LoggingEvent)</signature>
                        <name>Convert</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>log4net.Layout.Pattern.LineLocationPatternConverter</name>
                <newname>u</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.IO.TextWriter, log4net.Core.LoggingEvent)</signature>
                        <name>Convert</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>log4net.Layout.Pattern.LoggerPatternConverter</name>
                <newname>r</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string(log4net.Core.LoggingEvent)</signature>
                        <name>GetFullyQualifiedName</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>log4net.Layout.Pattern.MessagePatternConverter</name>
                <newname>a</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.IO.TextWriter, log4net.Core.LoggingEvent)</signature>
                        <name>Convert</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>log4net.Layout.Pattern.MethodLocationPatternConverter</name>
                <newname>q</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.IO.TextWriter, log4net.Core.LoggingEvent)</signature>
                        <name>Convert</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>log4net.Layout.Pattern.NamedPatternConverter</name>
                <newname>i</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ActivateOptions</name>
                    </method>
                    <method>
                        <signature>void(System.IO.TextWriter, log4net.Core.LoggingEvent)</signature>
                        <name>Convert</name>
                    </method>
                    <method>
                        <signature>string(log4net.Core.LoggingEvent)</signature>
                        <name>GetFullyQualifiedName</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>m_precision</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>log4net.Layout.Pattern.NdcPatternConverter</name>
                <newname>n</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.IO.TextWriter, log4net.Core.LoggingEvent)</signature>
                        <name>Convert</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>log4net.Layout.Pattern.PatternLayoutConverter</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.IO.TextWriter, log4net.Core.LoggingEvent)</signature>
                        <name>Convert</name>
                    </method>
                    <method>
                        <signature>void(System.IO.TextWriter, object)</signature>
                        <name>Convert</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IgnoresException</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_IgnoresException</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>bool</signature>
                        <name>m_ignoresException</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>bool()</signature>
                        <name>IgnoresException</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>log4net.Layout.Pattern.PropertyPatternConverter</name>
                <newname>al</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.IO.TextWriter, log4net.Core.LoggingEvent)</signature>
                        <name>Convert</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>log4net.Layout.Pattern.RelativeTimePatternConverter</name>
                <newname>ah</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.IO.TextWriter, log4net.Core.LoggingEvent)</signature>
                        <name>Convert</name>
                    </method>
                    <method>
                        <signature>int64(System.DateTime, System.DateTime)</signature>
                        <name>TimeDifferenceInMillis</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>log4net.Layout.Pattern.ThreadPatternConverter</name>
                <newname>l</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.IO.TextWriter, log4net.Core.LoggingEvent)</signature>
                        <name>Convert</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>log4net.Layout.Pattern.TypeNamePatternConverter</name>
                <newname>aa</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string(log4net.Core.LoggingEvent)</signature>
                        <name>GetFullyQualifiedName</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>log4net.Layout.Pattern.UserNamePatternConverter</name>
                <newname>y</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.IO.TextWriter, log4net.Core.LoggingEvent)</signature>
                        <name>Convert</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>log4net.Layout.Pattern.UtcDatePatternConverter</name>
                <newname>af</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.IO.TextWriter, log4net.Core.LoggingEvent)</signature>
                        <name>Convert</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>log4net.Layout.PatternLayout</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ActivateOptions</name>
                    </method>
                    <method>
                        <signature>void(log4net.Layout.PatternLayout/ConverterInfo)</signature>
                        <name>AddConverter</name>
                    </method>
                    <method>
                        <signature>void(string, System.Type)</signature>
                        <name>AddConverter</name>
                    </method>
                    <method>
                        <signature>log4net.Util.PatternParser(string)</signature>
                        <name>CreatePatternParser</name>
                    </method>
                    <method>
                        <signature>void(System.IO.TextWriter, log4net.Core.LoggingEvent)</signature>
                        <name>Format</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_ConversionPattern</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_ConversionPattern</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>DefaultConversionPattern</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>DetailConversionPattern</name>
                    </field>
                    <field>
                        <signature>log4net.Util.PatternConverter</signature>
                        <name>m_head</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Hashtable</signature>
                        <name>m_instanceRulesRegistry</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>m_pattern</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Hashtable</signature>
                        <name>s_globalRulesRegistry</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>string()</signature>
                        <name>ConversionPattern</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>log4net.Layout.PatternLayout/ConverterInfo</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Name</name>
                    </method>
                    <method>
                        <signature>System.Type()</signature>
                        <name>get_Type</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Name</name>
                    </method>
                    <method>
                        <signature>void(System.Type)</signature>
                        <name>set_Type</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>m_name</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Type</signature>
                        <name>m_type</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>string()</signature>
                        <name>Name</name>
                    </property>
                    <property>
                        <signature>System.Type()</signature>
                        <name>Type</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>log4net.Layout.RawLayoutConverter</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(System.Type)</signature>
                        <name>CanConvertFrom</name>
                    </method>
                    <method>
                        <signature>object(object)</signature>
                        <name>ConvertFrom</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>log4net.Layout.RawPropertyLayout</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>object(log4net.Core.LoggingEvent)</signature>
                        <name>Format</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Key</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Key</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>m_key</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>string()</signature>
                        <name>Key</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>log4net.Layout.RawTimeStampLayout</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>object(log4net.Core.LoggingEvent)</signature>
                        <name>Format</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>log4net.Layout.RawUtcTimeStampLayout</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>object(log4net.Core.LoggingEvent)</signature>
                        <name>Format</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>log4net.Layout.SimpleLayout</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ActivateOptions</name>
                    </method>
                    <method>
                        <signature>void(System.IO.TextWriter, log4net.Core.LoggingEvent)</signature>
                        <name>Format</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>log4net.Layout.XmlLayout</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ActivateOptions</name>
                    </method>
                    <method>
                        <signature>void(System.Xml.XmlWriter, log4net.Core.LoggingEvent)</signature>
                        <name>FormatXml</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_Base64EncodeMessage</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_Base64EncodeProperties</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Prefix</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_Base64EncodeMessage</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_Base64EncodeProperties</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Prefix</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>ATTR_CLASS</name>
                        <newname>p</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>ATTR_DOMAIN</name>
                        <newname>m</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>ATTR_FILE</name>
                        <newname>r</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>ATTR_IDENTITY</name>
                        <newname>n</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>ATTR_LEVEL</name>
                        <newname>k</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>ATTR_LINE</name>
                        <newname>s</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>ATTR_LOGGER</name>
                        <newname>i</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>ATTR_METHOD</name>
                        <newname>q</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>ATTR_NAME</name>
                        <newname>t</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>ATTR_THREAD</name>
                        <newname>l</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>ATTR_TIMESTAMP</name>
                        <newname>j</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>ATTR_USERNAME</name>
                        <newname>o</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>ATTR_VALUE</name>
                        <newname>u</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>ELM_DATA</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>ELM_EVENT</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>ELM_EXCEPTION</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>ELM_GLOBAL_PROPERTIES</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>ELM_LOCATION</name>
                        <newname>h</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>ELM_MESSAGE</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>ELM_PROPERTIES</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>m_base64Message</name>
                        <newname>ac</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>m_base64Properties</name>
                        <newname>ad</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>m_elmData</name>
                        <newname>y</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>m_elmEvent</name>
                        <newname>w</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>m_elmException</name>
                        <newname>aa</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>m_elmLocation</name>
                        <newname>ab</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>m_elmMessage</name>
                        <newname>x</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>m_elmProperties</name>
                        <newname>z</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>m_prefix</name>
                        <newname>v</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>PREFIX</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>bool()</signature>
                        <name>Base64EncodeMessage</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>Base64EncodeProperties</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>Prefix</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>log4net.Layout.XmlLayoutBase</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ActivateOptions</name>
                    </method>
                    <method>
                        <signature>void(System.IO.TextWriter, log4net.Core.LoggingEvent)</signature>
                        <name>Format</name>
                    </method>
                    <method>
                        <signature>void(System.Xml.XmlWriter, log4net.Core.LoggingEvent)</signature>
                        <name>FormatXml</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_ContentType</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_InvalidCharReplacement</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_LocationInfo</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_InvalidCharReplacement</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_LocationInfo</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>m_invalidCharReplacement</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>m_locationInfo</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>log4net.Util.ProtectCloseTextWriter</signature>
                        <name>m_protectCloseTextWriter</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>string()</signature>
                        <name>ContentType</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>InvalidCharReplacement</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>LocationInfo</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>log4net.Layout.XmlLayoutSchemaLog4j</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.Xml.XmlWriter, log4net.Core.LoggingEvent)</signature>
                        <name>FormatXml</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Version</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Version</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.DateTime</signature>
                        <name>s_date1970</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>string()</signature>
                        <name>Version</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>log4net.LogicalThreadContext</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>log4net.Util.LogicalThreadContextProperties()</signature>
                        <name>get_Properties</name>
                    </method>
                    <method>
                        <signature>log4net.Util.ThreadContextStacks()</signature>
                        <name>get_Stacks</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>log4net.Util.LogicalThreadContextProperties</signature>
                        <name>s_properties</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>log4net.Util.ThreadContextStacks</signature>
                        <name>s_stacks</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>log4net.Util.LogicalThreadContextProperties()</signature>
                        <name>Properties</name>
                    </property>
                    <property>
                        <signature>log4net.Util.ThreadContextStacks()</signature>
                        <name>Stacks</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>log4net.LogManager</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>log4net.Repository.ILoggerRepository(string)</signature>
                        <name>CreateDomain</name>
                    </method>
                    <method>
                        <signature>log4net.Repository.ILoggerRepository(string, System.Type)</signature>
                        <name>CreateDomain</name>
                    </method>
                    <method>
                        <signature>log4net.Repository.ILoggerRepository(System.Reflection.Assembly, System.Type)</signature>
                        <name>CreateDomain</name>
                    </method>
                    <method>
                        <signature>log4net.Repository.ILoggerRepository(System.Type)</signature>
                        <name>CreateDomain</name>
                    </method>
                    <method>
                        <signature>log4net.Repository.ILoggerRepository(string)</signature>
                        <name>CreateRepository</name>
                    </method>
                    <method>
                        <signature>log4net.Repository.ILoggerRepository(string, System.Type)</signature>
                        <name>CreateRepository</name>
                    </method>
                    <method>
                        <signature>log4net.Repository.ILoggerRepository(System.Reflection.Assembly, System.Type)</signature>
                        <name>CreateRepository</name>
                    </method>
                    <method>
                        <signature>log4net.Repository.ILoggerRepository(System.Type)</signature>
                        <name>CreateRepository</name>
                    </method>
                    <method>
                        <signature>log4net.ILog(string)</signature>
                        <name>Exists</name>
                    </method>
                    <method>
                        <signature>log4net.ILog(string, string)</signature>
                        <name>Exists</name>
                    </method>
                    <method>
                        <signature>log4net.ILog(System.Reflection.Assembly, string)</signature>
                        <name>Exists</name>
                    </method>
                    <method>
                        <signature>log4net.Repository.ILoggerRepository[]()</signature>
                        <name>GetAllRepositories</name>
                    </method>
                    <method>
                        <signature>log4net.ILog[]()</signature>
                        <name>GetCurrentLoggers</name>
                    </method>
                    <method>
                        <signature>log4net.ILog[](string)</signature>
                        <name>GetCurrentLoggers</name>
                    </method>
                    <method>
                        <signature>log4net.ILog[](System.Reflection.Assembly)</signature>
                        <name>GetCurrentLoggers</name>
                    </method>
                    <method>
                        <signature>log4net.ILog(string)</signature>
                        <name>GetLogger</name>
                    </method>
                    <method>
                        <signature>log4net.ILog(string, string)</signature>
                        <name>GetLogger</name>
                    </method>
                    <method>
                        <signature>log4net.ILog(string, System.Type)</signature>
                        <name>GetLogger</name>
                    </method>
                    <method>
                        <signature>log4net.ILog(System.Reflection.Assembly, string)</signature>
                        <name>GetLogger</name>
                    </method>
                    <method>
                        <signature>log4net.ILog(System.Reflection.Assembly, System.Type)</signature>
                        <name>GetLogger</name>
                    </method>
                    <method>
                        <signature>log4net.ILog(System.Type)</signature>
                        <name>GetLogger</name>
                    </method>
                    <method>
                        <signature>log4net.Repository.ILoggerRepository()</signature>
                        <name>GetLoggerRepository</name>
                    </method>
                    <method>
                        <signature>log4net.Repository.ILoggerRepository(string)</signature>
                        <name>GetLoggerRepository</name>
                    </method>
                    <method>
                        <signature>log4net.Repository.ILoggerRepository(System.Reflection.Assembly)</signature>
                        <name>GetLoggerRepository</name>
                    </method>
                    <method>
                        <signature>log4net.Repository.ILoggerRepository()</signature>
                        <name>GetRepository</name>
                    </method>
                    <method>
                        <signature>log4net.Repository.ILoggerRepository(string)</signature>
                        <name>GetRepository</name>
                    </method>
                    <method>
                        <signature>log4net.Repository.ILoggerRepository(System.Reflection.Assembly)</signature>
                        <name>GetRepository</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ResetConfiguration</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>ResetConfiguration</name>
                    </method>
                    <method>
                        <signature>void(System.Reflection.Assembly)</signature>
                        <name>ResetConfiguration</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Shutdown</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ShutdownRepository</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>ShutdownRepository</name>
                    </method>
                    <method>
                        <signature>void(System.Reflection.Assembly)</signature>
                        <name>ShutdownRepository</name>
                    </method>
                    <method>
                        <signature>log4net.ILog(log4net.Core.ILogger)</signature>
                        <name>WrapLogger</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>log4net.ILog[](log4net.Core.ILogger[])</signature>
                        <name>WrapLoggers</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>log4net.Core.ILoggerWrapper(log4net.Core.ILogger)</signature>
                        <name>WrapperCreationHandler</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>log4net.Core.WrapperMap</signature>
                        <name>s_wrapperMap</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>log4net.MDC</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Clear</name>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>Get</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>Remove</name>
                    </method>
                    <method>
                        <signature>void(string, string)</signature>
                        <name>Set</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>log4net.NDC</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Clear</name>
                    </method>
                    <method>
                        <signature>System.Collections.Stack()</signature>
                        <name>CloneStack</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Depth</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.Stack)</signature>
                        <name>Inherit</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>Pop</name>
                    </method>
                    <method>
                        <signature>System.IDisposable(string)</signature>
                        <name>Push</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Remove</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>SetMaxDepth</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist>
                    <property>
                        <signature>int32()</signature>
                        <name>Depth</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>log4net.ObjectRenderer.DefaultRenderer</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(log4net.ObjectRenderer.RendererMap, System.Array, System.IO.TextWriter)</signature>
                        <name>RenderArray</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(log4net.ObjectRenderer.RendererMap, System.Collections.DictionaryEntry, System.IO.TextWriter)</signature>
                        <name>RenderDictionaryEntry</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(log4net.ObjectRenderer.RendererMap, System.Collections.IEnumerator, System.IO.TextWriter)</signature>
                        <name>RenderEnumerator</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(log4net.ObjectRenderer.RendererMap, object, System.IO.TextWriter)</signature>
                        <name>RenderObject</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>log4net.ObjectRenderer.IObjectRenderer</name>
                <methodlist>
                    <method>
                        <signature>void(log4net.ObjectRenderer.RendererMap, object, System.IO.TextWriter)</signature>
                        <name>RenderObject</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>log4net.ObjectRenderer.RendererMap</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Clear</name>
                    </method>
                    <method>
                        <signature>string(object)</signature>
                        <name>FindAndRender</name>
                    </method>
                    <method>
                        <signature>void(object, System.IO.TextWriter)</signature>
                        <name>FindAndRender</name>
                    </method>
                    <method>
                        <signature>log4net.ObjectRenderer.IObjectRenderer(object)</signature>
                        <name>Get</name>
                    </method>
                    <method>
                        <signature>log4net.ObjectRenderer.IObjectRenderer(System.Type)</signature>
                        <name>Get</name>
                    </method>
                    <method>
                        <signature>log4net.ObjectRenderer.IObjectRenderer()</signature>
                        <name>get_DefaultRenderer</name>
                    </method>
                    <method>
                        <signature>void(System.Type, log4net.ObjectRenderer.IObjectRenderer)</signature>
                        <name>Put</name>
                    </method>
                    <method>
                        <signature>log4net.ObjectRenderer.IObjectRenderer(System.Type)</signature>
                        <name>SearchTypeAndInterfaces</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.Hashtable</signature>
                        <name>m_cache</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Hashtable</signature>
                        <name>m_map</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>log4net.ObjectRenderer.IObjectRenderer</signature>
                        <name>s_defaultRenderer</name>
                        <newname>c</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>log4net.ObjectRenderer.IObjectRenderer()</signature>
                        <name>DefaultRenderer</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>log4net.Plugin.IPlugin</name>
                <methodlist>
                    <method>
                        <signature>void(log4net.Repository.ILoggerRepository)</signature>
                        <name>Attach</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Name</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Shutdown</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist>
                    <property>
                        <signature>string()</signature>
                        <name>Name</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>log4net.Plugin.IPluginFactory</name>
                <methodlist>
                    <method>
                        <signature>log4net.Plugin.IPlugin()</signature>
                        <name>CreatePlugin</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>log4net.Plugin.PluginCollection</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(log4net.Plugin.IPlugin[])</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(log4net.Plugin.PluginCollection)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(log4net.Plugin.PluginCollection/Tag)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.ICollection)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>int32(log4net.Plugin.IPlugin)</signature>
                        <name>Add</name>
                    </method>
                    <method>
                        <signature>int32(log4net.Plugin.IPlugin[])</signature>
                        <name>AddRange</name>
                    </method>
                    <method>
                        <signature>int32(log4net.Plugin.PluginCollection)</signature>
                        <name>AddRange</name>
                    </method>
                    <method>
                        <signature>int32(System.Collections.ICollection)</signature>
                        <name>AddRange</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Clear</name>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>Clone</name>
                    </method>
                    <method>
                        <signature>bool(log4net.Plugin.IPlugin)</signature>
                        <name>Contains</name>
                    </method>
                    <method>
                        <signature>void(log4net.Plugin.IPlugin[])</signature>
                        <name>CopyTo</name>
                    </method>
                    <method>
                        <signature>void(log4net.Plugin.IPlugin[], int32)</signature>
                        <name>CopyTo</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>EnsureCapacity</name>
                        <newname>h</newname>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Capacity</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Count</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsFixedSize</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsReadOnly</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsSynchronized</name>
                    </method>
                    <method>
                        <signature>log4net.Plugin.IPlugin(int32)</signature>
                        <name>get_Item</name>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>get_SyncRoot</name>
                    </method>
                    <method>
                        <signature>log4net.Plugin.PluginCollection/IPluginCollectionEnumerator()</signature>
                        <name>GetEnumerator</name>
                    </method>
                    <method>
                        <signature>int32(log4net.Plugin.IPlugin)</signature>
                        <name>IndexOf</name>
                    </method>
                    <method>
                        <signature>void(int32, log4net.Plugin.IPlugin)</signature>
                        <name>Insert</name>
                    </method>
                    <method>
                        <signature>log4net.Plugin.PluginCollection(log4net.Plugin.PluginCollection)</signature>
                        <name>ReadOnly</name>
                    </method>
                    <method>
                        <signature>void(log4net.Plugin.IPlugin)</signature>
                        <name>Remove</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>RemoveAt</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_Capacity</name>
                    </method>
                    <method>
                        <signature>void(int32, log4net.Plugin.IPlugin)</signature>
                        <name>set_Item</name>
                    </method>
                    <method>
                        <signature>void(System.Array, int32)</signature>
                        <name>System.Collections.ICollection.CopyTo</name>
                    </method>
                    <method>
                        <signature>System.Collections.IEnumerator()</signature>
                        <name>System.Collections.IEnumerable.GetEnumerator</name>
                    </method>
                    <method>
                        <signature>int32(object)</signature>
                        <name>System.Collections.IList.Add</name>
                    </method>
                    <method>
                        <signature>bool(object)</signature>
                        <name>System.Collections.IList.Contains</name>
                    </method>
                    <method>
                        <signature>object(int32)</signature>
                        <name>System.Collections.IList.get_Item</name>
                    </method>
                    <method>
                        <signature>int32(object)</signature>
                        <name>System.Collections.IList.IndexOf</name>
                    </method>
                    <method>
                        <signature>void(int32, object)</signature>
                        <name>System.Collections.IList.Insert</name>
                    </method>
                    <method>
                        <signature>void(object)</signature>
                        <name>System.Collections.IList.Remove</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>System.Collections.IList.RemoveAt</name>
                    </method>
                    <method>
                        <signature>void(int32, object)</signature>
                        <name>System.Collections.IList.set_Item</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>TrimToSize</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>ValidateIndex</name>
                        <newname>i</newname>
                    </method>
                    <method>
                        <signature>void(int32, bool)</signature>
                        <name>ValidateIndex</name>
                        <newname>h</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>DEFAULT_CAPACITY</name>
                        <newname>h</newname>
                    </field>
                    <field>
                        <signature>log4net.Plugin.IPlugin[]</signature>
                        <name>m_array</name>
                        <newname>i</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>m_count</name>
                        <newname>j</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>m_version</name>
                        <newname>k</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>int32()</signature>
                        <name>Capacity</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>Count</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>IsFixedSize</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>IsReadOnly</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>IsSynchronized</name>
                    </property>
                    <property>
                        <signature>log4net.Plugin.IPlugin(int32)</signature>
                        <name>Item</name>
                    </property>
                    <property>
                        <signature>object()</signature>
                        <name>SyncRoot</name>
                    </property>
                    <property>
                        <signature>object(int32)</signature>
                        <name>System.Collections.IList.Item</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>log4net.Plugin.PluginCollection/Enumerator</name>
                <newname>log4net.Plugin.PluginCollection/b</newname>
                <methodlist>
                    <method>
                        <signature>void(log4net.Plugin.PluginCollection)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>log4net.Plugin.IPlugin()</signature>
                        <name>get_Current</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>MoveNext</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Reset</name>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>System.Collections.IEnumerator.get_Current</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>log4net.Plugin.PluginCollection</signature>
                        <name>m_collection</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>m_index</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>m_version</name>
                        <newname>c</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>log4net.Plugin.PluginCollection/IPluginCollectionEnumerator</name>
                <methodlist>
                    <method>
                        <signature>log4net.Plugin.IPlugin()</signature>
                        <name>get_Current</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>MoveNext</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Reset</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist>
                    <property>
                        <signature>log4net.Plugin.IPlugin()</signature>
                        <name>Current</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>log4net.Plugin.PluginCollection/ReadOnlyPluginCollection</name>
                <newname>log4net.Plugin.PluginCollection/a</newname>
                <methodlist>
                    <method>
                        <signature>void(log4net.Plugin.PluginCollection)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>int32(log4net.Plugin.IPlugin)</signature>
                        <name>Add</name>
                    </method>
                    <method>
                        <signature>int32(log4net.Plugin.IPlugin[])</signature>
                        <name>AddRange</name>
                    </method>
                    <method>
                        <signature>int32(log4net.Plugin.PluginCollection)</signature>
                        <name>AddRange</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Clear</name>
                    </method>
                    <method>
                        <signature>bool(log4net.Plugin.IPlugin)</signature>
                        <name>Contains</name>
                    </method>
                    <method>
                        <signature>void(log4net.Plugin.IPlugin[])</signature>
                        <name>CopyTo</name>
                    </method>
                    <method>
                        <signature>void(log4net.Plugin.IPlugin[], int32)</signature>
                        <name>CopyTo</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Capacity</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Count</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsFixedSize</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsReadOnly</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsSynchronized</name>
                    </method>
                    <method>
                        <signature>log4net.Plugin.IPlugin(int32)</signature>
                        <name>get_Item</name>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>get_SyncRoot</name>
                    </method>
                    <method>
                        <signature>log4net.Plugin.PluginCollection/IPluginCollectionEnumerator()</signature>
                        <name>GetEnumerator</name>
                    </method>
                    <method>
                        <signature>int32(log4net.Plugin.IPlugin)</signature>
                        <name>IndexOf</name>
                    </method>
                    <method>
                        <signature>void(int32, log4net.Plugin.IPlugin)</signature>
                        <name>Insert</name>
                    </method>
                    <method>
                        <signature>void(log4net.Plugin.IPlugin)</signature>
                        <name>Remove</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>RemoveAt</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_Capacity</name>
                    </method>
                    <method>
                        <signature>void(int32, log4net.Plugin.IPlugin)</signature>
                        <name>set_Item</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>log4net.Plugin.PluginCollection</signature>
                        <name>m_collection</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>log4net.Plugin.PluginCollection/Tag</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>log4net.Plugin.PluginCollection/Tag</signature>
                        <name>Default</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>log4net.Plugin.PluginMap</name>
                <methodlist>
                    <method>
                        <signature>void(log4net.Repository.ILoggerRepository)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(log4net.Plugin.IPlugin)</signature>
                        <name>Add</name>
                    </method>
                    <method>
                        <signature>log4net.Plugin.PluginCollection()</signature>
                        <name>get_AllPlugins</name>
                    </method>
                    <method>
                        <signature>log4net.Plugin.IPlugin(string)</signature>
                        <name>get_Item</name>
                    </method>
                    <method>
                        <signature>void(log4net.Plugin.IPlugin)</signature>
                        <name>Remove</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.Hashtable</signature>
                        <name>m_mapName2Plugin</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>log4net.Repository.ILoggerRepository</signature>
                        <name>m_repository</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>log4net.Plugin.PluginCollection()</signature>
                        <name>AllPlugins</name>
                    </property>
                    <property>
                        <signature>log4net.Plugin.IPlugin(string)</signature>
                        <name>Item</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>log4net.Plugin.PluginSkeleton</name>
                <methodlist>
                    <method>
                        <signature>void(string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(log4net.Repository.ILoggerRepository)</signature>
                        <name>Attach</name>
                    </method>
                    <method>
                        <signature>log4net.Repository.ILoggerRepository()</signature>
                        <name>get_LoggerRepository</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Name</name>
                    </method>
                    <method>
                        <signature>void(log4net.Repository.ILoggerRepository)</signature>
                        <name>set_LoggerRepository</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Name</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Shutdown</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>m_name</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>log4net.Repository.ILoggerRepository</signature>
                        <name>m_repository</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>log4net.Repository.ILoggerRepository()</signature>
                        <name>LoggerRepository</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>Name</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>log4net.Plugin.RemoteLoggingServerPlugin</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(log4net.Repository.ILoggerRepository)</signature>
                        <name>Attach</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_SinkUri</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_SinkUri</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Shutdown</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>log4net.Plugin.RemoteLoggingServerPlugin/RemoteLoggingSinkImpl</signature>
                        <name>m_sink</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>m_sinkUri</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>string()</signature>
                        <name>SinkUri</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>log4net.Plugin.RemoteLoggingServerPlugin/RemoteLoggingSinkImpl</name>
                <newname>log4net.Plugin.RemoteLoggingServerPlugin/a</newname>
                <methodlist>
                    <method>
                        <signature>void(log4net.Repository.ILoggerRepository)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>InitializeLifetimeService</name>
                    </method>
                    <method>
                        <signature>void(log4net.Core.LoggingEvent[])</signature>
                        <name>LogEvents</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>log4net.Repository.ILoggerRepository</signature>
                        <name>m_repository</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>log4net.Repository.Hierarchy.DefaultLoggerFactory</name>
                <newname>o</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>log4net.Repository.Hierarchy.Logger(string)</signature>
                        <name>CreateLogger</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>log4net.Repository.Hierarchy.DefaultLoggerFactory/LoggerImpl</name>
                <newname>o/a</newname>
                <methodlist>
                    <method>
                        <signature>void(string)</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>log4net.Repository.Hierarchy.Hierarchy</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(log4net.Repository.Hierarchy.ILoggerFactory)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(log4net.Util.PropertiesDictionary)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(log4net.Util.PropertiesDictionary, log4net.Repository.Hierarchy.ILoggerFactory)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(log4net.Repository.Hierarchy.LoggerCreationEventHandler)</signature>
                        <name>add_LoggerCreatedEvent</name>
                    </method>
                    <method>
                        <signature>void(log4net.Repository.Hierarchy.LoggerCreationEventHandler)</signature>
                        <name>add_m_loggerCreatedEvent</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(log4net.Repository.Hierarchy.Hierarchy/LevelEntry)</signature>
                        <name>AddLevel</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(log4net.Repository.Hierarchy.Hierarchy/PropertyEntry)</signature>
                        <name>AddProperty</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(log4net.Appender.IAppender)</signature>
                        <name>BasicRepositoryConfigure</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Clear</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.ArrayList, log4net.Appender.IAppender)</signature>
                        <name>CollectAppender</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.Collections.ArrayList, log4net.Core.IAppenderAttachable)</signature>
                        <name>CollectAppenders</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>log4net.Core.ILogger(string)</signature>
                        <name>Exists</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_EmittedNoAppenderWarning</name>
                    </method>
                    <method>
                        <signature>log4net.Repository.Hierarchy.ILoggerFactory()</signature>
                        <name>get_LoggerFactory</name>
                    </method>
                    <method>
                        <signature>log4net.Repository.Hierarchy.Logger()</signature>
                        <name>get_Root</name>
                    </method>
                    <method>
                        <signature>log4net.Appender.IAppender[]()</signature>
                        <name>GetAppenders</name>
                    </method>
                    <method>
                        <signature>log4net.Core.ILogger[]()</signature>
                        <name>GetCurrentLoggers</name>
                    </method>
                    <method>
                        <signature>log4net.Core.ILogger(string)</signature>
                        <name>GetLogger</name>
                    </method>
                    <method>
                        <signature>log4net.Repository.Hierarchy.Logger(string, log4net.Repository.Hierarchy.ILoggerFactory)</signature>
                        <name>GetLogger</name>
                    </method>
                    <method>
                        <signature>bool(log4net.Core.Level)</signature>
                        <name>IsDisabled</name>
                    </method>
                    <method>
                        <signature>void(log4net.Core.LoggingEvent)</signature>
                        <name>Log</name>
                    </method>
                    <method>
                        <signature>void(log4net.Appender.IAppender)</signature>
                        <name>log4net.Repository.IBasicRepositoryConfigurator.Configure</name>
                    </method>
                    <method>
                        <signature>void(System.Xml.XmlElement)</signature>
                        <name>log4net.Repository.IXmlRepositoryConfigurator.Configure</name>
                    </method>
                    <method>
                        <signature>void(log4net.Repository.Hierarchy.Logger)</signature>
                        <name>OnLoggerCreationEvent</name>
                    </method>
                    <method>
                        <signature>void(log4net.Repository.Hierarchy.LoggerCreationEventHandler)</signature>
                        <name>remove_LoggerCreatedEvent</name>
                    </method>
                    <method>
                        <signature>void(log4net.Repository.Hierarchy.LoggerCreationEventHandler)</signature>
                        <name>remove_m_loggerCreatedEvent</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ResetConfiguration</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_EmittedNoAppenderWarning</name>
                    </method>
                    <method>
                        <signature>void(log4net.Repository.Hierarchy.ILoggerFactory)</signature>
                        <name>set_LoggerFactory</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Shutdown</name>
                    </method>
                    <method>
                        <signature>void(log4net.Repository.Hierarchy.ProvisionNode, log4net.Repository.Hierarchy.Logger)</signature>
                        <name>UpdateChildren</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(log4net.Repository.Hierarchy.Logger)</signature>
                        <name>UpdateParents</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.Xml.XmlElement)</signature>
                        <name>XmlRepositoryConfigure</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>log4net.Repository.Hierarchy.ILoggerFactory</signature>
                        <name>m_defaultFactory</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>m_emittedNoAppenderWarning</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Hashtable</signature>
                        <name>m_ht</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>log4net.Repository.Hierarchy.LoggerCreationEventHandler</signature>
                        <name>m_loggerCreatedEvent</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>log4net.Repository.Hierarchy.Logger</signature>
                        <name>m_root</name>
                        <newname>c</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>bool()</signature>
                        <name>EmittedNoAppenderWarning</name>
                    </property>
                    <property>
                        <signature>log4net.Repository.Hierarchy.ILoggerFactory()</signature>
                        <name>LoggerFactory</name>
                    </property>
                    <property>
                        <signature>log4net.Repository.Hierarchy.Logger()</signature>
                        <name>Root</name>
                    </property>
                </propertylist>
                <eventlist>
                    <event>
                        <signature>log4net.Repository.Hierarchy.LoggerCreationEventHandler</signature>
                        <name>LoggerCreatedEvent</name>
                    </event>
                    <event>
                        <signature>log4net.Repository.Hierarchy.LoggerCreationEventHandler</signature>
                        <name>m_loggerCreatedEvent</name>
                    </event>
                </eventlist>
            </type>
            <type>
                <name>log4net.Repository.Hierarchy.Hierarchy/LevelEntry</name>
                <newname>log4net.Repository.Hierarchy.Hierarchy/b</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_DisplayName</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Name</name>
                        <newname>e</newname>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Value</name>
                        <newname>f</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_DisplayName</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Name</name>
                        <newname>e</newname>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_Value</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ToString</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>m_levelDisplayName</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>m_levelName</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>m_levelValue</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>log4net.Repository.Hierarchy.Hierarchy/PropertyEntry</name>
                <newname>log4net.Repository.Hierarchy.Hierarchy/a</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Key</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>get_Value</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Key</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>void(object)</signature>
                        <name>set_Value</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ToString</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>m_key</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>object</signature>
                        <name>m_value</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>log4net.Repository.Hierarchy.ILoggerFactory</name>
                <methodlist>
                    <method>
                        <signature>log4net.Repository.Hierarchy.Logger(string)</signature>
                        <name>CreateLogger</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>log4net.Repository.Hierarchy.Logger</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(log4net.Appender.IAppender)</signature>
                        <name>AddAppender</name>
                    </method>
                    <method>
                        <signature>void(log4net.Core.LoggingEvent)</signature>
                        <name>CallAppenders</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>CloseNestedAppenders</name>
                    </method>
                    <method>
                        <signature>void(log4net.Core.LoggingEvent)</signature>
                        <name>ForcedLog</name>
                    </method>
                    <method>
                        <signature>void(System.Type, log4net.Core.Level, object, System.Exception)</signature>
                        <name>ForcedLog</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_Additivity</name>
                    </method>
                    <method>
                        <signature>log4net.Appender.AppenderCollection()</signature>
                        <name>get_Appenders</name>
                    </method>
                    <method>
                        <signature>log4net.Core.Level()</signature>
                        <name>get_EffectiveLevel</name>
                    </method>
                    <method>
                        <signature>log4net.Repository.Hierarchy.Hierarchy()</signature>
                        <name>get_Hierarchy</name>
                    </method>
                    <method>
                        <signature>log4net.Core.Level()</signature>
                        <name>get_Level</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Name</name>
                    </method>
                    <method>
                        <signature>log4net.Repository.Hierarchy.Logger()</signature>
                        <name>get_Parent</name>
                    </method>
                    <method>
                        <signature>log4net.Repository.ILoggerRepository()</signature>
                        <name>get_Repository</name>
                    </method>
                    <method>
                        <signature>log4net.Appender.IAppender(string)</signature>
                        <name>GetAppender</name>
                    </method>
                    <method>
                        <signature>bool(log4net.Core.Level)</signature>
                        <name>IsEnabledFor</name>
                    </method>
                    <method>
                        <signature>void(log4net.Core.Level, object, System.Exception)</signature>
                        <name>Log</name>
                    </method>
                    <method>
                        <signature>void(log4net.Core.LoggingEvent)</signature>
                        <name>Log</name>
                    </method>
                    <method>
                        <signature>void(System.Type, log4net.Core.Level, object, System.Exception)</signature>
                        <name>Log</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>RemoveAllAppenders</name>
                    </method>
                    <method>
                        <signature>log4net.Appender.IAppender(log4net.Appender.IAppender)</signature>
                        <name>RemoveAppender</name>
                    </method>
                    <method>
                        <signature>log4net.Appender.IAppender(string)</signature>
                        <name>RemoveAppender</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_Additivity</name>
                    </method>
                    <method>
                        <signature>void(log4net.Repository.Hierarchy.Hierarchy)</signature>
                        <name>set_Hierarchy</name>
                    </method>
                    <method>
                        <signature>void(log4net.Core.Level)</signature>
                        <name>set_Level</name>
                    </method>
                    <method>
                        <signature>void(log4net.Repository.Hierarchy.Logger)</signature>
                        <name>set_Parent</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>bool</signature>
                        <name>m_additive</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>log4net.Util.AppenderAttachedImpl</signature>
                        <name>m_appenderAttachedImpl</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>log4net.Util.ReaderWriterLock</signature>
                        <name>m_appenderLock</name>
                        <newname>h</newname>
                    </field>
                    <field>
                        <signature>log4net.Repository.Hierarchy.Hierarchy</signature>
                        <name>m_hierarchy</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>log4net.Core.Level</signature>
                        <name>m_level</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>m_name</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>log4net.Repository.Hierarchy.Logger</signature>
                        <name>m_parent</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>System.Type</signature>
                        <name>ThisDeclaringType</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>bool()</signature>
                        <name>Additivity</name>
                    </property>
                    <property>
                        <signature>log4net.Appender.AppenderCollection()</signature>
                        <name>Appenders</name>
                    </property>
                    <property>
                        <signature>log4net.Core.Level()</signature>
                        <name>EffectiveLevel</name>
                    </property>
                    <property>
                        <signature>log4net.Repository.Hierarchy.Hierarchy()</signature>
                        <name>Hierarchy</name>
                    </property>
                    <property>
                        <signature>log4net.Core.Level()</signature>
                        <name>Level</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>Name</name>
                    </property>
                    <property>
                        <signature>log4net.Repository.Hierarchy.Logger()</signature>
                        <name>Parent</name>
                    </property>
                    <property>
                        <signature>log4net.Repository.ILoggerRepository()</signature>
                        <name>Repository</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>log4net.Repository.Hierarchy.LoggerCreationEventArgs</name>
                <methodlist>
                    <method>
                        <signature>void(log4net.Repository.Hierarchy.Logger)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>log4net.Repository.Hierarchy.Logger()</signature>
                        <name>get_Logger</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>log4net.Repository.Hierarchy.Logger</signature>
                        <name>m_log</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>log4net.Repository.Hierarchy.Logger()</signature>
                        <name>Logger</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>log4net.Repository.Hierarchy.LoggerCreationEventHandler</name>
                <methodlist>
                    <method>
                        <signature>void(object, native int)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.IAsyncResult(object, log4net.Repository.Hierarchy.LoggerCreationEventArgs, System.AsyncCallback, object)</signature>
                        <name>BeginInvoke</name>
                    </method>
                    <method>
                        <signature>void(System.IAsyncResult)</signature>
                        <name>EndInvoke</name>
                    </method>
                    <method>
                        <signature>void(object, log4net.Repository.Hierarchy.LoggerCreationEventArgs)</signature>
                        <name>Invoke</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>log4net.Repository.Hierarchy.LoggerKey</name>
                <newname>ak</newname>
                <methodlist>
                    <method>
                        <signature>void(string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(object)</signature>
                        <name>Equals</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>GetHashCode</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>m_hashCache</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>m_name</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>log4net.Repository.Hierarchy.ProvisionNode</name>
                <newname>k</newname>
                <methodlist>
                    <method>
                        <signature>void(log4net.Repository.Hierarchy.Logger)</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>log4net.Repository.Hierarchy.RootLogger</name>
                <methodlist>
                    <method>
                        <signature>void(log4net.Core.Level)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>log4net.Core.Level()</signature>
                        <name>get_EffectiveLevel</name>
                    </method>
                    <method>
                        <signature>log4net.Core.Level()</signature>
                        <name>get_Level</name>
                    </method>
                    <method>
                        <signature>void(log4net.Core.Level)</signature>
                        <name>set_Level</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist>
                    <property>
                        <signature>log4net.Core.Level()</signature>
                        <name>EffectiveLevel</name>
                    </property>
                    <property>
                        <signature>log4net.Core.Level()</signature>
                        <name>Level</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>log4net.Repository.Hierarchy.XmlHierarchyConfigurator</name>
                <methodlist>
                    <method>
                        <signature>void(log4net.Repository.Hierarchy.Hierarchy)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.Xml.XmlElement)</signature>
                        <name>Configure</name>
                    </method>
                    <method>
                        <signature>object(System.Type, string)</signature>
                        <name>ConvertStringTo</name>
                    </method>
                    <method>
                        <signature>object(System.Xml.XmlElement, System.Type, System.Type)</signature>
                        <name>CreateObjectFromXml</name>
                    </method>
                    <method>
                        <signature>log4net.Appender.IAppender(System.Xml.XmlElement)</signature>
                        <name>FindAppenderByReference</name>
                    </method>
                    <method>
                        <signature>System.Reflection.MethodInfo(System.Type, string)</signature>
                        <name>FindMethodInfo</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(System.Xml.XmlElement)</signature>
                        <name>HasAttributesOrElements</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(System.Type)</signature>
                        <name>IsTypeConstructible</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>log4net.Appender.IAppender(System.Xml.XmlElement)</signature>
                        <name>ParseAppender</name>
                    </method>
                    <method>
                        <signature>void(System.Xml.XmlElement, log4net.Repository.Hierarchy.Logger, bool)</signature>
                        <name>ParseChildrenOfLoggerElement</name>
                    </method>
                    <method>
                        <signature>void(System.Xml.XmlElement, log4net.Repository.Hierarchy.Logger, bool)</signature>
                        <name>ParseLevel</name>
                    </method>
                    <method>
                        <signature>void(System.Xml.XmlElement)</signature>
                        <name>ParseLogger</name>
                    </method>
                    <method>
                        <signature>void(System.Xml.XmlElement)</signature>
                        <name>ParseRenderer</name>
                    </method>
                    <method>
                        <signature>void(System.Xml.XmlElement)</signature>
                        <name>ParseRoot</name>
                    </method>
                    <method>
                        <signature>void(System.Xml.XmlElement, object)</signature>
                        <name>SetParameter</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>ADDITIVITY_ATTR</name>
                        <newname>o</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>APPENDER_REF_TAG</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>APPENDER_TAG</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>CATEGORY_TAG</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>CONFIG_DEBUG_ATTR</name>
                        <newname>q</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>CONFIG_UPDATE_MODE_ATTR</name>
                        <newname>s</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>CONFIGURATION_TAG</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>INHERITED</name>
                        <newname>v</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>INTERNAL_DEBUG_ATTR</name>
                        <newname>r</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>LEVEL_TAG</name>
                        <newname>m</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>LOGGER_TAG</name>
                        <newname>h</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Hashtable</signature>
                        <name>m_appenderBag</name>
                        <newname>w</newname>
                    </field>
                    <field>
                        <signature>log4net.Repository.Hierarchy.Hierarchy</signature>
                        <name>m_hierarchy</name>
                        <newname>x</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>NAME_ATTR</name>
                        <newname>i</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>PARAM_TAG</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>PRIORITY_TAG</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>REF_ATTR</name>
                        <newname>n</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>RENDERED_TYPE_ATTR</name>
                        <newname>u</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>RENDERER_TAG</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>RENDERING_TYPE_ATTR</name>
                        <newname>t</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>ROOT_TAG</name>
                        <newname>l</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>THRESHOLD_ATTR</name>
                        <newname>p</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>TYPE_ATTR</name>
                        <newname>j</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>VALUE_ATTR</name>
                        <newname>k</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>log4net.Repository.Hierarchy.XmlHierarchyConfigurator/ConfigUpdateMode</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>log4net.Repository.Hierarchy.XmlHierarchyConfigurator/ConfigUpdateMode</signature>
                        <name>Merge</name>
                    </field>
                    <field>
                        <signature>log4net.Repository.Hierarchy.XmlHierarchyConfigurator/ConfigUpdateMode</signature>
                        <name>Overwrite</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>log4net.Repository.IBasicRepositoryConfigurator</name>
                <methodlist>
                    <method>
                        <signature>void(log4net.Appender.IAppender)</signature>
                        <name>Configure</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>log4net.Repository.ILoggerRepository</name>
                <methodlist>
                    <method>
                        <signature>void(log4net.Repository.LoggerRepositoryConfigurationChangedEventHandler)</signature>
                        <name>add_ConfigurationChanged</name>
                    </method>
                    <method>
                        <signature>void(log4net.Repository.LoggerRepositoryConfigurationResetEventHandler)</signature>
                        <name>add_ConfigurationReset</name>
                    </method>
                    <method>
                        <signature>void(log4net.Repository.LoggerRepositoryShutdownEventHandler)</signature>
                        <name>add_ShutdownEvent</name>
                    </method>
                    <method>
                        <signature>log4net.Core.ILogger(string)</signature>
                        <name>Exists</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_Configured</name>
                    </method>
                    <method>
                        <signature>log4net.Core.LevelMap()</signature>
                        <name>get_LevelMap</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Name</name>
                    </method>
                    <method>
                        <signature>log4net.Plugin.PluginMap()</signature>
                        <name>get_PluginMap</name>
                    </method>
                    <method>
                        <signature>log4net.Util.PropertiesDictionary()</signature>
                        <name>get_Properties</name>
                    </method>
                    <method>
                        <signature>log4net.ObjectRenderer.RendererMap()</signature>
                        <name>get_RendererMap</name>
                    </method>
                    <method>
                        <signature>log4net.Core.Level()</signature>
                        <name>get_Threshold</name>
                    </method>
                    <method>
                        <signature>log4net.Appender.IAppender[]()</signature>
                        <name>GetAppenders</name>
                    </method>
                    <method>
                        <signature>log4net.Core.ILogger[]()</signature>
                        <name>GetCurrentLoggers</name>
                    </method>
                    <method>
                        <signature>log4net.Core.ILogger(string)</signature>
                        <name>GetLogger</name>
                    </method>
                    <method>
                        <signature>void(log4net.Core.LoggingEvent)</signature>
                        <name>Log</name>
                    </method>
                    <method>
                        <signature>void(log4net.Repository.LoggerRepositoryConfigurationChangedEventHandler)</signature>
                        <name>remove_ConfigurationChanged</name>
                    </method>
                    <method>
                        <signature>void(log4net.Repository.LoggerRepositoryConfigurationResetEventHandler)</signature>
                        <name>remove_ConfigurationReset</name>
                    </method>
                    <method>
                        <signature>void(log4net.Repository.LoggerRepositoryShutdownEventHandler)</signature>
                        <name>remove_ShutdownEvent</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ResetConfiguration</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_Configured</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Name</name>
                    </method>
                    <method>
                        <signature>void(log4net.Core.Level)</signature>
                        <name>set_Threshold</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Shutdown</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist>
                    <property>
                        <signature>bool()</signature>
                        <name>Configured</name>
                    </property>
                    <property>
                        <signature>log4net.Core.LevelMap()</signature>
                        <name>LevelMap</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>Name</name>
                    </property>
                    <property>
                        <signature>log4net.Plugin.PluginMap()</signature>
                        <name>PluginMap</name>
                    </property>
                    <property>
                        <signature>log4net.Util.PropertiesDictionary()</signature>
                        <name>Properties</name>
                    </property>
                    <property>
                        <signature>log4net.ObjectRenderer.RendererMap()</signature>
                        <name>RendererMap</name>
                    </property>
                    <property>
                        <signature>log4net.Core.Level()</signature>
                        <name>Threshold</name>
                    </property>
                </propertylist>
                <eventlist>
                    <event>
                        <signature>log4net.Repository.LoggerRepositoryConfigurationChangedEventHandler</signature>
                        <name>ConfigurationChanged</name>
                    </event>
                    <event>
                        <signature>log4net.Repository.LoggerRepositoryConfigurationResetEventHandler</signature>
                        <name>ConfigurationReset</name>
                    </event>
                    <event>
                        <signature>log4net.Repository.LoggerRepositoryShutdownEventHandler</signature>
                        <name>ShutdownEvent</name>
                    </event>
                </eventlist>
            </type>
            <type>
                <name>log4net.Repository.IXmlRepositoryConfigurator</name>
                <methodlist>
                    <method>
                        <signature>void(System.Xml.XmlElement)</signature>
                        <name>Configure</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>log4net.Repository.LoggerRepositoryConfigurationChangedEventHandler</name>
                <methodlist>
                    <method>
                        <signature>void(object, native int)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.IAsyncResult(object, System.EventArgs, System.AsyncCallback, object)</signature>
                        <name>BeginInvoke</name>
                    </method>
                    <method>
                        <signature>void(System.IAsyncResult)</signature>
                        <name>EndInvoke</name>
                    </method>
                    <method>
                        <signature>void(object, System.EventArgs)</signature>
                        <name>Invoke</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>log4net.Repository.LoggerRepositoryConfigurationResetEventHandler</name>
                <methodlist>
                    <method>
                        <signature>void(object, native int)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.IAsyncResult(object, System.EventArgs, System.AsyncCallback, object)</signature>
                        <name>BeginInvoke</name>
                    </method>
                    <method>
                        <signature>void(System.IAsyncResult)</signature>
                        <name>EndInvoke</name>
                    </method>
                    <method>
                        <signature>void(object, System.EventArgs)</signature>
                        <name>Invoke</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>log4net.Repository.LoggerRepositoryShutdownEventHandler</name>
                <methodlist>
                    <method>
                        <signature>void(object, native int)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.IAsyncResult(object, System.EventArgs, System.AsyncCallback, object)</signature>
                        <name>BeginInvoke</name>
                    </method>
                    <method>
                        <signature>void(System.IAsyncResult)</signature>
                        <name>EndInvoke</name>
                    </method>
                    <method>
                        <signature>void(object, System.EventArgs)</signature>
                        <name>Invoke</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>log4net.Repository.LoggerRepositorySkeleton</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(log4net.Util.PropertiesDictionary)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(log4net.Repository.LoggerRepositoryConfigurationChangedEventHandler)</signature>
                        <name>add_ConfigurationChanged</name>
                    </method>
                    <method>
                        <signature>void(log4net.Repository.LoggerRepositoryConfigurationResetEventHandler)</signature>
                        <name>add_ConfigurationReset</name>
                    </method>
                    <method>
                        <signature>void(log4net.Repository.LoggerRepositoryConfigurationChangedEventHandler)</signature>
                        <name>add_m_configurationChangedEvent</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(log4net.Repository.LoggerRepositoryConfigurationResetEventHandler)</signature>
                        <name>add_m_configurationResetEvent</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(log4net.Repository.LoggerRepositoryShutdownEventHandler)</signature>
                        <name>add_m_shutdownEvent</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(log4net.Repository.LoggerRepositoryShutdownEventHandler)</signature>
                        <name>add_ShutdownEvent</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>AddBuiltinLevels</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.Type, log4net.ObjectRenderer.IObjectRenderer)</signature>
                        <name>AddRenderer</name>
                    </method>
                    <method>
                        <signature>log4net.Core.ILogger(string)</signature>
                        <name>Exists</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_Configured</name>
                    </method>
                    <method>
                        <signature>log4net.Core.LevelMap()</signature>
                        <name>get_LevelMap</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Name</name>
                    </method>
                    <method>
                        <signature>log4net.Plugin.PluginMap()</signature>
                        <name>get_PluginMap</name>
                    </method>
                    <method>
                        <signature>log4net.Util.PropertiesDictionary()</signature>
                        <name>get_Properties</name>
                    </method>
                    <method>
                        <signature>log4net.ObjectRenderer.RendererMap()</signature>
                        <name>get_RendererMap</name>
                    </method>
                    <method>
                        <signature>log4net.Core.Level()</signature>
                        <name>get_Threshold</name>
                    </method>
                    <method>
                        <signature>log4net.Appender.IAppender[]()</signature>
                        <name>GetAppenders</name>
                    </method>
                    <method>
                        <signature>log4net.Core.ILogger[]()</signature>
                        <name>GetCurrentLoggers</name>
                    </method>
                    <method>
                        <signature>log4net.Core.ILogger(string)</signature>
                        <name>GetLogger</name>
                    </method>
                    <method>
                        <signature>void(log4net.Core.LoggingEvent)</signature>
                        <name>Log</name>
                    </method>
                    <method>
                        <signature>void(System.EventArgs)</signature>
                        <name>OnConfigurationChanged</name>
                    </method>
                    <method>
                        <signature>void(System.EventArgs)</signature>
                        <name>OnConfigurationReset</name>
                    </method>
                    <method>
                        <signature>void(System.EventArgs)</signature>
                        <name>OnShutdown</name>
                    </method>
                    <method>
                        <signature>void(System.EventArgs)</signature>
                        <name>RaiseConfigurationChanged</name>
                    </method>
                    <method>
                        <signature>void(log4net.Repository.LoggerRepositoryConfigurationChangedEventHandler)</signature>
                        <name>remove_ConfigurationChanged</name>
                    </method>
                    <method>
                        <signature>void(log4net.Repository.LoggerRepositoryConfigurationResetEventHandler)</signature>
                        <name>remove_ConfigurationReset</name>
                    </method>
                    <method>
                        <signature>void(log4net.Repository.LoggerRepositoryConfigurationChangedEventHandler)</signature>
                        <name>remove_m_configurationChangedEvent</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(log4net.Repository.LoggerRepositoryConfigurationResetEventHandler)</signature>
                        <name>remove_m_configurationResetEvent</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(log4net.Repository.LoggerRepositoryShutdownEventHandler)</signature>
                        <name>remove_m_shutdownEvent</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(log4net.Repository.LoggerRepositoryShutdownEventHandler)</signature>
                        <name>remove_ShutdownEvent</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ResetConfiguration</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_Configured</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Name</name>
                    </method>
                    <method>
                        <signature>void(log4net.Core.Level)</signature>
                        <name>set_Threshold</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Shutdown</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>log4net.Repository.LoggerRepositoryConfigurationChangedEventHandler</signature>
                        <name>m_configurationChangedEvent</name>
                        <newname>i</newname>
                    </field>
                    <field>
                        <signature>log4net.Repository.LoggerRepositoryConfigurationResetEventHandler</signature>
                        <name>m_configurationResetEvent</name>
                        <newname>h</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>m_configured</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>log4net.Core.LevelMap</signature>
                        <name>m_levelMap</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>m_name</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>log4net.Plugin.PluginMap</signature>
                        <name>m_pluginMap</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>log4net.Util.PropertiesDictionary</signature>
                        <name>m_properties</name>
                        <newname>j</newname>
                    </field>
                    <field>
                        <signature>log4net.ObjectRenderer.RendererMap</signature>
                        <name>m_rendererMap</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>log4net.Repository.LoggerRepositoryShutdownEventHandler</signature>
                        <name>m_shutdownEvent</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>log4net.Core.Level</signature>
                        <name>m_threshold</name>
                        <newname>e</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>bool()</signature>
                        <name>Configured</name>
                    </property>
                    <property>
                        <signature>log4net.Core.LevelMap()</signature>
                        <name>LevelMap</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>Name</name>
                    </property>
                    <property>
                        <signature>log4net.Plugin.PluginMap()</signature>
                        <name>PluginMap</name>
                    </property>
                    <property>
                        <signature>log4net.Util.PropertiesDictionary()</signature>
                        <name>Properties</name>
                    </property>
                    <property>
                        <signature>log4net.ObjectRenderer.RendererMap()</signature>
                        <name>RendererMap</name>
                    </property>
                    <property>
                        <signature>log4net.Core.Level()</signature>
                        <name>Threshold</name>
                    </property>
                </propertylist>
                <eventlist>
                    <event>
                        <signature>log4net.Repository.LoggerRepositoryConfigurationChangedEventHandler</signature>
                        <name>ConfigurationChanged</name>
                    </event>
                    <event>
                        <signature>log4net.Repository.LoggerRepositoryConfigurationResetEventHandler</signature>
                        <name>ConfigurationReset</name>
                    </event>
                    <event>
                        <signature>log4net.Repository.LoggerRepositoryConfigurationChangedEventHandler</signature>
                        <name>m_configurationChangedEvent</name>
                    </event>
                    <event>
                        <signature>log4net.Repository.LoggerRepositoryConfigurationResetEventHandler</signature>
                        <name>m_configurationResetEvent</name>
                    </event>
                    <event>
                        <signature>log4net.Repository.LoggerRepositoryShutdownEventHandler</signature>
                        <name>m_shutdownEvent</name>
                    </event>
                    <event>
                        <signature>log4net.Repository.LoggerRepositoryShutdownEventHandler</signature>
                        <name>ShutdownEvent</name>
                    </event>
                </eventlist>
            </type>
            <type>
                <name>log4net.ThreadContext</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>log4net.Util.ThreadContextProperties()</signature>
                        <name>get_Properties</name>
                    </method>
                    <method>
                        <signature>log4net.Util.ThreadContextStacks()</signature>
                        <name>get_Stacks</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>log4net.Util.ThreadContextProperties</signature>
                        <name>s_properties</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>log4net.Util.ThreadContextStacks</signature>
                        <name>s_stacks</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>log4net.Util.ThreadContextProperties()</signature>
                        <name>Properties</name>
                    </property>
                    <property>
                        <signature>log4net.Util.ThreadContextStacks()</signature>
                        <name>Stacks</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>log4net.Util.AppenderAttachedImpl</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(log4net.Appender.IAppender)</signature>
                        <name>AddAppender</name>
                    </method>
                    <method>
                        <signature>int32(log4net.Core.LoggingEvent)</signature>
                        <name>AppendLoopOnAppenders</name>
                    </method>
                    <method>
                        <signature>int32(log4net.Core.LoggingEvent[])</signature>
                        <name>AppendLoopOnAppenders</name>
                    </method>
                    <method>
                        <signature>void(log4net.Appender.IAppender, log4net.Core.LoggingEvent[])</signature>
                        <name>CallAppend</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>log4net.Appender.AppenderCollection()</signature>
                        <name>get_Appenders</name>
                    </method>
                    <method>
                        <signature>log4net.Appender.IAppender(string)</signature>
                        <name>GetAppender</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>RemoveAllAppenders</name>
                    </method>
                    <method>
                        <signature>log4net.Appender.IAppender(log4net.Appender.IAppender)</signature>
                        <name>RemoveAppender</name>
                    </method>
                    <method>
                        <signature>log4net.Appender.IAppender(string)</signature>
                        <name>RemoveAppender</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>log4net.Appender.IAppender[]</signature>
                        <name>m_appenderArray</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>log4net.Appender.AppenderCollection</signature>
                        <name>m_appenderList</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>log4net.Appender.AppenderCollection()</signature>
                        <name>Appenders</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>log4net.Util.CompositeProperties</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(log4net.Util.ReadOnlyPropertiesDictionary)</signature>
                        <name>Add</name>
                    </method>
                    <method>
                        <signature>log4net.Util.PropertiesDictionary()</signature>
                        <name>Flatten</name>
                    </method>
                    <method>
                        <signature>object(string)</signature>
                        <name>get_Item</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>log4net.Util.PropertiesDictionary</signature>
                        <name>m_flattened</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Collections.ArrayList</signature>
                        <name>m_nestedProperties</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>object(string)</signature>
                        <name>Item</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>log4net.Util.ContextPropertiesBase</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>object(string)</signature>
                        <name>get_Item</name>
                    </method>
                    <method>
                        <signature>void(string, object)</signature>
                        <name>set_Item</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist>
                    <property>
                        <signature>object(string)</signature>
                        <name>Item</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>log4net.Util.CountingQuietTextWriter</name>
                <methodlist>
                    <method>
                        <signature>void(System.IO.TextWriter, log4net.Core.IErrorHandler)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>int64()</signature>
                        <name>get_Count</name>
                    </method>
                    <method>
                        <signature>void(int64)</signature>
                        <name>set_Count</name>
                    </method>
                    <method>
                        <signature>void(char)</signature>
                        <name>Write</name>
                    </method>
                    <method>
                        <signature>void(char[], int32, int32)</signature>
                        <name>Write</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>Write</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int64</signature>
                        <name>m_countBytes</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>int64()</signature>
                        <name>Count</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>log4net.Util.CyclicBuffer</name>
                <methodlist>
                    <method>
                        <signature>void(int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>log4net.Core.LoggingEvent(log4net.Core.LoggingEvent)</signature>
                        <name>Append</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Clear</name>
                    </method>
                    <method>
                        <signature>log4net.Core.LoggingEvent(int32)</signature>
                        <name>get_Item</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Length</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_MaxSize</name>
                    </method>
                    <method>
                        <signature>log4net.Core.LoggingEvent[]()</signature>
                        <name>PopAll</name>
                    </method>
                    <method>
                        <signature>log4net.Core.LoggingEvent()</signature>
                        <name>PopOldest</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>log4net.Core.LoggingEvent[]</signature>
                        <name>m_events</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>m_first</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>m_last</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>m_maxSize</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>m_numElems</name>
                        <newname>d</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>log4net.Core.LoggingEvent(int32)</signature>
                        <name>Item</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>Length</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>MaxSize</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>log4net.Util.EmptyCollection</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.Array, int32)</signature>
                        <name>CopyTo</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Count</name>
                    </method>
                    <method>
                        <signature>log4net.Util.EmptyCollection()</signature>
                        <name>get_Instance</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsSynchronized</name>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>get_SyncRoot</name>
                    </method>
                    <method>
                        <signature>System.Collections.IEnumerator()</signature>
                        <name>GetEnumerator</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>log4net.Util.EmptyCollection</signature>
                        <name>s_instance</name>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>int32()</signature>
                        <name>Count</name>
                    </property>
                    <property>
                        <signature>log4net.Util.EmptyCollection()</signature>
                        <name>Instance</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>IsSynchronized</name>
                    </property>
                    <property>
                        <signature>object()</signature>
                        <name>SyncRoot</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>log4net.Util.EmptyDictionary</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(object, object)</signature>
                        <name>Add</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Clear</name>
                    </method>
                    <method>
                        <signature>bool(object)</signature>
                        <name>Contains</name>
                    </method>
                    <method>
                        <signature>void(System.Array, int32)</signature>
                        <name>CopyTo</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Count</name>
                    </method>
                    <method>
                        <signature>log4net.Util.EmptyDictionary()</signature>
                        <name>get_Instance</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsFixedSize</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsReadOnly</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsSynchronized</name>
                    </method>
                    <method>
                        <signature>object(object)</signature>
                        <name>get_Item</name>
                    </method>
                    <method>
                        <signature>System.Collections.ICollection()</signature>
                        <name>get_Keys</name>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>get_SyncRoot</name>
                    </method>
                    <method>
                        <signature>System.Collections.ICollection()</signature>
                        <name>get_Values</name>
                    </method>
                    <method>
                        <signature>System.Collections.IDictionaryEnumerator()</signature>
                        <name>GetEnumerator</name>
                    </method>
                    <method>
                        <signature>void(object)</signature>
                        <name>Remove</name>
                    </method>
                    <method>
                        <signature>void(object, object)</signature>
                        <name>set_Item</name>
                    </method>
                    <method>
                        <signature>System.Collections.IEnumerator()</signature>
                        <name>System.Collections.IEnumerable.GetEnumerator</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>log4net.Util.EmptyDictionary</signature>
                        <name>s_instance</name>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>int32()</signature>
                        <name>Count</name>
                    </property>
                    <property>
                        <signature>log4net.Util.EmptyDictionary()</signature>
                        <name>Instance</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>IsFixedSize</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>IsReadOnly</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>IsSynchronized</name>
                    </property>
                    <property>
                        <signature>object(object)</signature>
                        <name>Item</name>
                    </property>
                    <property>
                        <signature>System.Collections.ICollection()</signature>
                        <name>Keys</name>
                    </property>
                    <property>
                        <signature>object()</signature>
                        <name>SyncRoot</name>
                    </property>
                    <property>
                        <signature>System.Collections.ICollection()</signature>
                        <name>Values</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>log4net.Util.FormattingInfo</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(int32, int32, bool)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_LeftAlign</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Max</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Min</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_LeftAlign</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_Max</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_Min</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>bool</signature>
                        <name>m_leftAlign</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>m_max</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>m_min</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>bool()</signature>
                        <name>LeftAlign</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>Max</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>Min</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>log4net.Util.GlobalContextProperties</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Clear</name>
                    </method>
                    <method>
                        <signature>object(string)</signature>
                        <name>get_Item</name>
                    </method>
                    <method>
                        <signature>log4net.Util.ReadOnlyPropertiesDictionary()</signature>
                        <name>GetReadOnlyProperties</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>Remove</name>
                    </method>
                    <method>
                        <signature>void(string, object)</signature>
                        <name>set_Item</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>log4net.Util.ReadOnlyPropertiesDictionary modreq (System.Runtime.CompilerServices.IsVolatile)</signature>
                        <name>m_readOnlyProperties</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>object</signature>
                        <name>m_syncRoot</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>object(string)</signature>
                        <name>Item</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>log4net.Util.LevelMapping</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ActivateOptions</name>
                    </method>
                    <method>
                        <signature>void(log4net.Util.LevelMappingEntry)</signature>
                        <name>Add</name>
                    </method>
                    <method>
                        <signature>log4net.Util.LevelMappingEntry(log4net.Core.Level)</signature>
                        <name>Lookup</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>log4net.Util.LevelMappingEntry[]</signature>
                        <name>m_entries</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Hashtable</signature>
                        <name>m_entriesMap</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>log4net.Util.LevelMappingEntry</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ActivateOptions</name>
                    </method>
                    <method>
                        <signature>log4net.Core.Level()</signature>
                        <name>get_Level</name>
                    </method>
                    <method>
                        <signature>void(log4net.Core.Level)</signature>
                        <name>set_Level</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>log4net.Core.Level</signature>
                        <name>m_level</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>log4net.Core.Level()</signature>
                        <name>Level</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>log4net.Util.LogicalThreadContextProperties</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Clear</name>
                    </method>
                    <method>
                        <signature>object(string)</signature>
                        <name>get_Item</name>
                    </method>
                    <method>
                        <signature>log4net.Util.PropertiesDictionary(bool)</signature>
                        <name>GetProperties</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>Remove</name>
                    </method>
                    <method>
                        <signature>void(string, object)</signature>
                        <name>set_Item</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist>
                    <property>
                        <signature>object(string)</signature>
                        <name>Item</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>log4net.Util.LogLog</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>Debug</name>
                    </method>
                    <method>
                        <signature>void(string, System.Exception)</signature>
                        <name>Debug</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>EmitErrorLine</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>EmitOutLine</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>Error</name>
                    </method>
                    <method>
                        <signature>void(string, System.Exception)</signature>
                        <name>Error</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_InternalDebugging</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsDebugEnabled</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsErrorEnabled</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsWarnEnabled</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_QuietMode</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_InternalDebugging</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_QuietMode</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>Warn</name>
                    </method>
                    <method>
                        <signature>void(string, System.Exception)</signature>
                        <name>Warn</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>ERR_PREFIX</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>PREFIX</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>s_debugEnabled</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>s_quietMode</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>WARN_PREFIX</name>
                        <newname>c</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>bool()</signature>
                        <name>InternalDebugging</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>IsDebugEnabled</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>IsErrorEnabled</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>IsWarnEnabled</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>QuietMode</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>log4net.Util.NativeError</name>
                <methodlist>
                    <method>
                        <signature>void(int32, string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>int32(int32, native int&amp;, int32, int32, string&amp;, int32, native int)</signature>
                        <name>FormatMessage</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Message</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Number</name>
                    </method>
                    <method>
                        <signature>log4net.Util.NativeError(int32)</signature>
                        <name>GetError</name>
                    </method>
                    <method>
                        <signature>string(int32)</signature>
                        <name>GetErrorMessage</name>
                    </method>
                    <method>
                        <signature>log4net.Util.NativeError()</signature>
                        <name>GetLastError</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ToString</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>m_message</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>m_number</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>string()</signature>
                        <name>Message</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>Number</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>log4net.Util.NullDictionaryEnumerator</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>get_Current</name>
                    </method>
                    <method>
                        <signature>System.Collections.DictionaryEntry()</signature>
                        <name>get_Entry</name>
                    </method>
                    <method>
                        <signature>log4net.Util.NullDictionaryEnumerator()</signature>
                        <name>get_Instance</name>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>get_Key</name>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>get_Value</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>MoveNext</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Reset</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>log4net.Util.NullDictionaryEnumerator</signature>
                        <name>s_instance</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>object()</signature>
                        <name>Current</name>
                    </property>
                    <property>
                        <signature>System.Collections.DictionaryEntry()</signature>
                        <name>Entry</name>
                    </property>
                    <property>
                        <signature>log4net.Util.NullDictionaryEnumerator()</signature>
                        <name>Instance</name>
                    </property>
                    <property>
                        <signature>object()</signature>
                        <name>Key</name>
                    </property>
                    <property>
                        <signature>object()</signature>
                        <name>Value</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>log4net.Util.NullEnumerator</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>get_Current</name>
                    </method>
                    <method>
                        <signature>log4net.Util.NullEnumerator()</signature>
                        <name>get_Instance</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>MoveNext</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Reset</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>log4net.Util.NullEnumerator</signature>
                        <name>s_instance</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>object()</signature>
                        <name>Current</name>
                    </property>
                    <property>
                        <signature>log4net.Util.NullEnumerator()</signature>
                        <name>Instance</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>log4net.Util.NullSecurityContext</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.IDisposable(object)</signature>
                        <name>Impersonate</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>log4net.Util.NullSecurityContext</signature>
                        <name>Instance</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>log4net.Util.OnlyOnceErrorHandler</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>Error</name>
                    </method>
                    <method>
                        <signature>void(string, System.Exception)</signature>
                        <name>Error</name>
                    </method>
                    <method>
                        <signature>void(string, System.Exception, log4net.Core.ErrorCode)</signature>
                        <name>Error</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsEnabled</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>bool</signature>
                        <name>m_firstTime</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>m_prefix</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>bool()</signature>
                        <name>IsEnabled</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>log4net.Util.OptionConverter</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(System.Type, System.Type)</signature>
                        <name>CanConvertTypeTo</name>
                    </method>
                    <method>
                        <signature>object(System.Type, string)</signature>
                        <name>ConvertStringTo</name>
                    </method>
                    <method>
                        <signature>object(object, System.Type)</signature>
                        <name>ConvertTypeTo</name>
                    </method>
                    <method>
                        <signature>object(string, System.Type, object)</signature>
                        <name>InstantiateByClassName</name>
                    </method>
                    <method>
                        <signature>object(System.Type, string, bool)</signature>
                        <name>ParseEnum</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string(string, System.Collections.IDictionary)</signature>
                        <name>SubstituteVariables</name>
                    </method>
                    <method>
                        <signature>bool(string, bool)</signature>
                        <name>ToBoolean</name>
                    </method>
                    <method>
                        <signature>int64(string, int64)</signature>
                        <name>ToFileSize</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>DELIM_START</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>DELIM_START_LEN</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>char</signature>
                        <name>DELIM_STOP</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>DELIM_STOP_LEN</name>
                        <newname>d</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>log4net.Util.PatternConverter</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.IO.TextWriter, object)</signature>
                        <name>Convert</name>
                    </method>
                    <method>
                        <signature>void(System.IO.TextWriter, object)</signature>
                        <name>Format</name>
                    </method>
                    <method>
                        <signature>log4net.Util.FormattingInfo()</signature>
                        <name>get_FormattingInfo</name>
                    </method>
                    <method>
                        <signature>log4net.Util.PatternConverter()</signature>
                        <name>get_Next</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Option</name>
                    </method>
                    <method>
                        <signature>void(log4net.Util.FormattingInfo)</signature>
                        <name>set_FormattingInfo</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Option</name>
                    </method>
                    <method>
                        <signature>log4net.Util.PatternConverter(log4net.Util.PatternConverter)</signature>
                        <name>SetNext</name>
                    </method>
                    <method>
                        <signature>void(System.IO.TextWriter, int32)</signature>
                        <name>SpacePad</name>
                    </method>
                    <method>
                        <signature>void(System.IO.TextWriter, log4net.Repository.ILoggerRepository, System.Collections.IDictionary)</signature>
                        <name>WriteDictionary</name>
                    </method>
                    <method>
                        <signature>void(System.IO.TextWriter, log4net.Repository.ILoggerRepository, object)</signature>
                        <name>WriteObject</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>c_renderBufferMaxCapacity</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>c_renderBufferSize</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>log4net.Util.ReusableStringWriter</signature>
                        <name>m_formatWriter</name>
                        <newname>i</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>m_leftAlign</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>m_max</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>m_min</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>log4net.Util.PatternConverter</signature>
                        <name>m_next</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>m_option</name>
                        <newname>h</newname>
                    </field>
                    <field>
                        <signature>string[]</signature>
                        <name>SPACES</name>
                        <newname>c</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>log4net.Util.FormattingInfo()</signature>
                        <name>FormattingInfo</name>
                    </property>
                    <property>
                        <signature>log4net.Util.PatternConverter()</signature>
                        <name>Next</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>Option</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>log4net.Util.PatternParser</name>
                <methodlist>
                    <method>
                        <signature>void(string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(log4net.Util.PatternConverter)</signature>
                        <name>AddConverter</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string[]()</signature>
                        <name>BuildCache</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Hashtable()</signature>
                        <name>get_PatternConverters</name>
                    </method>
                    <method>
                        <signature>log4net.Util.PatternConverter()</signature>
                        <name>Parse</name>
                    </method>
                    <method>
                        <signature>void(string, string[])</signature>
                        <name>ParseInternal</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(string, string, log4net.Util.FormattingInfo)</signature>
                        <name>ProcessConverter</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>ProcessLiteral</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>char</signature>
                        <name>ESCAPE_CHAR</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>log4net.Util.PatternConverter</signature>
                        <name>m_head</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>m_pattern</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Hashtable</signature>
                        <name>m_patternConverters</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>log4net.Util.PatternConverter</signature>
                        <name>m_tail</name>
                        <newname>c</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>System.Collections.Hashtable()</signature>
                        <name>PatternConverters</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>log4net.Util.PatternParser/StringLengthComparer</name>
                <newname>log4net.Util.PatternParser/a</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>int32(object, object)</signature>
                        <name>Compare</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>log4net.Util.PatternParser/StringLengthComparer</signature>
                        <name>Instance</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>log4net.Util.PatternString</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ActivateOptions</name>
                    </method>
                    <method>
                        <signature>void(log4net.Util.PatternString/ConverterInfo)</signature>
                        <name>AddConverter</name>
                    </method>
                    <method>
                        <signature>void(string, System.Type)</signature>
                        <name>AddConverter</name>
                    </method>
                    <method>
                        <signature>log4net.Util.PatternParser(string)</signature>
                        <name>CreatePatternParser</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>Format</name>
                    </method>
                    <method>
                        <signature>void(System.IO.TextWriter)</signature>
                        <name>Format</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_ConversionPattern</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_ConversionPattern</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>log4net.Util.PatternConverter</signature>
                        <name>m_head</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Hashtable</signature>
                        <name>m_instanceRulesRegistry</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>m_pattern</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Hashtable</signature>
                        <name>s_globalRulesRegistry</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>string()</signature>
                        <name>ConversionPattern</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>log4net.Util.PatternString/ConverterInfo</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Name</name>
                    </method>
                    <method>
                        <signature>System.Type()</signature>
                        <name>get_Type</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Name</name>
                    </method>
                    <method>
                        <signature>void(System.Type)</signature>
                        <name>set_Type</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>m_name</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Type</signature>
                        <name>m_type</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>string()</signature>
                        <name>Name</name>
                    </property>
                    <property>
                        <signature>System.Type()</signature>
                        <name>Type</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>log4net.Util.PatternStringConverters.AppDomainPatternConverter</name>
                <newname>ae</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.IO.TextWriter, object)</signature>
                        <name>Convert</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>log4net.Util.PatternStringConverters.DatePatternConverter</name>
                <newname>an</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ActivateOptions</name>
                    </method>
                    <method>
                        <signature>void(System.IO.TextWriter, object)</signature>
                        <name>Convert</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>log4net.DateFormatter.IDateFormatter</signature>
                        <name>m_dateFormatter</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>log4net.Util.PatternStringConverters.EnvironmentPatternConverter</name>
                <newname>c</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.IO.TextWriter, object)</signature>
                        <name>Convert</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>log4net.Util.PatternStringConverters.IdentityPatternConverter</name>
                <newname>v</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.IO.TextWriter, object)</signature>
                        <name>Convert</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>log4net.Util.PatternStringConverters.LiteralPatternConverter</name>
                <newname>f</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.IO.TextWriter, object)</signature>
                        <name>Convert</name>
                    </method>
                    <method>
                        <signature>void(System.IO.TextWriter, object)</signature>
                        <name>Format</name>
                    </method>
                    <method>
                        <signature>log4net.Util.PatternConverter(log4net.Util.PatternConverter)</signature>
                        <name>SetNext</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>log4net.Util.PatternStringConverters.NewLinePatternConverter</name>
                <newname>j</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ActivateOptions</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>log4net.Util.PatternStringConverters.ProcessIdPatternConverter</name>
                <newname>e</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.IO.TextWriter, object)</signature>
                        <name>Convert</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>log4net.Util.PatternStringConverters.PropertyPatternConverter</name>
                <newname>g</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.IO.TextWriter, object)</signature>
                        <name>Convert</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>log4net.Util.PatternStringConverters.RandomStringPatternConverter</name>
                <newname>am</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ActivateOptions</name>
                    </method>
                    <method>
                        <signature>void(System.IO.TextWriter, object)</signature>
                        <name>Convert</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>m_length</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Random</signature>
                        <name>s_random</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>log4net.Util.PatternStringConverters.UserNamePatternConverter</name>
                <newname>ab</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.IO.TextWriter, object)</signature>
                        <name>Convert</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>log4net.Util.PatternStringConverters.UtcDatePatternConverter</name>
                <newname>p</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.IO.TextWriter, object)</signature>
                        <name>Convert</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>log4net.Util.PropertiesDictionary</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(log4net.Util.ReadOnlyPropertiesDictionary)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Clear</name>
                    </method>
                    <method>
                        <signature>object(string)</signature>
                        <name>get_Item</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>Remove</name>
                    </method>
                    <method>
                        <signature>void(string, object)</signature>
                        <name>set_Item</name>
                    </method>
                    <method>
                        <signature>void(System.Array, int32)</signature>
                        <name>System.Collections.ICollection.CopyTo</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>System.Collections.ICollection.get_IsSynchronized</name>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>System.Collections.ICollection.get_SyncRoot</name>
                    </method>
                    <method>
                        <signature>void(object, object)</signature>
                        <name>System.Collections.IDictionary.Add</name>
                    </method>
                    <method>
                        <signature>bool(object)</signature>
                        <name>System.Collections.IDictionary.Contains</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>System.Collections.IDictionary.get_IsFixedSize</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>System.Collections.IDictionary.get_IsReadOnly</name>
                    </method>
                    <method>
                        <signature>object(object)</signature>
                        <name>System.Collections.IDictionary.get_Item</name>
                    </method>
                    <method>
                        <signature>System.Collections.ICollection()</signature>
                        <name>System.Collections.IDictionary.get_Keys</name>
                    </method>
                    <method>
                        <signature>System.Collections.ICollection()</signature>
                        <name>System.Collections.IDictionary.get_Values</name>
                    </method>
                    <method>
                        <signature>System.Collections.IDictionaryEnumerator()</signature>
                        <name>System.Collections.IDictionary.GetEnumerator</name>
                    </method>
                    <method>
                        <signature>void(object)</signature>
                        <name>System.Collections.IDictionary.Remove</name>
                    </method>
                    <method>
                        <signature>void(object, object)</signature>
                        <name>System.Collections.IDictionary.set_Item</name>
                    </method>
                    <method>
                        <signature>System.Collections.IEnumerator()</signature>
                        <name>System.Collections.IEnumerable.GetEnumerator</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist>
                    <property>
                        <signature>object(string)</signature>
                        <name>Item</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>System.Collections.ICollection.IsSynchronized</name>
                    </property>
                    <property>
                        <signature>object()</signature>
                        <name>System.Collections.ICollection.SyncRoot</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>System.Collections.IDictionary.IsFixedSize</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>System.Collections.IDictionary.IsReadOnly</name>
                    </property>
                    <property>
                        <signature>object(object)</signature>
                        <name>System.Collections.IDictionary.Item</name>
                    </property>
                    <property>
                        <signature>System.Collections.ICollection()</signature>
                        <name>System.Collections.IDictionary.Keys</name>
                    </property>
                    <property>
                        <signature>System.Collections.ICollection()</signature>
                        <name>System.Collections.IDictionary.Values</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>log4net.Util.ProtectCloseTextWriter</name>
                <methodlist>
                    <method>
                        <signature>void(System.IO.TextWriter)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.IO.TextWriter)</signature>
                        <name>Attach</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Close</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>log4net.Util.QuietTextWriter</name>
                <methodlist>
                    <method>
                        <signature>void(System.IO.TextWriter, log4net.Core.IErrorHandler)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Close</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_Closed</name>
                    </method>
                    <method>
                        <signature>log4net.Core.IErrorHandler()</signature>
                        <name>get_ErrorHandler</name>
                    </method>
                    <method>
                        <signature>void(log4net.Core.IErrorHandler)</signature>
                        <name>set_ErrorHandler</name>
                    </method>
                    <method>
                        <signature>void(char)</signature>
                        <name>Write</name>
                    </method>
                    <method>
                        <signature>void(char[], int32, int32)</signature>
                        <name>Write</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>Write</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>bool</signature>
                        <name>m_closed</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>log4net.Core.IErrorHandler</signature>
                        <name>m_errorHandler</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>bool()</signature>
                        <name>Closed</name>
                    </property>
                    <property>
                        <signature>log4net.Core.IErrorHandler()</signature>
                        <name>ErrorHandler</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>log4net.Util.ReaderWriterLock</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>AcquireReaderLock</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>AcquireWriterLock</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ReleaseReaderLock</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ReleaseWriterLock</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Threading.ReaderWriterLock</signature>
                        <name>m_lock</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>log4net.Util.ReadOnlyPropertiesDictionary</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(log4net.Util.ReadOnlyPropertiesDictionary)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Clear</name>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>Contains</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Count</name>
                    </method>
                    <method>
                        <signature>System.Collections.Hashtable()</signature>
                        <name>get_InnerHashtable</name>
                    </method>
                    <method>
                        <signature>object(string)</signature>
                        <name>get_Item</name>
                    </method>
                    <method>
                        <signature>string[]()</signature>
                        <name>GetKeys</name>
                    </method>
                    <method>
                        <signature>void(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)</signature>
                        <name>GetObjectData</name>
                    </method>
                    <method>
                        <signature>void(string, object)</signature>
                        <name>set_Item</name>
                    </method>
                    <method>
                        <signature>void(System.Array, int32)</signature>
                        <name>System.Collections.ICollection.CopyTo</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>System.Collections.ICollection.get_IsSynchronized</name>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>System.Collections.ICollection.get_SyncRoot</name>
                    </method>
                    <method>
                        <signature>void(object, object)</signature>
                        <name>System.Collections.IDictionary.Add</name>
                    </method>
                    <method>
                        <signature>bool(object)</signature>
                        <name>System.Collections.IDictionary.Contains</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>System.Collections.IDictionary.get_IsFixedSize</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>System.Collections.IDictionary.get_IsReadOnly</name>
                    </method>
                    <method>
                        <signature>object(object)</signature>
                        <name>System.Collections.IDictionary.get_Item</name>
                    </method>
                    <method>
                        <signature>System.Collections.ICollection()</signature>
                        <name>System.Collections.IDictionary.get_Keys</name>
                    </method>
                    <method>
                        <signature>System.Collections.ICollection()</signature>
                        <name>System.Collections.IDictionary.get_Values</name>
                    </method>
                    <method>
                        <signature>System.Collections.IDictionaryEnumerator()</signature>
                        <name>System.Collections.IDictionary.GetEnumerator</name>
                    </method>
                    <method>
                        <signature>void(object)</signature>
                        <name>System.Collections.IDictionary.Remove</name>
                    </method>
                    <method>
                        <signature>void(object, object)</signature>
                        <name>System.Collections.IDictionary.set_Item</name>
                    </method>
                    <method>
                        <signature>System.Collections.IEnumerator()</signature>
                        <name>System.Collections.IEnumerable.GetEnumerator</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.Hashtable</signature>
                        <name>m_hashtable</name>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>int32()</signature>
                        <name>Count</name>
                    </property>
                    <property>
                        <signature>System.Collections.Hashtable()</signature>
                        <name>InnerHashtable</name>
                    </property>
                    <property>
                        <signature>object(string)</signature>
                        <name>Item</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>System.Collections.ICollection.IsSynchronized</name>
                    </property>
                    <property>
                        <signature>object()</signature>
                        <name>System.Collections.ICollection.SyncRoot</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>System.Collections.IDictionary.IsFixedSize</name>
                    </property>
                    <property>
                        <signature>bool()</signature>
                        <name>System.Collections.IDictionary.IsReadOnly</name>
                    </property>
                    <property>
                        <signature>object(object)</signature>
                        <name>System.Collections.IDictionary.Item</name>
                    </property>
                    <property>
                        <signature>System.Collections.ICollection()</signature>
                        <name>System.Collections.IDictionary.Keys</name>
                    </property>
                    <property>
                        <signature>System.Collections.ICollection()</signature>
                        <name>System.Collections.IDictionary.Values</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>log4net.Util.ReusableStringWriter</name>
                <methodlist>
                    <method>
                        <signature>void(System.IFormatProvider)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>Dispose</name>
                    </method>
                    <method>
                        <signature>void(int32, int32)</signature>
                        <name>Reset</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>log4net.Util.SystemInfo</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string(System.Reflection.Assembly)</signature>
                        <name>AssemblyFileName</name>
                    </method>
                    <method>
                        <signature>string(System.Reflection.Assembly)</signature>
                        <name>AssemblyLocationInfo</name>
                    </method>
                    <method>
                        <signature>string(System.Type)</signature>
                        <name>AssemblyQualifiedName</name>
                    </method>
                    <method>
                        <signature>string(System.Reflection.Assembly)</signature>
                        <name>AssemblyShortName</name>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>ConvertToFullPath</name>
                    </method>
                    <method>
                        <signature>System.ArgumentOutOfRangeException(string, object, string)</signature>
                        <name>CreateArgumentOutOfRangeException</name>
                    </method>
                    <method>
                        <signature>System.Collections.Hashtable()</signature>
                        <name>CreateCaseInsensitiveHashtable</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_ApplicationBaseDirectory</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_ApplicationFriendlyName</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_ConfigurationFileLocation</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_CurrentThreadId</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_EntryAssemblyLocation</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_HostName</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_NewLine</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_NotAvailableText</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_NullText</name>
                    </method>
                    <method>
                        <signature>System.DateTime()</signature>
                        <name>get_ProcessStartTime</name>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>GetAppSetting</name>
                    </method>
                    <method>
                        <signature>System.Type(string, bool, bool)</signature>
                        <name>GetTypeFromString</name>
                    </method>
                    <method>
                        <signature>System.Type(System.Reflection.Assembly, string, bool, bool)</signature>
                        <name>GetTypeFromString</name>
                    </method>
                    <method>
                        <signature>System.Type(System.Type, string, bool, bool)</signature>
                        <name>GetTypeFromString</name>
                    </method>
                    <method>
                        <signature>System.Guid()</signature>
                        <name>NewGuid</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_NotAvailableText</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_NullText</name>
                    </method>
                    <method>
                        <signature>bool(string, int32&amp;)</signature>
                        <name>TryParse</name>
                    </method>
                    <method>
                        <signature>bool(string, int64&amp;)</signature>
                        <name>TryParse</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>DEFAULT_NOT_AVAILABLE_TEXT</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>DEFAULT_NULL_TEXT</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Type[]</signature>
                        <name>EmptyTypes</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>s_appFriendlyName</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>s_hostName</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>s_notAvailableText</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>s_nullText</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>System.DateTime</signature>
                        <name>s_processStartTime</name>
                        <newname>g</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>string()</signature>
                        <name>ApplicationBaseDirectory</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>ApplicationFriendlyName</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>ConfigurationFileLocation</name>
                    </property>
                    <property>
                        <signature>int32()</signature>
                        <name>CurrentThreadId</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>EntryAssemblyLocation</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>HostName</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>NewLine</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>NotAvailableText</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>NullText</name>
                    </property>
                    <property>
                        <signature>System.DateTime()</signature>
                        <name>ProcessStartTime</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>log4net.Util.SystemStringFormat</name>
                <methodlist>
                    <method>
                        <signature>void(System.IFormatProvider, string, object[])</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.Array, System.Text.StringBuilder)</signature>
                        <name>RenderArray</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(object, System.Text.StringBuilder)</signature>
                        <name>RenderObject</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string(System.IFormatProvider, string, object[])</signature>
                        <name>StringFormat</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string(System.Exception, string, object[])</signature>
                        <name>StringFormatError</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ToString</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>object[]</signature>
                        <name>m_args</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>m_format</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.IFormatProvider</signature>
                        <name>m_provider</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>log4net.Util.TextWriterAdapter</name>
                <methodlist>
                    <method>
                        <signature>void(System.IO.TextWriter)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Close</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>Dispose</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Flush</name>
                    </method>
                    <method>
                        <signature>System.Text.Encoding()</signature>
                        <name>get_Encoding</name>
                    </method>
                    <method>
                        <signature>System.IFormatProvider()</signature>
                        <name>get_FormatProvider</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_NewLine</name>
                    </method>
                    <method>
                        <signature>System.IO.TextWriter()</signature>
                        <name>get_Writer</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_NewLine</name>
                    </method>
                    <method>
                        <signature>void(System.IO.TextWriter)</signature>
                        <name>set_Writer</name>
                    </method>
                    <method>
                        <signature>void(char)</signature>
                        <name>Write</name>
                    </method>
                    <method>
                        <signature>void(char[], int32, int32)</signature>
                        <name>Write</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>Write</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.IO.TextWriter</signature>
                        <name>m_writer</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>System.Text.Encoding()</signature>
                        <name>Encoding</name>
                    </property>
                    <property>
                        <signature>System.IFormatProvider()</signature>
                        <name>FormatProvider</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>NewLine</name>
                    </property>
                    <property>
                        <signature>System.IO.TextWriter()</signature>
                        <name>Writer</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>log4net.Util.ThreadContextProperties</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Clear</name>
                    </method>
                    <method>
                        <signature>object(string)</signature>
                        <name>get_Item</name>
                    </method>
                    <method>
                        <signature>log4net.Util.PropertiesDictionary(bool)</signature>
                        <name>GetProperties</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>Remove</name>
                    </method>
                    <method>
                        <signature>void(string, object)</signature>
                        <name>set_Item</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.LocalDataStoreSlot</signature>
                        <name>s_threadLocalSlot</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>object(string)</signature>
                        <name>Item</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>log4net.Util.ThreadContextStack</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Clear</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Count</name>
                    </method>
                    <method>
                        <signature>System.Collections.Stack()</signature>
                        <name>get_InternalStack</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetFullMessage</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>log4net.Core.IFixingRequired.GetFixedObject</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>Pop</name>
                    </method>
                    <method>
                        <signature>System.IDisposable(string)</signature>
                        <name>Push</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.Stack)</signature>
                        <name>set_InternalStack</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ToString</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.Stack</signature>
                        <name>m_stack</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>int32()</signature>
                        <name>Count</name>
                    </property>
                    <property>
                        <signature>System.Collections.Stack()</signature>
                        <name>InternalStack</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>log4net.Util.ThreadContextStack/AutoPopStackFrame</name>
                <newname>log4net.Util.ThreadContextStack/b</newname>
                <methodlist>
                    <method>
                        <signature>void(System.Collections.Stack, int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Dispose</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>m_frameDepth</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Stack</signature>
                        <name>m_frameStack</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>log4net.Util.ThreadContextStack/StackFrame</name>
                <newname>log4net.Util.ThreadContextStack/a</newname>
                <methodlist>
                    <method>
                        <signature>void(string, log4net.Util.ThreadContextStack/StackFrame)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_FullMessage</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Message</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>m_fullMessage</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>m_message</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>log4net.Util.ThreadContextStack/StackFrame</signature>
                        <name>m_parent</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>log4net.Util.ThreadContextStacks</name>
                <methodlist>
                    <method>
                        <signature>void(log4net.Util.ContextPropertiesBase)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>log4net.Util.ThreadContextStack(string)</signature>
                        <name>get_Item</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>log4net.Util.ContextPropertiesBase</signature>
                        <name>m_properties</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>log4net.Util.ThreadContextStack(string)</signature>
                        <name>Item</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>log4net.Util.Transform</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>int32(string, string)</signature>
                        <name>CountSubstrings</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string(string, string)</signature>
                        <name>MaskXmlInvalidCharacters</name>
                    </method>
                    <method>
                        <signature>void(System.Xml.XmlWriter, string, string)</signature>
                        <name>WriteEscapedXmlString</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>CDATA_END</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>CDATA_UNESCAPABLE_TOKEN</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Text.RegularExpressions.Regex</signature>
                        <name>INVALIDCHARS</name>
                        <newname>c</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>log4net.Util.TypeConverters.BooleanConverter</name>
                <newname>aj</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(System.Type)</signature>
                        <name>CanConvertFrom</name>
                    </method>
                    <method>
                        <signature>object(object)</signature>
                        <name>ConvertFrom</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>log4net.Util.TypeConverters.ConversionNotSupportedException</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string, System.Exception)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>log4net.Util.TypeConverters.ConversionNotSupportedException(System.Type, object)</signature>
                        <name>Create</name>
                    </method>
                    <method>
                        <signature>log4net.Util.TypeConverters.ConversionNotSupportedException(System.Type, object, System.Exception)</signature>
                        <name>Create</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>log4net.Util.TypeConverters.ConverterRegistry</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.Type, object)</signature>
                        <name>AddConverter</name>
                    </method>
                    <method>
                        <signature>void(System.Type, System.Type)</signature>
                        <name>AddConverter</name>
                    </method>
                    <method>
                        <signature>object(System.Type)</signature>
                        <name>CreateConverterInstance</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>object(System.Type)</signature>
                        <name>GetConverterFromAttribute</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>log4net.Util.TypeConverters.IConvertFrom(System.Type)</signature>
                        <name>GetConvertFrom</name>
                    </method>
                    <method>
                        <signature>log4net.Util.TypeConverters.IConvertTo(System.Type, System.Type)</signature>
                        <name>GetConvertTo</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.Hashtable</signature>
                        <name>s_type2converter</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>log4net.Util.TypeConverters.EncodingConverter</name>
                <newname>h</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(System.Type)</signature>
                        <name>CanConvertFrom</name>
                    </method>
                    <method>
                        <signature>object(object)</signature>
                        <name>ConvertFrom</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>log4net.Util.TypeConverters.IConvertFrom</name>
                <methodlist>
                    <method>
                        <signature>bool(System.Type)</signature>
                        <name>CanConvertFrom</name>
                    </method>
                    <method>
                        <signature>object(object)</signature>
                        <name>ConvertFrom</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>log4net.Util.TypeConverters.IConvertTo</name>
                <methodlist>
                    <method>
                        <signature>bool(System.Type)</signature>
                        <name>CanConvertTo</name>
                    </method>
                    <method>
                        <signature>object(object, System.Type)</signature>
                        <name>ConvertTo</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>log4net.Util.TypeConverters.IPAddressConverter</name>
                <newname>w</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(System.Type)</signature>
                        <name>CanConvertFrom</name>
                    </method>
                    <method>
                        <signature>object(object)</signature>
                        <name>ConvertFrom</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>char[]</signature>
                        <name>validIpAddressChars</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>log4net.Util.TypeConverters.PatternLayoutConverter</name>
                <newname>ad</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(System.Type)</signature>
                        <name>CanConvertFrom</name>
                    </method>
                    <method>
                        <signature>object(object)</signature>
                        <name>ConvertFrom</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>log4net.Util.TypeConverters.PatternStringConverter</name>
                <newname>ac</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(System.Type)</signature>
                        <name>CanConvertFrom</name>
                    </method>
                    <method>
                        <signature>bool(System.Type)</signature>
                        <name>CanConvertTo</name>
                    </method>
                    <method>
                        <signature>object(object)</signature>
                        <name>ConvertFrom</name>
                    </method>
                    <method>
                        <signature>object(object, System.Type)</signature>
                        <name>ConvertTo</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>log4net.Util.TypeConverters.TypeConverter</name>
                <newname>ai</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(System.Type)</signature>
                        <name>CanConvertFrom</name>
                    </method>
                    <method>
                        <signature>object(object)</signature>
                        <name>ConvertFrom</name>
                    </method>
                </methodlist>
                <fieldlist />
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>log4net.Util.TypeConverters.TypeConverterAttribute</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.Type)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_ConverterTypeName</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_ConverterTypeName</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>m_typeName</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>string()</signature>
                        <name>ConverterTypeName</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>log4net.Util.WindowsSecurityContext</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ActivateOptions</name>
                    </method>
                    <method>
                        <signature>bool(native int)</signature>
                        <name>CloseHandle</name>
                    </method>
                    <method>
                        <signature>bool(native int, int32, native int&amp;)</signature>
                        <name>DuplicateToken</name>
                    </method>
                    <method>
                        <signature>log4net.Util.WindowsSecurityContext/ImpersonationMode()</signature>
                        <name>get_Credentials</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_DomainName</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_UserName</name>
                    </method>
                    <method>
                        <signature>System.IDisposable(object)</signature>
                        <name>Impersonate</name>
                    </method>
                    <method>
                        <signature>bool(string, string, string, int32, int32, native int&amp;)</signature>
                        <name>LogonUser</name>
                    </method>
                    <method>
                        <signature>System.Security.Principal.WindowsIdentity(string, string, string)</signature>
                        <name>LogonUser</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(log4net.Util.WindowsSecurityContext/ImpersonationMode)</signature>
                        <name>set_Credentials</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_DomainName</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Password</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_UserName</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>m_domainName</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>System.Security.Principal.WindowsIdentity</signature>
                        <name>m_identity</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>log4net.Util.WindowsSecurityContext/ImpersonationMode</signature>
                        <name>m_impersonationMode</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>m_password</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>m_userName</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
                <propertylist>
                    <property>
                        <signature>log4net.Util.WindowsSecurityContext/ImpersonationMode()</signature>
                        <name>Credentials</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>DomainName</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>Password</name>
                    </property>
                    <property>
                        <signature>string()</signature>
                        <name>UserName</name>
                    </property>
                </propertylist>
                <eventlist />
            </type>
            <type>
                <name>log4net.Util.WindowsSecurityContext/DisposableImpersonationContext</name>
                <newname>log4net.Util.WindowsSecurityContext/a</newname>
                <methodlist>
                    <method>
                        <signature>void(System.Security.Principal.WindowsImpersonationContext)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Dispose</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Security.Principal.WindowsImpersonationContext</signature>
                        <name>m_impersonationContext</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
            <type>
                <name>log4net.Util.WindowsSecurityContext/ImpersonationMode</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>log4net.Util.WindowsSecurityContext/ImpersonationMode</signature>
                        <name>Process</name>
                    </field>
                    <field>
                        <signature>log4net.Util.WindowsSecurityContext/ImpersonationMode</signature>
                        <name>User</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
                <propertylist />
                <eventlist />
            </type>
        </module>
    </mapping>
    <statistics>
        <statisticline>
            <description>Total Classes</description>
            <statistic>267</statistic>
        </statisticline>
        <statisticline>
            <description>Total Methods</description>
            <statistic>1913</statistic>
        </statisticline>
        <statisticline>
            <description>Total Fields</description>
            <statistic>662</statistic>
        </statisticline>
        <statisticline>
            <description>Total Properties</description>
            <statistic>362</statistic>
        </statisticline>
        <statisticline>
            <description>Total Events</description>
            <statistic>16</statistic>
        </statisticline>
        <statisticline>
            <description>Total Classes Renamed</description>
            <statistic>62</statistic>
            <statistic>23.22 %</statistic>
        </statisticline>
        <statisticline>
            <description>Total Methods Renamed</description>
            <statistic>127</statistic>
            <statistic>6.64 %</statistic>
        </statisticline>
        <statisticline>
            <description>Total Fields Renamed</description>
            <statistic>430</statistic>
            <statistic>64.95 %</statistic>
        </statisticline>
        <statisticline>
            <description>Total Properties Renamed</description>
            <statistic>1</statistic>
            <statistic>0.28 %</statistic>
        </statisticline>
        <statisticline>
            <description>Total Events Renamed</description>
            <statistic>0</statistic>
            <statistic>0.00 %</statistic>
        </statisticline>
        <statisticline>
            <description>Methods Renamed to 'a'</description>
            <statistic>77</statistic>
            <statistic>4.03 %</statistic>
        </statisticline>
        <statisticline>
            <description>Methods Renamed to 'b'</description>
            <statistic>24</statistic>
            <statistic>1.25 %</statistic>
        </statisticline>
        <statisticline>
            <description>Methods Renamed to 'h'</description>
            <statistic>8</statistic>
            <statistic>0.42 %</statistic>
        </statisticline>
        <statisticline>
            <description>Methods Renamed to 'c'</description>
            <statistic>5</statistic>
            <statistic>0.26 %</statistic>
        </statisticline>
        <statisticline>
            <description>Methods Renamed to 'd'</description>
            <statistic>4</statistic>
            <statistic>0.21 %</statistic>
        </statisticline>
        <statisticline>
            <description>Methods Renamed to 'i'</description>
            <statistic>4</statistic>
            <statistic>0.21 %</statistic>
        </statisticline>
        <statisticline>
            <description>Methods Renamed to 'e'</description>
            <statistic>2</statistic>
            <statistic>0.10 %</statistic>
        </statisticline>
    </statistics>
</dotfuscatorMap>